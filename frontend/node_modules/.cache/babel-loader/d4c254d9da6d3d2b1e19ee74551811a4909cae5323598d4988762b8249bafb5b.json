{"ast":null,"code":"\n// // frontend/src/pages/VerifyCodeConfirmAccount.jsx\n// import React, { useState, useEffect } from 'react';\n// import { useNavigate, useLocation } from 'react-router-dom';\n// import { handleSuccess, handleError, ToastContainer } from '../utils/ReactToastify';\n// import '../utils/ReactToastifyCustom.css';\n// import '../utils/style/SentOtpForgotPassword.css';\n// import OtpInput from '../Services/OtpInput';\n\n// function VerifyCodeConfirmAccount() {\n//     const [otp, setOtp] = useState('');\n//     const [timer, setTimer] = useState(0);\n//     const [isResendEnabled, setIsResendEnabled] = useState(false);\n//     const [isComplete, setIsComplete] = useState(false);\n//     const [hasCodeBeenSent, setHasCodeBeenSent] = useState(false);\n//     const { state } = useLocation(); // Get token from location state\n//     const navigate = useNavigate();\n\n//     useEffect(() => {\n//         if (!state?.token) {\n//             // If there's no token, redirect to the login page\n//             handleError('Unauthorized access. Please log in.');\n//             navigate('/login');\n//         }\n//     }, [state, navigate]);\n\n//     // Handle countdown timer\n//     useEffect(() => {\n//         if (timer > 0) {\n//             const countdown = setInterval(() => {\n//                 setTimer((prev) => prev - 1);\n//             }, 1000);\n\n//             return () => clearInterval(countdown);\n//         } else {\n//             setIsResendEnabled(true);\n//         }\n//     }, [timer]);\n\n//     const handleSubmit = async (event) => {\n//         event.preventDefault();\n//         try {\n//             const response = await fetch('http://localhost:8080/auth/verify-email', {\n//                 method: 'POST',\n//                 headers: { \n//                     'Content-Type': 'application/json',\n//                     'Authorization': `Bearer ${state.token}`, // Use the token for verification\n//                 },\n//                 body: JSON.stringify({ code: otp }),\n//             });\n\n//             const result = await response.json();\n\n//             if (response.ok) {\n//                 handleSuccess(result.message);\n//                 navigate('/home');\n//             } else {\n//                 handleError(result.message);\n//             }\n//         } catch (err) {\n//             handleError('Network error. Please check your connection and try again.');\n//         }\n//     };\n\n//     const handleSendOtp = async () => {\n//         try {\n//             setHasCodeBeenSent(true);\n//             setIsResendEnabled(false);\n//             setTimer(60); // Start timer when sending the code\n//             const response = await fetch('http://localhost:8080/auth/send-verification-code', {\n//                 method: 'POST',\n//                 headers: { \n//                     'Content-Type': 'application/json',\n//                     'Authorization': `Bearer ${state.token}`, // Use the token\n//                 },\n//             });\n\n//             const result = await response.json();\n\n//             if (response.ok) {\n//                 handleSuccess(result.message);\n//             } else {\n//                 handleError(result.message);\n//             }\n//         } catch (err) {\n//             handleError('Failed to send OTP. Please try again.');\n//         }\n//     };\n\n//     const handleResendOtp = async () => {\n//         try {\n//             setIsResendEnabled(false);\n//             setTimer(60); // Reset timer when resending the code\n//             const response = await fetch('http://localhost:8080/auth/resend-verification-code', {\n//                 method: 'POST',\n//                 headers: { \n//                     'Content-Type': 'application/json',\n//                     'Authorization': `Bearer ${state.token}`, // Use the token\n//                 },\n//             });\n\n//             const result = await response.json();\n\n//             if (response.ok) {\n//                 handleSuccess(result.message);\n//             } else {\n//                 handleError(result.message);\n//             }\n//         } catch (err) {\n//             handleError('Failed to resend OTP. Please try again.');\n//         }\n//     };\n\n//     return (\n//         <div className=\"otp-wrapper\">\n//             <div>\n//                 <img src='/app-icon.ico' alt='App Icon' className='app-icon' />\n//             </div>\n//             <h1 className=\"otp-title\">Verification Code</h1>\n//             <div className=\"otp-timer\">\n//                 {hasCodeBeenSent ? (\n//                     <p>We've sent a verification code to your registered email address.</p>\n//                 ) : (\n//                     <p>Click the button to send the verification code to your email.</p>\n//                 )}\n//                 <div className=\"timer\">\n//                     <p>Time Remaining: {timer} s</p>\n//                 </div>\n//             </div>\n//             <form onSubmit={handleSubmit}>\n//                 <div className=\"otp-buttons\">\n//                     {!hasCodeBeenSent ? (\n//                         <button\n//                             type=\"button\"\n//                             className=\"otp-btn send\"\n//                             onClick={handleSendOtp}\n//                         >\n//                             Send Code\n//                         </button>\n//                     ) : timer === 0 && isResendEnabled ? (\n//                         <button\n//                             type=\"button\"\n//                             className=\"otp-btn resend\"\n//                             onClick={handleResendOtp}\n//                         >\n//                             Resend Code\n//                         </button>\n//                     ) : hasCodeBeenSent && timer > 0 ? (\n//                         <>\n//                             <OtpInput\n//                                 length={6}\n//                                 onOtpSubmit={(otp) => setOtp(otp)}\n//                                 onOtpComplete={(complete) => setIsComplete(complete)}\n//                             />\n//                             <button\n//                                 type=\"submit\"\n//                                 className={`otp-btn verify ${isComplete ? 'active' : ''}`}\n//                                 disabled={!isComplete}\n//                             >\n//                                 Verify Code\n//                             </button>\n//                         </>\n//                     ) : null}\n//                 </div>\n//             </form>\n//             <ToastContainer />\n//         </div>\n//     );\n// }\n\n// export default VerifyCodeConfirmAccount;","map":{"version":3,"names":[],"sources":["C:/Users/thesh/Desktop/Authentication/frontend/src/pages/VerifyCodeConfirmAccount.jsx"],"sourcesContent":["\r\n// // frontend/src/pages/VerifyCodeConfirmAccount.jsx\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useNavigate, useLocation } from 'react-router-dom';\r\n// import { handleSuccess, handleError, ToastContainer } from '../utils/ReactToastify';\r\n// import '../utils/ReactToastifyCustom.css';\r\n// import '../utils/style/SentOtpForgotPassword.css';\r\n// import OtpInput from '../Services/OtpInput';\r\n\r\n// function VerifyCodeConfirmAccount() {\r\n//     const [otp, setOtp] = useState('');\r\n//     const [timer, setTimer] = useState(0);\r\n//     const [isResendEnabled, setIsResendEnabled] = useState(false);\r\n//     const [isComplete, setIsComplete] = useState(false);\r\n//     const [hasCodeBeenSent, setHasCodeBeenSent] = useState(false);\r\n//     const { state } = useLocation(); // Get token from location state\r\n//     const navigate = useNavigate();\r\n\r\n//     useEffect(() => {\r\n//         if (!state?.token) {\r\n//             // If there's no token, redirect to the login page\r\n//             handleError('Unauthorized access. Please log in.');\r\n//             navigate('/login');\r\n//         }\r\n//     }, [state, navigate]);\r\n\r\n//     // Handle countdown timer\r\n//     useEffect(() => {\r\n//         if (timer > 0) {\r\n//             const countdown = setInterval(() => {\r\n//                 setTimer((prev) => prev - 1);\r\n//             }, 1000);\r\n\r\n//             return () => clearInterval(countdown);\r\n//         } else {\r\n//             setIsResendEnabled(true);\r\n//         }\r\n//     }, [timer]);\r\n\r\n//     const handleSubmit = async (event) => {\r\n//         event.preventDefault();\r\n//         try {\r\n//             const response = await fetch('http://localhost:8080/auth/verify-email', {\r\n//                 method: 'POST',\r\n//                 headers: { \r\n//                     'Content-Type': 'application/json',\r\n//                     'Authorization': `Bearer ${state.token}`, // Use the token for verification\r\n//                 },\r\n//                 body: JSON.stringify({ code: otp }),\r\n//             });\r\n\r\n//             const result = await response.json();\r\n\r\n//             if (response.ok) {\r\n//                 handleSuccess(result.message);\r\n//                 navigate('/home');\r\n//             } else {\r\n//                 handleError(result.message);\r\n//             }\r\n//         } catch (err) {\r\n//             handleError('Network error. Please check your connection and try again.');\r\n//         }\r\n//     };\r\n\r\n//     const handleSendOtp = async () => {\r\n//         try {\r\n//             setHasCodeBeenSent(true);\r\n//             setIsResendEnabled(false);\r\n//             setTimer(60); // Start timer when sending the code\r\n//             const response = await fetch('http://localhost:8080/auth/send-verification-code', {\r\n//                 method: 'POST',\r\n//                 headers: { \r\n//                     'Content-Type': 'application/json',\r\n//                     'Authorization': `Bearer ${state.token}`, // Use the token\r\n//                 },\r\n//             });\r\n\r\n//             const result = await response.json();\r\n\r\n//             if (response.ok) {\r\n//                 handleSuccess(result.message);\r\n//             } else {\r\n//                 handleError(result.message);\r\n//             }\r\n//         } catch (err) {\r\n//             handleError('Failed to send OTP. Please try again.');\r\n//         }\r\n//     };\r\n\r\n//     const handleResendOtp = async () => {\r\n//         try {\r\n//             setIsResendEnabled(false);\r\n//             setTimer(60); // Reset timer when resending the code\r\n//             const response = await fetch('http://localhost:8080/auth/resend-verification-code', {\r\n//                 method: 'POST',\r\n//                 headers: { \r\n//                     'Content-Type': 'application/json',\r\n//                     'Authorization': `Bearer ${state.token}`, // Use the token\r\n//                 },\r\n//             });\r\n\r\n//             const result = await response.json();\r\n\r\n//             if (response.ok) {\r\n//                 handleSuccess(result.message);\r\n//             } else {\r\n//                 handleError(result.message);\r\n//             }\r\n//         } catch (err) {\r\n//             handleError('Failed to resend OTP. Please try again.');\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"otp-wrapper\">\r\n//             <div>\r\n//                 <img src='/app-icon.ico' alt='App Icon' className='app-icon' />\r\n//             </div>\r\n//             <h1 className=\"otp-title\">Verification Code</h1>\r\n//             <div className=\"otp-timer\">\r\n//                 {hasCodeBeenSent ? (\r\n//                     <p>We've sent a verification code to your registered email address.</p>\r\n//                 ) : (\r\n//                     <p>Click the button to send the verification code to your email.</p>\r\n//                 )}\r\n//                 <div className=\"timer\">\r\n//                     <p>Time Remaining: {timer} s</p>\r\n//                 </div>\r\n//             </div>\r\n//             <form onSubmit={handleSubmit}>\r\n//                 <div className=\"otp-buttons\">\r\n//                     {!hasCodeBeenSent ? (\r\n//                         <button\r\n//                             type=\"button\"\r\n//                             className=\"otp-btn send\"\r\n//                             onClick={handleSendOtp}\r\n//                         >\r\n//                             Send Code\r\n//                         </button>\r\n//                     ) : timer === 0 && isResendEnabled ? (\r\n//                         <button\r\n//                             type=\"button\"\r\n//                             className=\"otp-btn resend\"\r\n//                             onClick={handleResendOtp}\r\n//                         >\r\n//                             Resend Code\r\n//                         </button>\r\n//                     ) : hasCodeBeenSent && timer > 0 ? (\r\n//                         <>\r\n//                             <OtpInput\r\n//                                 length={6}\r\n//                                 onOtpSubmit={(otp) => setOtp(otp)}\r\n//                                 onOtpComplete={(complete) => setIsComplete(complete)}\r\n//                             />\r\n//                             <button\r\n//                                 type=\"submit\"\r\n//                                 className={`otp-btn verify ${isComplete ? 'active' : ''}`}\r\n//                                 disabled={!isComplete}\r\n//                             >\r\n//                                 Verify Code\r\n//                             </button>\r\n//                         </>\r\n//                     ) : null}\r\n//                 </div>\r\n//             </form>\r\n//             <ToastContainer />\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default VerifyCodeConfirmAccount;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}