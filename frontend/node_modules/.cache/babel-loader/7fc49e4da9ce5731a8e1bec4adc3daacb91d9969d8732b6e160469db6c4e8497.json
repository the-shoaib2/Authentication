{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thesh\\\\Desktop\\\\Authentication\\\\frontend\\\\src\\\\pages\\\\VerifyCodeConfirmAccount.jsx\",\n  _s = $RefreshSig$();\n// // frontend/src/pages/VerifyCodeConfirmAccount.jsx\n// import React, { useState, useEffect } from 'react';\n// import { useNavigate, useLocation } from 'react-router-dom';\n// import { handleSuccess, handleError, ToastContainer } from '../utils/ReactToastify';\n// import '../utils/ReactToastifyCustom.css';\n// import '../utils/style/SentOtpForgotPassword.css';\n// import OtpInput from '../Services/OtpInput';\n\n// function VerifyCodeConfirmAccount() {\n//     const [otp, setOtp] = useState('');\n//     const [timer, setTimer] = useState(0);\n//     const [isResendEnabled, setIsResendEnabled] = useState(false);\n//     const [isComplete, setIsComplete] = useState(false);\n//     const [hasCodeBeenSent, setHasCodeBeenSent] = useState(false);\n//     const { state } = useLocation(); // Get token from location state\n//     const navigate = useNavigate();\n\n//     useEffect(() => {\n//         if (!state?.token) {\n//             // If there's no token, redirect to the login page\n//             handleError('Unauthorized access. Please log in.');\n//             navigate('/login');\n//         }\n//     }, [state, navigate]);\n\n//     // Handle countdown timer\n//     useEffect(() => {\n//         if (timer > 0) {\n//             const countdown = setInterval(() => {\n//                 setTimer((prev) => prev - 1);\n//             }, 1000);\n\n//             return () => clearInterval(countdown);\n//         } else {\n//             setIsResendEnabled(true);\n//         }\n//     }, [timer]);\n\n//     const handleSubmit = async (event) => {\n//         event.preventDefault();\n//         try {\n//             const response = await fetch('http://localhost:8080/auth/verify-email', {\n//                 method: 'POST',\n//                 headers: { \n//                     'Content-Type': 'application/json',\n//                     'Authorization': `Bearer ${state.token}`, // Use the token for verification\n//                 },\n//                 body: JSON.stringify({ code: otp }),\n//             });\n\n//             const result = await response.json();\n\n//             if (response.ok) {\n//                 handleSuccess(result.message);\n//                 navigate('/home');\n//             } else {\n//                 handleError(result.message);\n//             }\n//         } catch (err) {\n//             handleError('Network error. Please check your connection and try again.');\n//         }\n//     };\n\n//     const handleSendOtp = async () => {\n//         try {\n//             setHasCodeBeenSent(true);\n//             setIsResendEnabled(false);\n//             setTimer(60); // Start timer when sending the code\n//             const response = await fetch('http://localhost:8080/auth/send-verification-code', {\n//                 method: 'POST',\n//                 headers: { \n//                     'Content-Type': 'application/json',\n//                     'Authorization': `Bearer ${state.token}`, // Use the token\n//                 },\n//             });\n\n//             const result = await response.json();\n\n//             if (response.ok) {\n//                 handleSuccess(result.message);\n//             } else {\n//                 handleError(result.message);\n//             }\n//         } catch (err) {\n//             handleError('Failed to send OTP. Please try again.');\n//         }\n//     };\n\n//     const handleResendOtp = async () => {\n//         try {\n//             setIsResendEnabled(false);\n//             setTimer(60); // Reset timer when resending the code\n//             const response = await fetch('http://localhost:8080/auth/resend-verification-code', {\n//                 method: 'POST',\n//                 headers: { \n//                     'Content-Type': 'application/json',\n//                     'Authorization': `Bearer ${state.token}`, // Use the token\n//                 },\n//             });\n\n//             const result = await response.json();\n\n//             if (response.ok) {\n//                 handleSuccess(result.message);\n//             } else {\n//                 handleError(result.message);\n//             }\n//         } catch (err) {\n//             handleError('Failed to resend OTP. Please try again.');\n//         }\n//     };\n\n//     return (\n//         <div className=\"otp-wrapper\">\n//             <div>\n//                 <img src='/app-icon.ico' alt='App Icon' className='app-icon' />\n//             </div>\n//             <h1 className=\"otp-title\">Verification Code</h1>\n//             <div className=\"otp-timer\">\n//                 {hasCodeBeenSent ? (\n//                     <p>We've sent a verification code to your registered email address.</p>\n//                 ) : (\n//                     <p>Click the button to send the verification code to your email.</p>\n//                 )}\n//                 <div className=\"timer\">\n//                     <p>Time Remaining: {timer} s</p>\n//                 </div>\n//             </div>\n//             <form onSubmit={handleSubmit}>\n//                 <div className=\"otp-buttons\">\n//                     {!hasCodeBeenSent ? (\n//                         <button\n//                             type=\"button\"\n//                             className=\"otp-btn send\"\n//                             onClick={handleSendOtp}\n//                         >\n//                             Send Code\n//                         </button>\n//                     ) : timer === 0 && isResendEnabled ? (\n//                         <button\n//                             type=\"button\"\n//                             className=\"otp-btn resend\"\n//                             onClick={handleResendOtp}\n//                         >\n//                             Resend Code\n//                         </button>\n//                     ) : hasCodeBeenSent && timer > 0 ? (\n//                         <>\n//                             <OtpInput\n//                                 length={6}\n//                                 onOtpSubmit={(otp) => setOtp(otp)}\n//                                 onOtpComplete={(complete) => setIsComplete(complete)}\n//                             />\n//                             <button\n//                                 type=\"submit\"\n//                                 className={`otp-btn verify ${isComplete ? 'active' : ''}`}\n//                                 disabled={!isComplete}\n//                             >\n//                                 Verify Code\n//                             </button>\n//                         </>\n//                     ) : null}\n//                 </div>\n//             </form>\n//             <ToastContainer />\n//         </div>\n//     );\n// }\n\n// export default VerifyCodeConfirmAccount;\n\n// frontend/src/pages/VerifyCodeConfirmAccount.jsx\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { handleSuccess, handleError, ToastContainer } from '../utils/ReactToastify';\nimport '../utils/ReactToastifyCustom.css';\nimport '../utils/style/SentOtpForgotPassword.css';\nimport OtpInput from '../Services/OtpInput';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction VerifyCodeConfirmAccount() {\n  _s();\n  const [otp, setOtp] = useState('');\n  const [timer, setTimer] = useState(0);\n  const [isResendEnabled, setIsResendEnabled] = useState(false);\n  const [isComplete, setIsComplete] = useState(false);\n  const [hasCodeBeenSent, setHasCodeBeenSent] = useState(false);\n  const {\n    state\n  } = useLocation(); // Get email and token from location state\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (!(state !== null && state !== void 0 && state.token) || !(state !== null && state !== void 0 && state.email)) {\n      // If there's no token or email, redirect to the login page\n      handleError('Unauthorized access. Please log in.');\n      navigate('/login');\n    } else {\n      // Check if a code was already sent (e.g., page reloads)\n      const codeSentStatus = localStorage.getItem('codeSentStatus');\n      const timerStart = localStorage.getItem('timerStart');\n      if (codeSentStatus === 'true' && timerStart) {\n        const timeElapsed = Math.floor((Date.now() - parseInt(timerStart, 10)) / 1000);\n        if (timeElapsed < 60) {\n          setTimer(60 - timeElapsed);\n          setHasCodeBeenSent(true);\n        } else {\n          setIsResendEnabled(true);\n        }\n      }\n    }\n  }, [state, navigate]);\n  useEffect(() => {\n    if (timer > 0) {\n      const countdown = setInterval(() => {\n        setTimer(prev => prev - 1);\n      }, 1000);\n      return () => clearInterval(countdown);\n    } else if (hasCodeBeenSent) {\n      setIsResendEnabled(true);\n    }\n  }, [timer, hasCodeBeenSent]);\n  const handleSendOtp = async () => {\n    try {\n      setHasCodeBeenSent(true);\n      setIsResendEnabled(false);\n      setTimer(60);\n      localStorage.setItem('codeSentStatus', 'true');\n      localStorage.setItem('timerStart', Date.now().toString());\n      const response = await fetch('http://localhost:8080/verification/send-code', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${state.token}` // Use the token for authorization\n        },\n        body: JSON.stringify({\n          email: state.email\n        })\n      });\n      const result = await response.json();\n      if (response.ok) {\n        handleSuccess(result.message);\n      } else {\n        handleError(result.message);\n      }\n    } catch (err) {\n      handleError('Failed to send OTP. Please try again.');\n    }\n  };\n  const handleResendOtp = async () => {\n    try {\n      setIsResendEnabled(false);\n      setTimer(60);\n      localStorage.setItem('timerStart', Date.now().toString());\n      const response = await fetch('http://localhost:8080/verification/resend-code', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${state.token}` // Use the token for authorization\n        },\n        body: JSON.stringify({\n          email: state.email\n        })\n      });\n      const result = await response.json();\n      if (response.ok) {\n        handleSuccess(result.message);\n      } else {\n        handleError(result.message);\n      }\n    } catch (err) {\n      handleError('Failed to resend OTP. Please try again.');\n    }\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    try {\n      const response = await fetch('http://localhost:8080/verification/verify-code', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${state.token}` // Use the token for verification\n        },\n        body: JSON.stringify({\n          code: otp\n        })\n      });\n      const result = await response.json();\n      if (response.ok) {\n        handleSuccess(result.message);\n\n        // Save token to localStorage or cookies if provided by backend\n        localStorage.setItem('authToken', result.token);\n\n        // Navigate to home\n        navigate('/home');\n      } else {\n        handleError(result.message);\n      }\n    } catch (err) {\n      handleError('Network error. Please check your connection and try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"otp-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/app-icon.ico\",\n        alt: \"App Icon\",\n        className: \"app-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"otp-title\",\n      children: \"Verification Code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"otp-timer\",\n      children: [hasCodeBeenSent ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"We've sent a verification code to your registered email address.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Click the button to send the verification code to your email.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Time Remaining: \", timer, \" s\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"otp-buttons\",\n        children: !hasCodeBeenSent ? /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"otp-btn send\",\n          onClick: handleSendOtp,\n          children: \"Send Code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 25\n        }, this) : timer === 0 && isResendEnabled ? /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"otp-btn resend\",\n          onClick: handleResendOtp,\n          children: \"Resend Code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 25\n        }, this) : hasCodeBeenSent && timer > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(OtpInput, {\n            length: 6,\n            onOtpSubmit: otp => setOtp(otp),\n            onOtpComplete: complete => setIsComplete(complete)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: `otp-btn verify ${isComplete ? 'active' : ''}`,\n            disabled: !isComplete,\n            children: \"Verify Code\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 314,\n    columnNumber: 9\n  }, this);\n}\n_s(VerifyCodeConfirmAccount, \"uGhZxgoOciv/9sNKFFyNWg9bMb8=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = VerifyCodeConfirmAccount;\nexport default VerifyCodeConfirmAccount;\nvar _c;\n$RefreshReg$(_c, \"VerifyCodeConfirmAccount\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useLocation","handleSuccess","handleError","ToastContainer","OtpInput","jsxDEV","_jsxDEV","Fragment","_Fragment","VerifyCodeConfirmAccount","_s","otp","setOtp","timer","setTimer","isResendEnabled","setIsResendEnabled","isComplete","setIsComplete","hasCodeBeenSent","setHasCodeBeenSent","state","navigate","token","email","codeSentStatus","localStorage","getItem","timerStart","timeElapsed","Math","floor","Date","now","parseInt","countdown","setInterval","prev","clearInterval","handleSendOtp","setItem","toString","response","fetch","method","headers","body","JSON","stringify","result","json","ok","message","err","handleResendOtp","handleSubmit","event","preventDefault","code","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onClick","length","onOtpSubmit","onOtpComplete","complete","disabled","_c","$RefreshReg$"],"sources":["C:/Users/thesh/Desktop/Authentication/frontend/src/pages/VerifyCodeConfirmAccount.jsx"],"sourcesContent":["\r\n// // frontend/src/pages/VerifyCodeConfirmAccount.jsx\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useNavigate, useLocation } from 'react-router-dom';\r\n// import { handleSuccess, handleError, ToastContainer } from '../utils/ReactToastify';\r\n// import '../utils/ReactToastifyCustom.css';\r\n// import '../utils/style/SentOtpForgotPassword.css';\r\n// import OtpInput from '../Services/OtpInput';\r\n\r\n// function VerifyCodeConfirmAccount() {\r\n//     const [otp, setOtp] = useState('');\r\n//     const [timer, setTimer] = useState(0);\r\n//     const [isResendEnabled, setIsResendEnabled] = useState(false);\r\n//     const [isComplete, setIsComplete] = useState(false);\r\n//     const [hasCodeBeenSent, setHasCodeBeenSent] = useState(false);\r\n//     const { state } = useLocation(); // Get token from location state\r\n//     const navigate = useNavigate();\r\n\r\n//     useEffect(() => {\r\n//         if (!state?.token) {\r\n//             // If there's no token, redirect to the login page\r\n//             handleError('Unauthorized access. Please log in.');\r\n//             navigate('/login');\r\n//         }\r\n//     }, [state, navigate]);\r\n\r\n//     // Handle countdown timer\r\n//     useEffect(() => {\r\n//         if (timer > 0) {\r\n//             const countdown = setInterval(() => {\r\n//                 setTimer((prev) => prev - 1);\r\n//             }, 1000);\r\n\r\n//             return () => clearInterval(countdown);\r\n//         } else {\r\n//             setIsResendEnabled(true);\r\n//         }\r\n//     }, [timer]);\r\n\r\n//     const handleSubmit = async (event) => {\r\n//         event.preventDefault();\r\n//         try {\r\n//             const response = await fetch('http://localhost:8080/auth/verify-email', {\r\n//                 method: 'POST',\r\n//                 headers: { \r\n//                     'Content-Type': 'application/json',\r\n//                     'Authorization': `Bearer ${state.token}`, // Use the token for verification\r\n//                 },\r\n//                 body: JSON.stringify({ code: otp }),\r\n//             });\r\n\r\n//             const result = await response.json();\r\n\r\n//             if (response.ok) {\r\n//                 handleSuccess(result.message);\r\n//                 navigate('/home');\r\n//             } else {\r\n//                 handleError(result.message);\r\n//             }\r\n//         } catch (err) {\r\n//             handleError('Network error. Please check your connection and try again.');\r\n//         }\r\n//     };\r\n\r\n//     const handleSendOtp = async () => {\r\n//         try {\r\n//             setHasCodeBeenSent(true);\r\n//             setIsResendEnabled(false);\r\n//             setTimer(60); // Start timer when sending the code\r\n//             const response = await fetch('http://localhost:8080/auth/send-verification-code', {\r\n//                 method: 'POST',\r\n//                 headers: { \r\n//                     'Content-Type': 'application/json',\r\n//                     'Authorization': `Bearer ${state.token}`, // Use the token\r\n//                 },\r\n//             });\r\n\r\n//             const result = await response.json();\r\n\r\n//             if (response.ok) {\r\n//                 handleSuccess(result.message);\r\n//             } else {\r\n//                 handleError(result.message);\r\n//             }\r\n//         } catch (err) {\r\n//             handleError('Failed to send OTP. Please try again.');\r\n//         }\r\n//     };\r\n\r\n//     const handleResendOtp = async () => {\r\n//         try {\r\n//             setIsResendEnabled(false);\r\n//             setTimer(60); // Reset timer when resending the code\r\n//             const response = await fetch('http://localhost:8080/auth/resend-verification-code', {\r\n//                 method: 'POST',\r\n//                 headers: { \r\n//                     'Content-Type': 'application/json',\r\n//                     'Authorization': `Bearer ${state.token}`, // Use the token\r\n//                 },\r\n//             });\r\n\r\n//             const result = await response.json();\r\n\r\n//             if (response.ok) {\r\n//                 handleSuccess(result.message);\r\n//             } else {\r\n//                 handleError(result.message);\r\n//             }\r\n//         } catch (err) {\r\n//             handleError('Failed to resend OTP. Please try again.');\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"otp-wrapper\">\r\n//             <div>\r\n//                 <img src='/app-icon.ico' alt='App Icon' className='app-icon' />\r\n//             </div>\r\n//             <h1 className=\"otp-title\">Verification Code</h1>\r\n//             <div className=\"otp-timer\">\r\n//                 {hasCodeBeenSent ? (\r\n//                     <p>We've sent a verification code to your registered email address.</p>\r\n//                 ) : (\r\n//                     <p>Click the button to send the verification code to your email.</p>\r\n//                 )}\r\n//                 <div className=\"timer\">\r\n//                     <p>Time Remaining: {timer} s</p>\r\n//                 </div>\r\n//             </div>\r\n//             <form onSubmit={handleSubmit}>\r\n//                 <div className=\"otp-buttons\">\r\n//                     {!hasCodeBeenSent ? (\r\n//                         <button\r\n//                             type=\"button\"\r\n//                             className=\"otp-btn send\"\r\n//                             onClick={handleSendOtp}\r\n//                         >\r\n//                             Send Code\r\n//                         </button>\r\n//                     ) : timer === 0 && isResendEnabled ? (\r\n//                         <button\r\n//                             type=\"button\"\r\n//                             className=\"otp-btn resend\"\r\n//                             onClick={handleResendOtp}\r\n//                         >\r\n//                             Resend Code\r\n//                         </button>\r\n//                     ) : hasCodeBeenSent && timer > 0 ? (\r\n//                         <>\r\n//                             <OtpInput\r\n//                                 length={6}\r\n//                                 onOtpSubmit={(otp) => setOtp(otp)}\r\n//                                 onOtpComplete={(complete) => setIsComplete(complete)}\r\n//                             />\r\n//                             <button\r\n//                                 type=\"submit\"\r\n//                                 className={`otp-btn verify ${isComplete ? 'active' : ''}`}\r\n//                                 disabled={!isComplete}\r\n//                             >\r\n//                                 Verify Code\r\n//                             </button>\r\n//                         </>\r\n//                     ) : null}\r\n//                 </div>\r\n//             </form>\r\n//             <ToastContainer />\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default VerifyCodeConfirmAccount;\r\n\r\n\r\n\r\n\r\n// frontend/src/pages/VerifyCodeConfirmAccount.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { handleSuccess, handleError, ToastContainer } from '../utils/ReactToastify';\r\nimport '../utils/ReactToastifyCustom.css';\r\nimport '../utils/style/SentOtpForgotPassword.css';\r\nimport OtpInput from '../Services/OtpInput';\r\n\r\nfunction VerifyCodeConfirmAccount() {\r\n    const [otp, setOtp] = useState('');\r\n    const [timer, setTimer] = useState(0);\r\n    const [isResendEnabled, setIsResendEnabled] = useState(false);\r\n    const [isComplete, setIsComplete] = useState(false);\r\n    const [hasCodeBeenSent, setHasCodeBeenSent] = useState(false);\r\n    const { state } = useLocation(); // Get email and token from location state\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        if (!state?.token || !state?.email) {\r\n            // If there's no token or email, redirect to the login page\r\n            handleError('Unauthorized access. Please log in.');\r\n            navigate('/login');\r\n        } else {\r\n            // Check if a code was already sent (e.g., page reloads)\r\n            const codeSentStatus = localStorage.getItem('codeSentStatus');\r\n            const timerStart = localStorage.getItem('timerStart');\r\n            if (codeSentStatus === 'true' && timerStart) {\r\n                const timeElapsed = Math.floor((Date.now() - parseInt(timerStart, 10)) / 1000);\r\n                if (timeElapsed < 60) {\r\n                    setTimer(60 - timeElapsed);\r\n                    setHasCodeBeenSent(true);\r\n                } else {\r\n                    setIsResendEnabled(true);\r\n                }\r\n            }\r\n        }\r\n    }, [state, navigate]);\r\n\r\n    useEffect(() => {\r\n        if (timer > 0) {\r\n            const countdown = setInterval(() => {\r\n                setTimer((prev) => prev - 1);\r\n            }, 1000);\r\n            return () => clearInterval(countdown);\r\n        } else if (hasCodeBeenSent) {\r\n            setIsResendEnabled(true);\r\n        }\r\n    }, [timer, hasCodeBeenSent]);\r\n\r\n    const handleSendOtp = async () => {\r\n        try {\r\n            setHasCodeBeenSent(true);\r\n            setIsResendEnabled(false);\r\n            setTimer(60);\r\n            localStorage.setItem('codeSentStatus', 'true');\r\n            localStorage.setItem('timerStart', Date.now().toString());\r\n\r\n            const response = await fetch('http://localhost:8080/verification/send-code', {\r\n                method: 'POST',\r\n                headers: { \r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${state.token}` // Use the token for authorization\r\n                },\r\n                body: JSON.stringify({ email: state.email }),\r\n            });\r\n\r\n            const result = await response.json();\r\n\r\n            if (response.ok) {\r\n                handleSuccess(result.message);\r\n            } else {\r\n                handleError(result.message);\r\n            }\r\n\r\n        } catch (err) {\r\n            handleError('Failed to send OTP. Please try again.');\r\n        }\r\n    };\r\n\r\n    const handleResendOtp = async () => {\r\n        try {\r\n            setIsResendEnabled(false);\r\n            setTimer(60);\r\n            localStorage.setItem('timerStart', Date.now().toString());\r\n\r\n            const response = await fetch('http://localhost:8080/verification/resend-code', {\r\n                method: 'POST',\r\n                headers: { \r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${state.token}` // Use the token for authorization\r\n                },\r\n                body: JSON.stringify({ email: state.email }),\r\n            });\r\n\r\n            const result = await response.json();\r\n\r\n            if (response.ok) {\r\n                handleSuccess(result.message);\r\n            } else {\r\n                handleError(result.message);\r\n            }\r\n\r\n        } catch (err) {\r\n            handleError('Failed to resend OTP. Please try again.');\r\n        }\r\n    };\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        try {\r\n            const response = await fetch('http://localhost:8080/verification/verify-code', {\r\n                method: 'POST',\r\n                headers: { \r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${state.token}` // Use the token for verification\r\n                },\r\n                body: JSON.stringify({ code: otp }),\r\n            });\r\n\r\n            const result = await response.json();\r\n\r\n            if (response.ok) {\r\n                handleSuccess(result.message);\r\n\r\n                // Save token to localStorage or cookies if provided by backend\r\n                localStorage.setItem('authToken', result.token);\r\n\r\n                // Navigate to home\r\n                navigate('/home');\r\n            } else {\r\n                handleError(result.message);\r\n            }\r\n        } catch (err) {\r\n            handleError('Network error. Please check your connection and try again.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"otp-wrapper\">\r\n            <div>\r\n                <img src='/app-icon.ico' alt='App Icon' className='app-icon' />\r\n            </div>\r\n            <h1 className=\"otp-title\">Verification Code</h1>\r\n            <div className=\"otp-timer\">\r\n                {hasCodeBeenSent ? (\r\n                    <p>We've sent a verification code to your registered email address.</p>\r\n                ) : (\r\n                    <p>Click the button to send the verification code to your email.</p>\r\n                )}\r\n                <div className=\"timer\">\r\n                    <p>Time Remaining: {timer} s</p>\r\n                </div>\r\n            </div>\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"otp-buttons\">\r\n                    {!hasCodeBeenSent ? (\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"otp-btn send\"\r\n                            onClick={handleSendOtp}\r\n                        >\r\n                            Send Code\r\n                        </button>\r\n                    ) : timer === 0 && isResendEnabled ? (\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"otp-btn resend\"\r\n                            onClick={handleResendOtp}\r\n                        >\r\n                            Resend Code\r\n                        </button>\r\n                    ) : hasCodeBeenSent && timer > 0 ? (\r\n                        <>\r\n                            <OtpInput\r\n                                length={6}\r\n                                onOtpSubmit={(otp) => setOtp(otp)}\r\n                                onOtpComplete={(complete) => setIsComplete(complete)}\r\n                            />\r\n                            <button\r\n                                type=\"submit\"\r\n                                className={`otp-btn verify ${isComplete ? 'active' : ''}`}\r\n                                disabled={!isComplete}\r\n                            >\r\n                                Verify Code\r\n                            </button>\r\n                        </>\r\n                    ) : null}\r\n                </div>\r\n            </form>\r\n            <ToastContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VerifyCodeConfirmAccount;\r\n"],"mappings":";;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D,SAASC,aAAa,EAAEC,WAAW,EAAEC,cAAc,QAAQ,wBAAwB;AACnF,OAAO,kCAAkC;AACzC,OAAO,0CAA0C;AACjD,OAAOC,QAAQ,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE5C,SAASC,wBAAwBA,CAAA,EAAG;EAAAC,EAAA;EAChC,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAClC,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGj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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}