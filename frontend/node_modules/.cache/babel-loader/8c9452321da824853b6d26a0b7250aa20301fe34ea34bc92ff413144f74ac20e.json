{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8080/auth';\nexport const checkTokenValidity = async token => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/validate`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n\n    // Check if the response is OK (status code 200-299)\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    // Attempt to parse the JSON response\n    const result = await response.json();\n    return result.success;\n  } catch (err) {\n    // Log the error and return false\n    console.error('Error validating token:', err);\n    return false;\n  }\n};\nexport const refreshToken = async () => {\n  try {\n    const refreshToken = localStorage.getItem('refreshToken');\n\n    // If no refresh token is found in localStorage, return null\n    if (!refreshToken) {\n      console.error('No refresh token found');\n      return null;\n    }\n    const response = await fetch(`${API_BASE_URL}/refresh-token`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        refreshToken\n      })\n    });\n\n    // Check if the response is OK\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    // Attempt to parse the JSON response\n    const result = await response.json();\n    if (result.success) {\n      return result.accessToken;\n    } else {\n      return null;\n    }\n  } catch (err) {\n    // Log the error and return null\n    console.error('Error refreshing token:', err);\n    return null;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","checkTokenValidity","token","response","fetch","method","headers","ok","Error","status","result","json","success","err","console","error","refreshToken","localStorage","getItem","body","JSON","stringify","accessToken"],"sources":["C:/Users/thesh/Desktop/Authentication/frontend/src/utils/authUtils.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8080/auth';\r\n\r\nexport const checkTokenValidity = async (token) => {\r\n    try {\r\n        const response = await fetch(`${API_BASE_URL}/validate`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        });\r\n\r\n        // Check if the response is OK (status code 200-299)\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        // Attempt to parse the JSON response\r\n        const result = await response.json();\r\n        return result.success;\r\n    } catch (err) {\r\n        // Log the error and return false\r\n        console.error('Error validating token:', err);\r\n        return false;\r\n    }\r\n}\r\n\r\nexport const refreshToken = async () => {\r\n    try {\r\n        const refreshToken = localStorage.getItem('refreshToken');\r\n        \r\n        // If no refresh token is found in localStorage, return null\r\n        if (!refreshToken) {\r\n            console.error('No refresh token found');\r\n            return null;\r\n        }\r\n\r\n        const response = await fetch(`${API_BASE_URL}/refresh-token`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ refreshToken })\r\n        });\r\n\r\n        // Check if the response is OK\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        // Attempt to parse the JSON response\r\n        const result = await response.json();\r\n        if (result.success) {\r\n            return result.accessToken;\r\n        } else {\r\n            return null;\r\n        }\r\n    } catch (err) {\r\n        // Log the error and return null\r\n        console.error('Error refreshing token:', err);\r\n        return null;\r\n    }\r\n}\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,4BAA4B;AAEjD,OAAO,MAAMC,kBAAkB,GAAG,MAAOC,KAAK,IAAK;EAC/C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,WAAW,EAAE;MACrDK,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,eAAe,EAAE,UAAUJ,KAAK;MACpC;IACJ,CAAC,CAAC;;IAEF;IACA,IAAI,CAACC,QAAQ,CAACI,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,uBAAuBL,QAAQ,CAACM,MAAM,EAAE,CAAC;IAC7D;;IAEA;IACA,MAAMC,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IACpC,OAAOD,MAAM,CAACE,OAAO;EACzB,CAAC,CAAC,OAAOC,GAAG,EAAE;IACV;IACAC,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEF,GAAG,CAAC;IAC7C,OAAO,KAAK;EAChB;AACJ,CAAC;AAED,OAAO,MAAMG,YAAY,GAAG,MAAAA,CAAA,KAAY;EACpC,IAAI;IACA,MAAMA,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;;IAEzD;IACA,IAAI,CAACF,YAAY,EAAE;MACfF,OAAO,CAACC,KAAK,CAAC,wBAAwB,CAAC;MACvC,OAAO,IAAI;IACf;IAEA,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,gBAAgB,EAAE;MAC1DK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDa,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEL;MAAa,CAAC;IACzC,CAAC,CAAC;;IAEF;IACA,IAAI,CAACb,QAAQ,CAACI,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,uBAAuBL,QAAQ,CAACM,MAAM,EAAE,CAAC;IAC7D;;IAEA;IACA,MAAMC,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IACpC,IAAID,MAAM,CAACE,OAAO,EAAE;MAChB,OAAOF,MAAM,CAACY,WAAW;IAC7B,CAAC,MAAM;MACH,OAAO,IAAI;IACf;EACJ,CAAC,CAAC,OAAOT,GAAG,EAAE;IACV;IACAC,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEF,GAAG,CAAC;IAC7C,OAAO,IAAI;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}