{"ast":null,"code":"// // frontend/src/utils/AuthCheck.js\n// import { refreshAccessToken } from './RefreshToken';\n\n// export const checkAuth = async () => {\n//     let token = localStorage.getItem('token');\n//     if (!token) {\n//         throw new Error('Not authenticated');\n//     }\n\n//     try {\n//         // Optionally verify the token expiration and refresh if needed\n//         const decodedToken = jwt.decode(token);\n//         const isExpired = decodedToken.exp * 1000 < Date.now();\n\n//         if (isExpired) {\n//             await refreshAccessToken();\n//             token = localStorage.getItem('token'); // Get the new token\n//         }\n\n//         return token;\n//     } catch (err) {\n//         await refreshAccessToken();\n//         token = localStorage.getItem('token'); // Get the new token\n//         return token;\n//     }\n// };","map":{"version":3,"names":[],"sources":["C:/Users/thesh/Desktop/LOGIN_SINGUP - Copy/LOGIN_SINGUP - Copy/frontend/src/utils/AuthCheck.js"],"sourcesContent":["// // frontend/src/utils/AuthCheck.js\r\n// import { refreshAccessToken } from './RefreshToken';\r\n\r\n// export const checkAuth = async () => {\r\n//     let token = localStorage.getItem('token');\r\n//     if (!token) {\r\n//         throw new Error('Not authenticated');\r\n//     }\r\n\r\n//     try {\r\n//         // Optionally verify the token expiration and refresh if needed\r\n//         const decodedToken = jwt.decode(token);\r\n//         const isExpired = decodedToken.exp * 1000 < Date.now();\r\n        \r\n//         if (isExpired) {\r\n//             await refreshAccessToken();\r\n//             token = localStorage.getItem('token'); // Get the new token\r\n//         }\r\n\r\n//         return token;\r\n//     } catch (err) {\r\n//         await refreshAccessToken();\r\n//         token = localStorage.getItem('token'); // Get the new token\r\n//         return token;\r\n//     }\r\n// };\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}