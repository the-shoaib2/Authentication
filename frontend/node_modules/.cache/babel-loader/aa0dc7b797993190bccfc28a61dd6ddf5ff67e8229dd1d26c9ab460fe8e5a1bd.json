{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nasync function refreshToken() {\n  try {\n    const response = await fetch('http://localhost:8080/auth/refresh', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        refreshToken: localStorage.getItem('refreshToken')\n      })\n    });\n    const data = await response.json();\n    if (response.ok) {\n      localStorage.setItem('token', data.accessToken);\n      return true;\n    }\n    return false;\n  } catch (error) {\n    console.error('Error refreshing token:', error);\n    return false;\n  }\n}\nfunction RefreshHandler({\n  setIsAuthenticated\n}) {\n  _s();\n  const location = useLocation();\n  const navigate = useNavigate();\n  useEffect(() => {\n    const checkAndRefreshToken = async () => {\n      if (localStorage.getItem('token')) {\n        const refreshed = await refreshToken();\n        setIsAuthenticated(refreshed);\n        if (refreshed && (location.pathname === '/' || location.pathname === '/login' || location.pathname === '/signup')) {\n          navigate('/home', {\n            replace: false\n          });\n        } else if (!refreshed) {\n          localStorage.removeItem('token');\n          localStorage.removeItem('refreshToken');\n          setIsAuthenticated(false);\n          if (location.pathname !== '/login' && location.pathname !== '/signup') {\n            navigate('/login');\n          }\n        }\n      }\n    };\n    checkAndRefreshToken();\n  }, [location, navigate, setIsAuthenticated]);\n  return null;\n}\n_s(RefreshHandler, \"fPjCxODVr6jVvib6o2c9VLE4s84=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = RefreshHandler;\nexport { RefreshHandler, refreshToken };\nvar _c;\n$RefreshReg$(_c, \"RefreshHandler\");","map":{"version":3,"names":["useEffect","useLocation","useNavigate","refreshToken","response","fetch","method","headers","body","JSON","stringify","localStorage","getItem","data","json","ok","setItem","accessToken","error","console","RefreshHandler","setIsAuthenticated","_s","location","navigate","checkAndRefreshToken","refreshed","pathname","replace","removeItem","_c","$RefreshReg$"],"sources":["C:/Users/thesh/Desktop/Authentication/frontend/src/utils/RefreshHandler.js"],"sourcesContent":["import { useEffect } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\n\r\nasync function refreshToken() {\r\n  try {\r\n    const response = await fetch('http://localhost:8080/auth/refresh', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        refreshToken: localStorage.getItem('refreshToken'),\r\n      }),\r\n    });\r\n    const data = await response.json();\r\n    if (response.ok) {\r\n      localStorage.setItem('token', data.accessToken);\r\n      return true;\r\n    }\r\n    return false;\r\n  } catch (error) {\r\n    console.error('Error refreshing token:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction RefreshHandler({ setIsAuthenticated }) {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const checkAndRefreshToken = async () => {\r\n      if (localStorage.getItem('token')) {\r\n        const refreshed = await refreshToken();\r\n        setIsAuthenticated(refreshed);\r\n        if (refreshed && (location.pathname === '/' || location.pathname === '/login' || location.pathname === '/signup')) {\r\n          navigate('/home', { replace: false });\r\n        } else if (!refreshed) {\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('refreshToken');\r\n          setIsAuthenticated(false);\r\n          if (location.pathname !== '/login' && location.pathname !== '/signup') {\r\n            navigate('/login');\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    checkAndRefreshToken();\r\n  }, [location, navigate, setIsAuthenticated]);\r\n\r\n  return null;\r\n}\r\n\r\nexport { RefreshHandler, refreshToken };\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAE3D,eAAeC,YAAYA,CAAA,EAAG;EAC5B,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;MACjEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBP,YAAY,EAAEQ,YAAY,CAACC,OAAO,CAAC,cAAc;MACnD,CAAC;IACH,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClC,IAAIV,QAAQ,CAACW,EAAE,EAAE;MACfJ,YAAY,CAACK,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,WAAW,CAAC;MAC/C,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,OAAO,KAAK;EACd;AACF;AAEA,SAASE,cAAcA,CAAC;EAAEC;AAAmB,CAAC,EAAE;EAAAC,EAAA;EAC9C,MAAMC,QAAQ,GAAGtB,WAAW,CAAC,CAAC;EAC9B,MAAMuB,QAAQ,GAAGtB,WAAW,CAAC,CAAC;EAE9BF,SAAS,CAAC,MAAM;IACd,MAAMyB,oBAAoB,GAAG,MAAAA,CAAA,KAAY;MACvC,IAAId,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,EAAE;QACjC,MAAMc,SAAS,GAAG,MAAMvB,YAAY,CAAC,CAAC;QACtCkB,kBAAkB,CAACK,SAAS,CAAC;QAC7B,IAAIA,SAAS,KAAKH,QAAQ,CAACI,QAAQ,KAAK,GAAG,IAAIJ,QAAQ,CAACI,QAAQ,KAAK,QAAQ,IAAIJ,QAAQ,CAACI,QAAQ,KAAK,SAAS,CAAC,EAAE;UACjHH,QAAQ,CAAC,OAAO,EAAE;YAAEI,OAAO,EAAE;UAAM,CAAC,CAAC;QACvC,CAAC,MAAM,IAAI,CAACF,SAAS,EAAE;UACrBf,YAAY,CAACkB,UAAU,CAAC,OAAO,CAAC;UAChClB,YAAY,CAACkB,UAAU,CAAC,cAAc,CAAC;UACvCR,kBAAkB,CAAC,KAAK,CAAC;UACzB,IAAIE,QAAQ,CAACI,QAAQ,KAAK,QAAQ,IAAIJ,QAAQ,CAACI,QAAQ,KAAK,SAAS,EAAE;YACrEH,QAAQ,CAAC,QAAQ,CAAC;UACpB;QACF;MACF;IACF,CAAC;IAEDC,oBAAoB,CAAC,CAAC;EACxB,CAAC,EAAE,CAACF,QAAQ,EAAEC,QAAQ,EAAEH,kBAAkB,CAAC,CAAC;EAE5C,OAAO,IAAI;AACb;AAACC,EAAA,CA1BQF,cAAc;EAAA,QACJnB,WAAW,EACXC,WAAW;AAAA;AAAA4B,EAAA,GAFrBV,cAAc;AA4BvB,SAASA,cAAc,EAAEjB,YAAY;AAAG,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}