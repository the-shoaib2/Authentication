{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thesh\\\\Desktop\\\\Authentication\\\\frontend\\\\src\\\\components\\\\ResetPassword.js\",\n  _s = $RefreshSig$();\n// ResetPassword.js\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { handleError, handleSuccess, ToastContainer } from '../utils/ReactToastify';\nimport '../utils/ReactToastifyCustom.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ResetPassword() {\n  _s();\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [timer, setTimer] = useState(120); // Timer for reset password validity\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTimer(prevTimer => {\n        if (prevTimer <= 1) {\n          clearInterval(interval);\n          return 0;\n        }\n        return prevTimer - 1;\n      });\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  const handleSubmit = async () => {\n    if (password !== confirmPassword) {\n      handleError('Passwords do not match');\n      return;\n    }\n    setLoading(true);\n    try {\n      const response = await fetch('http://localhost:8080/auth/resetPassword', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          password\n        })\n      });\n      const result = await response.json();\n      if (response.ok) {\n        handleSuccess('Password reset successful! Redirecting to login...');\n        setTimeout(() => navigate('/login'), 500);\n      } else {\n        handleError(result.message || 'Failed to reset password');\n      }\n    } catch (err) {\n      handleError('Network error. Please check your connection and try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"reset-password-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Reset Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: \"New password\",\n      value: password,\n      onChange: e => setPassword(e.target.value),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: \"Re-enter new password\",\n      value: confirmPassword,\n      onChange: e => setConfirmPassword(e.target.value),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      disabled: loading || timer === 0,\n      children: \"Change Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: timer > 0 ? `Time remaining: ${timer}s` : 'Session expired, please request a new OTP'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n_s(ResetPassword, \"R0HVkG28TP+0prDs5QYQ5LS4ZHI=\", false, function () {\n  return [useNavigate];\n});\n_c = ResetPassword;\nexport default ResetPassword;\nvar _c;\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","handleError","handleSuccess","ToastContainer","jsxDEV","_jsxDEV","ResetPassword","_s","password","setPassword","confirmPassword","setConfirmPassword","timer","setTimer","loading","setLoading","navigate","interval","setInterval","prevTimer","clearInterval","handleSubmit","response","fetch","method","headers","body","JSON","stringify","result","json","ok","setTimeout","message","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","required","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/thesh/Desktop/Authentication/frontend/src/components/ResetPassword.js"],"sourcesContent":["// ResetPassword.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { handleError, handleSuccess, ToastContainer } from '../utils/ReactToastify';\r\nimport '../utils/ReactToastifyCustom.css';\r\n\r\nfunction ResetPassword() {\r\n    const [password, setPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [timer, setTimer] = useState(120); // Timer for reset password validity\r\n    const [loading, setLoading] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            setTimer(prevTimer => {\r\n                if (prevTimer <= 1) {\r\n                    clearInterval(interval);\r\n                    return 0;\r\n                }\r\n                return prevTimer - 1;\r\n            });\r\n        }, 1000);\r\n\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    const handleSubmit = async () => {\r\n        if (password !== confirmPassword) {\r\n            handleError('Passwords do not match');\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n        try {\r\n            const response = await fetch('http://localhost:8080/auth/resetPassword', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ password })\r\n            });\r\n            const result = await response.json();\r\n            if (response.ok) {\r\n                handleSuccess('Password reset successful! Redirecting to login...');\r\n                setTimeout(() => navigate('/login'), 500);\r\n            } else {\r\n                handleError(result.message || 'Failed to reset password');\r\n            }\r\n        } catch (err) {\r\n            handleError('Network error. Please check your connection and try again.');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"reset-password-container\">\r\n            <h1>Reset Password</h1>\r\n            <input\r\n                type=\"password\"\r\n                placeholder=\"New password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                required\r\n            />\r\n            <input\r\n                type=\"password\"\r\n                placeholder=\"Re-enter new password\"\r\n                value={confirmPassword}\r\n                onChange={(e) => setConfirmPassword(e.target.value)}\r\n                required\r\n            />\r\n            <button onClick={handleSubmit} disabled={loading || timer === 0}>Change Password</button>\r\n            <p>{timer > 0 ? `Time remaining: ${timer}s` : 'Session expired, please request a new OTP'}</p>\r\n            <ToastContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ResetPassword;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}