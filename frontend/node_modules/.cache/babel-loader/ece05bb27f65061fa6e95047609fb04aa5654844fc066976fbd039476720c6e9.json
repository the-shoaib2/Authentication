{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thesh\\\\Desktop\\\\Authentication\\\\frontend\\\\src\\\\pages\\\\VerifyCodeConfirmAccount.jsx\",\n  _s = $RefreshSig$();\n// // frontend/src/pages/VerifyCodeConfirmAccount.jsx\n// import React, { useState, useEffect } from 'react';\n// import { useNavigate, useLocation } from 'react-router-dom';\n// import { handleSuccess, handleError, ToastContainer } from '../utils/ReactToastify';\n// import '../utils/ReactToastifyCustom.css';\n// import '../utils/style/SentOtpForgotPassword.css';\n// import OtpInput from '../Services/OtpInput';\n\n// function VerifyCodeConfirmAccount() {\n//     const [otp, setOtp] = useState('');\n//     const [timer, setTimer] = useState(0);\n//     const [isResendEnabled, setIsResendEnabled] = useState(false);\n//     const [isComplete, setIsComplete] = useState(false);\n//     const [hasCodeBeenSent, setHasCodeBeenSent] = useState(false);\n//     const { state } = useLocation(); // Get token from location state\n//     const navigate = useNavigate();\n\n//     useEffect(() => {\n//         if (!state?.token) {\n//             // If there's no token, redirect to the login page\n//             handleError('Unauthorized access. Please log in.');\n//             navigate('/login');\n//         }\n//     }, [state, navigate]);\n\n//     // Handle countdown timer\n//     useEffect(() => {\n//         if (timer > 0) {\n//             const countdown = setInterval(() => {\n//                 setTimer((prev) => prev - 1);\n//             }, 1000);\n\n//             return () => clearInterval(countdown);\n//         } else {\n//             setIsResendEnabled(true);\n//         }\n//     }, [timer]);\n\n//     const handleSubmit = async (event) => {\n//         event.preventDefault();\n//         try {\n//             const response = await fetch('http://localhost:8080/auth/verify-email', {\n//                 method: 'POST',\n//                 headers: { \n//                     'Content-Type': 'application/json',\n//                     'Authorization': `Bearer ${state.token}`, // Use the token for verification\n//                 },\n//                 body: JSON.stringify({ code: otp }),\n//             });\n\n//             const result = await response.json();\n\n//             if (response.ok) {\n//                 handleSuccess(result.message);\n//                 navigate('/home');\n//             } else {\n//                 handleError(result.message);\n//             }\n//         } catch (err) {\n//             handleError('Network error. Please check your connection and try again.');\n//         }\n//     };\n\n//     const handleSendOtp = async () => {\n//         try {\n//             setHasCodeBeenSent(true);\n//             setIsResendEnabled(false);\n//             setTimer(60); // Start timer when sending the code\n//             const response = await fetch('http://localhost:8080/auth/send-verification-code', {\n//                 method: 'POST',\n//                 headers: { \n//                     'Content-Type': 'application/json',\n//                     'Authorization': `Bearer ${state.token}`, // Use the token\n//                 },\n//             });\n\n//             const result = await response.json();\n\n//             if (response.ok) {\n//                 handleSuccess(result.message);\n//             } else {\n//                 handleError(result.message);\n//             }\n//         } catch (err) {\n//             handleError('Failed to send OTP. Please try again.');\n//         }\n//     };\n\n//     const handleResendOtp = async () => {\n//         try {\n//             setIsResendEnabled(false);\n//             setTimer(60); // Reset timer when resending the code\n//             const response = await fetch('http://localhost:8080/auth/resend-verification-code', {\n//                 method: 'POST',\n//                 headers: { \n//                     'Content-Type': 'application/json',\n//                     'Authorization': `Bearer ${state.token}`, // Use the token\n//                 },\n//             });\n\n//             const result = await response.json();\n\n//             if (response.ok) {\n//                 handleSuccess(result.message);\n//             } else {\n//                 handleError(result.message);\n//             }\n//         } catch (err) {\n//             handleError('Failed to resend OTP. Please try again.');\n//         }\n//     };\n\n//     return (\n//         <div className=\"otp-wrapper\">\n//             <div>\n//                 <img src='/app-icon.ico' alt='App Icon' className='app-icon' />\n//             </div>\n//             <h1 className=\"otp-title\">Verification Code</h1>\n//             <div className=\"otp-timer\">\n//                 {hasCodeBeenSent ? (\n//                     <p>We've sent a verification code to your registered email address.</p>\n//                 ) : (\n//                     <p>Click the button to send the verification code to your email.</p>\n//                 )}\n//                 <div className=\"timer\">\n//                     <p>Time Remaining: {timer} s</p>\n//                 </div>\n//             </div>\n//             <form onSubmit={handleSubmit}>\n//                 <div className=\"otp-buttons\">\n//                     {!hasCodeBeenSent ? (\n//                         <button\n//                             type=\"button\"\n//                             className=\"otp-btn send\"\n//                             onClick={handleSendOtp}\n//                         >\n//                             Send Code\n//                         </button>\n//                     ) : timer === 0 && isResendEnabled ? (\n//                         <button\n//                             type=\"button\"\n//                             className=\"otp-btn resend\"\n//                             onClick={handleResendOtp}\n//                         >\n//                             Resend Code\n//                         </button>\n//                     ) : hasCodeBeenSent && timer > 0 ? (\n//                         <>\n//                             <OtpInput\n//                                 length={6}\n//                                 onOtpSubmit={(otp) => setOtp(otp)}\n//                                 onOtpComplete={(complete) => setIsComplete(complete)}\n//                             />\n//                             <button\n//                                 type=\"submit\"\n//                                 className={`otp-btn verify ${isComplete ? 'active' : ''}`}\n//                                 disabled={!isComplete}\n//                             >\n//                                 Verify Code\n//                             </button>\n//                         </>\n//                     ) : null}\n//                 </div>\n//             </form>\n//             <ToastContainer />\n//         </div>\n//     );\n// }\n\n// export default VerifyCodeConfirmAccount;\n\n// frontend/src/pages/VerifyCodeConfirmAccount.jsx\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { handleSuccess, handleError, ToastContainer } from '../utils/ReactToastify';\nimport '../utils/ReactToastifyCustom.css';\nimport '../utils/style/SentOtpForgotPassword.css';\nimport OtpInput from '../Services/OtpInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction VerifyCodeConfirmAccount() {\n  _s();\n  const [otp, setOtp] = useState('');\n  const [timer, setTimer] = useState(0);\n  const [isResendEnabled, setIsResendEnabled] = useState(false);\n  const [isComplete, setIsComplete] = useState(false);\n  const [hasCodeBeenSent, setHasCodeBeenSent] = useState(false);\n  const {\n    state\n  } = useLocation(); // Get token from location state\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (!(state !== null && state !== void 0 && state.token)) {\n      // If there's no token, redirect to the login page\n      handleError('Unauthorized access. Please log in.');\n      navigate('/login');\n    }\n  }, [state, navigate]);\n  useEffect(() => {\n    if (timer > 0) {\n      const countdown = setInterval(() => {\n        setTimer(prev => prev - 1);\n      }, 1000);\n      return () => clearInterval(countdown);\n    } else {\n      setIsResendEnabled(true);\n    }\n  }, [timer]);\n  const handleSubmit = async event => {\n    event.preventDefault();\n    try {\n      const response = await fetch('http://localhost:8080/auth/verify-email', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${state.token}` // Use the token for verification\n        },\n        body: JSON.stringify({\n          code: otp\n        })\n      });\n      const result = await response.json();\n      if (response.ok) {\n        handleSuccess(result.message);\n        navigate('/home');\n      } else {\n        handleError(result.message);\n      }\n    } catch (err) {\n      handleError('Network error. Please check your connection and try again.');\n    }\n  };\n  const handleSendOtp = async () => {\n    try {\n      setHasCodeBeenSent(true);\n      setIsResendEnabled(false);\n      setTimer(60); // Start timer when sending the code\n      const response = await fetch('http://localhost:8080/auth/send-verification-code', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${state.token}` // Use the token\n        }\n      });\n      const result = await response.json();\n      if (response.ok) {\n        handleSuccess(result.message);\n      } else {\n        handleError(result.message);\n      }\n    } catch (err) {\n      handleError('Failed to send OTP. Please try again.');\n    }\n  };\n  const handleResendOtp = async () => {\n    try {\n      setIsResendEnabled(false);\n      setTimer(60); // Reset timer when resending the code\n      const response = await fetch('http://localhost:8080/auth/resend-verification-code', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${state.token}` // Use the token\n        }\n      });\n      const result = await response.json();\n      if (response.ok) {\n        handleSuccess(result.message);\n      } else {\n        handleError(result.message);\n      }\n    } catch (err) {\n      handleError('Failed to resend OTP. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"otp-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/app-icon.ico\",\n        alt: \"App Icon\",\n        className: \"app-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"otp-title\",\n      children: \"Verification Code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"otp-timer\",\n      children: [hasCodeBeenSent ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"We've sent a verification code to your registered email address.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Click the button to send the verification code to your email.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Time Remaining: \", timer, \" s\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(OtpInput, {\n        value: otp,\n        onChange: setOtp\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"otp-submit-button\",\n        type: \"submit\",\n        disabled: !otp || isComplete,\n        children: \"Verify Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"otp-resend-button\",\n        type: \"button\",\n        onClick: handleResendOtp,\n        disabled: !isResendEnabled,\n        children: \"Resend Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"otp-send-button\",\n        type: \"button\",\n        onClick: handleSendOtp,\n        disabled: hasCodeBeenSent,\n        children: \"Send Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 287,\n    columnNumber: 9\n  }, this);\n}\n_s(VerifyCodeConfirmAccount, \"uGhZxgoOciv/9sNKFFyNWg9bMb8=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = VerifyCodeConfirmAccount;\nexport default VerifyCodeConfirmAccount;\nvar _c;\n$RefreshReg$(_c, \"VerifyCodeConfirmAccount\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useLocation","handleSuccess","handleError","ToastContainer","OtpInput","jsxDEV","_jsxDEV","VerifyCodeConfirmAccount","_s","otp","setOtp","timer","setTimer","isResendEnabled","setIsResendEnabled","isComplete","setIsComplete","hasCodeBeenSent","setHasCodeBeenSent","state","navigate","token","countdown","setInterval","prev","clearInterval","handleSubmit","event","preventDefault","response","fetch","method","headers","body","JSON","stringify","code","result","json","ok","message","err","handleSendOtp","handleResendOtp","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","value","onChange","type","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/thesh/Desktop/Authentication/frontend/src/pages/VerifyCodeConfirmAccount.jsx"],"sourcesContent":["\r\n// // frontend/src/pages/VerifyCodeConfirmAccount.jsx\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useNavigate, useLocation } from 'react-router-dom';\r\n// import { handleSuccess, handleError, ToastContainer } from '../utils/ReactToastify';\r\n// import '../utils/ReactToastifyCustom.css';\r\n// import '../utils/style/SentOtpForgotPassword.css';\r\n// import OtpInput from '../Services/OtpInput';\r\n\r\n// function VerifyCodeConfirmAccount() {\r\n//     const [otp, setOtp] = useState('');\r\n//     const [timer, setTimer] = useState(0);\r\n//     const [isResendEnabled, setIsResendEnabled] = useState(false);\r\n//     const [isComplete, setIsComplete] = useState(false);\r\n//     const [hasCodeBeenSent, setHasCodeBeenSent] = useState(false);\r\n//     const { state } = useLocation(); // Get token from location state\r\n//     const navigate = useNavigate();\r\n\r\n//     useEffect(() => {\r\n//         if (!state?.token) {\r\n//             // If there's no token, redirect to the login page\r\n//             handleError('Unauthorized access. Please log in.');\r\n//             navigate('/login');\r\n//         }\r\n//     }, [state, navigate]);\r\n\r\n//     // Handle countdown timer\r\n//     useEffect(() => {\r\n//         if (timer > 0) {\r\n//             const countdown = setInterval(() => {\r\n//                 setTimer((prev) => prev - 1);\r\n//             }, 1000);\r\n\r\n//             return () => clearInterval(countdown);\r\n//         } else {\r\n//             setIsResendEnabled(true);\r\n//         }\r\n//     }, [timer]);\r\n\r\n//     const handleSubmit = async (event) => {\r\n//         event.preventDefault();\r\n//         try {\r\n//             const response = await fetch('http://localhost:8080/auth/verify-email', {\r\n//                 method: 'POST',\r\n//                 headers: { \r\n//                     'Content-Type': 'application/json',\r\n//                     'Authorization': `Bearer ${state.token}`, // Use the token for verification\r\n//                 },\r\n//                 body: JSON.stringify({ code: otp }),\r\n//             });\r\n\r\n//             const result = await response.json();\r\n\r\n//             if (response.ok) {\r\n//                 handleSuccess(result.message);\r\n//                 navigate('/home');\r\n//             } else {\r\n//                 handleError(result.message);\r\n//             }\r\n//         } catch (err) {\r\n//             handleError('Network error. Please check your connection and try again.');\r\n//         }\r\n//     };\r\n\r\n//     const handleSendOtp = async () => {\r\n//         try {\r\n//             setHasCodeBeenSent(true);\r\n//             setIsResendEnabled(false);\r\n//             setTimer(60); // Start timer when sending the code\r\n//             const response = await fetch('http://localhost:8080/auth/send-verification-code', {\r\n//                 method: 'POST',\r\n//                 headers: { \r\n//                     'Content-Type': 'application/json',\r\n//                     'Authorization': `Bearer ${state.token}`, // Use the token\r\n//                 },\r\n//             });\r\n\r\n//             const result = await response.json();\r\n\r\n//             if (response.ok) {\r\n//                 handleSuccess(result.message);\r\n//             } else {\r\n//                 handleError(result.message);\r\n//             }\r\n//         } catch (err) {\r\n//             handleError('Failed to send OTP. Please try again.');\r\n//         }\r\n//     };\r\n\r\n//     const handleResendOtp = async () => {\r\n//         try {\r\n//             setIsResendEnabled(false);\r\n//             setTimer(60); // Reset timer when resending the code\r\n//             const response = await fetch('http://localhost:8080/auth/resend-verification-code', {\r\n//                 method: 'POST',\r\n//                 headers: { \r\n//                     'Content-Type': 'application/json',\r\n//                     'Authorization': `Bearer ${state.token}`, // Use the token\r\n//                 },\r\n//             });\r\n\r\n//             const result = await response.json();\r\n\r\n//             if (response.ok) {\r\n//                 handleSuccess(result.message);\r\n//             } else {\r\n//                 handleError(result.message);\r\n//             }\r\n//         } catch (err) {\r\n//             handleError('Failed to resend OTP. Please try again.');\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"otp-wrapper\">\r\n//             <div>\r\n//                 <img src='/app-icon.ico' alt='App Icon' className='app-icon' />\r\n//             </div>\r\n//             <h1 className=\"otp-title\">Verification Code</h1>\r\n//             <div className=\"otp-timer\">\r\n//                 {hasCodeBeenSent ? (\r\n//                     <p>We've sent a verification code to your registered email address.</p>\r\n//                 ) : (\r\n//                     <p>Click the button to send the verification code to your email.</p>\r\n//                 )}\r\n//                 <div className=\"timer\">\r\n//                     <p>Time Remaining: {timer} s</p>\r\n//                 </div>\r\n//             </div>\r\n//             <form onSubmit={handleSubmit}>\r\n//                 <div className=\"otp-buttons\">\r\n//                     {!hasCodeBeenSent ? (\r\n//                         <button\r\n//                             type=\"button\"\r\n//                             className=\"otp-btn send\"\r\n//                             onClick={handleSendOtp}\r\n//                         >\r\n//                             Send Code\r\n//                         </button>\r\n//                     ) : timer === 0 && isResendEnabled ? (\r\n//                         <button\r\n//                             type=\"button\"\r\n//                             className=\"otp-btn resend\"\r\n//                             onClick={handleResendOtp}\r\n//                         >\r\n//                             Resend Code\r\n//                         </button>\r\n//                     ) : hasCodeBeenSent && timer > 0 ? (\r\n//                         <>\r\n//                             <OtpInput\r\n//                                 length={6}\r\n//                                 onOtpSubmit={(otp) => setOtp(otp)}\r\n//                                 onOtpComplete={(complete) => setIsComplete(complete)}\r\n//                             />\r\n//                             <button\r\n//                                 type=\"submit\"\r\n//                                 className={`otp-btn verify ${isComplete ? 'active' : ''}`}\r\n//                                 disabled={!isComplete}\r\n//                             >\r\n//                                 Verify Code\r\n//                             </button>\r\n//                         </>\r\n//                     ) : null}\r\n//                 </div>\r\n//             </form>\r\n//             <ToastContainer />\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default VerifyCodeConfirmAccount;\r\n\r\n\r\n\r\n// frontend/src/pages/VerifyCodeConfirmAccount.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { handleSuccess, handleError, ToastContainer } from '../utils/ReactToastify';\r\nimport '../utils/ReactToastifyCustom.css';\r\nimport '../utils/style/SentOtpForgotPassword.css';\r\nimport OtpInput from '../Services/OtpInput';\r\n\r\nfunction VerifyCodeConfirmAccount() {\r\n    const [otp, setOtp] = useState('');\r\n    const [timer, setTimer] = useState(0);\r\n    const [isResendEnabled, setIsResendEnabled] = useState(false);\r\n    const [isComplete, setIsComplete] = useState(false);\r\n    const [hasCodeBeenSent, setHasCodeBeenSent] = useState(false);\r\n    const { state } = useLocation(); // Get token from location state\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        if (!state?.token) {\r\n            // If there's no token, redirect to the login page\r\n            handleError('Unauthorized access. Please log in.');\r\n            navigate('/login');\r\n        }\r\n    }, [state, navigate]);\r\n\r\n    useEffect(() => {\r\n        if (timer > 0) {\r\n            const countdown = setInterval(() => {\r\n                setTimer((prev) => prev - 1);\r\n            }, 1000);\r\n\r\n            return () => clearInterval(countdown);\r\n        } else {\r\n            setIsResendEnabled(true);\r\n        }\r\n    }, [timer]);\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        try {\r\n            const response = await fetch('http://localhost:8080/auth/verify-email', {\r\n                method: 'POST',\r\n                headers: { \r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${state.token}`, // Use the token for verification\r\n                },\r\n                body: JSON.stringify({ code: otp }),\r\n            });\r\n\r\n            const result = await response.json();\r\n\r\n            if (response.ok) {\r\n                handleSuccess(result.message);\r\n                navigate('/home');\r\n            } else {\r\n                handleError(result.message);\r\n            }\r\n        } catch (err) {\r\n            handleError('Network error. Please check your connection and try again.');\r\n        }\r\n    };\r\n\r\n    const handleSendOtp = async () => {\r\n        try {\r\n            setHasCodeBeenSent(true);\r\n            setIsResendEnabled(false);\r\n            setTimer(60); // Start timer when sending the code\r\n            const response = await fetch('http://localhost:8080/auth/send-verification-code', {\r\n                method: 'POST',\r\n                headers: { \r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${state.token}`, // Use the token\r\n                },\r\n            });\r\n\r\n            const result = await response.json();\r\n\r\n            if (response.ok) {\r\n                handleSuccess(result.message);\r\n            } else {\r\n                handleError(result.message);\r\n            }\r\n        } catch (err) {\r\n            handleError('Failed to send OTP. Please try again.');\r\n        }\r\n    };\r\n\r\n    const handleResendOtp = async () => {\r\n        try {\r\n            setIsResendEnabled(false);\r\n            setTimer(60); // Reset timer when resending the code\r\n            const response = await fetch('http://localhost:8080/auth/resend-verification-code', {\r\n                method: 'POST',\r\n                headers: { \r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${state.token}`, // Use the token\r\n                },\r\n            });\r\n\r\n            const result = await response.json();\r\n\r\n            if (response.ok) {\r\n                handleSuccess(result.message);\r\n            } else {\r\n                handleError(result.message);\r\n            }\r\n        } catch (err) {\r\n            handleError('Failed to resend OTP. Please try again.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"otp-wrapper\">\r\n            <div>\r\n                <img src='/app-icon.ico' alt='App Icon' className='app-icon' />\r\n            </div>\r\n            <h1 className=\"otp-title\">Verification Code</h1>\r\n            <div className=\"otp-timer\">\r\n                {hasCodeBeenSent ? (\r\n                    <p>We've sent a verification code to your registered email address.</p>\r\n                ) : (\r\n                    <p>Click the button to send the verification code to your email.</p>\r\n                )}\r\n                <div className=\"timer\">\r\n                    <p>Time Remaining: {timer} s</p>\r\n                </div>\r\n            </div>\r\n            <form onSubmit={handleSubmit}>\r\n                <OtpInput value={otp} onChange={setOtp} />\r\n                <button className=\"otp-submit-button\" type=\"submit\" disabled={!otp || isComplete}>\r\n                    Verify Code\r\n                </button>\r\n                <button\r\n                    className=\"otp-resend-button\"\r\n                    type=\"button\"\r\n                    onClick={handleResendOtp}\r\n                    disabled={!isResendEnabled}\r\n                >\r\n                    Resend Code\r\n                </button>\r\n                <button\r\n                    className=\"otp-send-button\"\r\n                    type=\"button\"\r\n                    onClick={handleSendOtp}\r\n                    disabled={hasCodeBeenSent}\r\n                >\r\n                    Send Code\r\n                </button>\r\n            </form>\r\n            <ToastContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VerifyCodeConfirmAccount;\r\n"],"mappings":";;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D,SAASC,aAAa,EAAEC,WAAW,EAAEC,cAAc,QAAQ,wBAAwB;AACnF,OAAO,kCAAkC;AACzC,OAAO,0CAA0C;AACjD,OAAOC,QAAQ,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,wBAAwBA,CAAA,EAAG;EAAAC,EAAA;EAChC,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAClC,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}