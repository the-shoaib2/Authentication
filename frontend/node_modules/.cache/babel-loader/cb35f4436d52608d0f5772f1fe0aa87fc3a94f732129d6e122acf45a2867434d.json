{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thesh\\\\Desktop\\\\Authentication\\\\frontend\\\\src\\\\components\\\\ForgotPassword\\\\ResetPassword.js\",\n  _s = $RefreshSig$();\n// pages/ResetPassword.js\nimport React, { useState } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { handleSuccess, handleError, ToastContainer } from '../../utils/ReactToastify';\nimport '../../utils/ReactToastifyCustom.css';\nimport '../../utils/style/ResetPassword.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ResetPassword() {\n  _s();\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [passwordError, setPasswordError] = useState(false);\n  const [confirmPasswordError, setConfirmPasswordError] = useState(false);\n  const {\n    state\n  } = useLocation();\n  const navigate = useNavigate();\n  const handleSubmit = async event => {\n    event.preventDefault();\n    let hasError = false;\n\n    // Validate inputs\n    if (!password) {\n      setPasswordError(true);\n      hasError = true;\n    } else {\n      setPasswordError(false);\n    }\n    if (!confirmPassword) {\n      setConfirmPasswordError(true);\n      hasError = true;\n    } else {\n      setConfirmPasswordError(false);\n    }\n    if (password !== confirmPassword) {\n      handleError('Passwords do not match');\n      hasError = true;\n    }\n    if (hasError) return;\n    try {\n      const response = await fetch('http://localhost:8080/verification/forgot-password/reset-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: state.email,\n          newPassword: password\n        })\n      });\n      const result = await response.json();\n      if (response.ok) {\n        handleSuccess(result.message);\n        navigate('/login');\n      } else {\n        handleError(result.message);\n      }\n    } catch (err) {\n      handleError('Network error. Please check your connection and try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"reset-password-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: \"/app-icon.ico\",\n      alt: \"App Icon\",\n      className: \"app-icon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Reset Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `form-group-reset-password ${passwordError ? 'error' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            id: \"new-password\",\n            placeholder: \"\",\n            value: password,\n            onChange: e => setPassword(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"new-password\",\n            className: \"form-label-reset-password\",\n            children: \"New password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `form-group-reset-password ${confirmPasswordError ? 'error' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            id: \"confirm-password\",\n            placeholder: \"\",\n            value: confirmPassword,\n            onChange: e => setConfirmPassword(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"confirm-password\",\n            className: \"form-label-reset-password\",\n            children: \"Confirm Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n_s(ResetPassword, \"pB3FBBgm+TPqKPHL4bG2dcakOX0=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = ResetPassword;\nexport default ResetPassword;\nvar _c;\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"names":["React","useState","useNavigate","useLocation","handleSuccess","handleError","ToastContainer","jsxDEV","_jsxDEV","ResetPassword","_s","password","setPassword","confirmPassword","setConfirmPassword","passwordError","setPasswordError","confirmPasswordError","setConfirmPasswordError","state","navigate","handleSubmit","event","preventDefault","hasError","response","fetch","method","headers","body","JSON","stringify","email","newPassword","result","json","ok","message","err","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","id","placeholder","value","onChange","e","target","required","htmlFor","_c","$RefreshReg$"],"sources":["C:/Users/thesh/Desktop/Authentication/frontend/src/components/ForgotPassword/ResetPassword.js"],"sourcesContent":["// pages/ResetPassword.js\r\nimport React, { useState } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { handleSuccess, handleError, ToastContainer } from '../../utils/ReactToastify';\r\nimport '../../utils/ReactToastifyCustom.css';\r\nimport '../../utils/style/ResetPassword.css';\r\n\r\nfunction ResetPassword() {\r\n    const [password, setPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [passwordError, setPasswordError] = useState(false);\r\n    const [confirmPasswordError, setConfirmPasswordError] = useState(false);\r\n    const { state } = useLocation();\r\n    const navigate = useNavigate();\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        let hasError = false;\r\n\r\n        // Validate inputs\r\n        if (!password) {\r\n            setPasswordError(true);\r\n            hasError = true;\r\n        } else {\r\n            setPasswordError(false);\r\n        }\r\n\r\n        if (!confirmPassword) {\r\n            setConfirmPasswordError(true);\r\n            hasError = true;\r\n        } else {\r\n            setConfirmPasswordError(false);\r\n        }\r\n\r\n        if (password !== confirmPassword) {\r\n            handleError('Passwords do not match');\r\n            hasError = true;\r\n        }\r\n\r\n        if (hasError) return;\r\n\r\n        try {\r\n            const response = await fetch('http://localhost:8080/verification/forgot-password/reset-password', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ email: state.email, newPassword: password }),\r\n            });\r\n\r\n            const result = await response.json();\r\n\r\n            if (response.ok) {\r\n                handleSuccess(result.message);\r\n                navigate('/login');\r\n            } else {\r\n                handleError(result.message);\r\n            }\r\n        } catch (err) {\r\n            handleError('Network error. Please check your connection and try again.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"reset-password-container\">\r\n            <img src='/app-icon.ico' alt='App Icon' className='app-icon' />\r\n            <h1>Reset Password</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <div className='input-wrapper'>\r\n                    <div className={`form-group-reset-password ${passwordError ? 'error' : ''}`}>\r\n                        <input\r\n                            type='password'\r\n                            id='new-password'\r\n                            placeholder=''\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                            required\r\n                        />\r\n                        <label htmlFor='new-password' className='form-label-reset-password'>New password</label>\r\n                    </div>\r\n                    <div className={`form-group-reset-password ${confirmPasswordError ? 'error' : ''}`}>\r\n                        <input\r\n                            type='password'\r\n                            id='confirm-password'\r\n                            placeholder=''\r\n                            value={confirmPassword}\r\n                            onChange={(e) => setConfirmPassword(e.target.value)}\r\n                            required\r\n                        />\r\n                        <label htmlFor='confirm-password' className='form-label-reset-password'>Confirm Password</label>\r\n                    </div>\r\n                </div>\r\n                <button type=\"submit\">Reset Password</button>\r\n            </form>\r\n            <ToastContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ResetPassword;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}