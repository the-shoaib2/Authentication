{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thesh\\\\Desktop\\\\Authentication\\\\frontend\\\\src\\\\components\\\\ForgotPassword\\\\ResetPassword.js\",\n  _s = $RefreshSig$();\n// // pages/ResetPassword.js\n// import React, { useState } from 'react';\n// import { useNavigate, useLocation } from 'react-router-dom';\n// import { handleSuccess, handleError, ToastContainer } from '../../utils/ReactToastify';\n// import '../../utils/ReactToastifyCustom.css';\n// import '../../utils/style/ResetPassword.css';\n\n// function ResetPassword() {\n//     const [password, setPassword] = useState('');\n//     const [confirmPassword, setConfirmPassword] = useState('');\n//     const { state } = useLocation();\n//     const navigate = useNavigate();\n\n//     const handleSubmit = async (event) => {\n//         event.preventDefault();\n//         if (password !== confirmPassword) {\n//             handleError('Passwords do not match');\n//             return;\n//         }\n\n//         try {\n//             const response = await fetch('http://localhost:8080/verification/forgot-password/reset-password', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify({ email: state.email, newPassword: password }),\n//             });\n\n//             const result = await response.json();\n\n//             if (response.ok) {\n//                 handleSuccess(result.message);\n//                 navigate('/login');\n//             } else {\n//                 handleError(result.message);\n//             }\n//         } catch (err) {\n//             handleError('Network error. Please check your connection and try again.');\n//         }\n//     };\n\n//     return (\n//         <div className=\"reset-password-container container\">\n//             <h1>Reset Password</h1>\n//             <form onSubmit={handleSubmit}>\n//                 <input\n//                     className=\"Reset-password-input\"\n//                     type=\"password\"\n//                     placeholder=\"Enter your new password\"\n//                     value={password}\n//                     onChange={(e) => setPassword(e.target.value)}\n//                     required\n//                 />\n//                 <input\n//                     className=\"Reset-password-input\"\n//                     type=\"password\"\n//                     placeholder=\"Confirm your new password\"\n//                     value={confirmPassword}\n//                     onChange={(e) => setConfirmPassword(e.target.value)}\n//                     required\n//                 />\n//                 <button className=\"Reset-password-button\" type=\"submit\">Reset Password</button>\n//             </form>\n//             <ToastContainer />\n//         </div>\n//     );\n// }\n\n// export default ResetPassword;\n\n// pages/ResetPassword.js\nimport React, { useState } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { handleSuccess, handleError, ToastContainer } from '../../utils/ReactToastify';\nimport '../../utils/ReactToastifyCustom.css';\nimport '../../utils/style/ResetPassword.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ResetPassword() {\n  _s();\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const {\n    state\n  } = useLocation();\n  const navigate = useNavigate();\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (password !== confirmPassword) {\n      handleError('Passwords do not match');\n      return;\n    }\n    try {\n      const response = await fetch('http://localhost:8080/verification/forgot-password/reset-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: state.email,\n          newPassword: password\n        })\n      });\n      const result = await response.json();\n      if (response.ok) {\n        handleSuccess(result.message);\n        navigate('/login');\n      } else {\n        handleError(result.message);\n      }\n    } catch (err) {\n      handleError('Network error. Please check your connection and try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"reset-password-container container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Reset Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          placeholder: \"\",\n          value: email,\n          onChange: e => setEmail(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          className: \"form-label\",\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          placeholder: \"\",\n          value: confirmPassword,\n          onChange: e => setPassword(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          className: \"form-label\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Reset-password-button\",\n        type: \"submit\",\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 9\n  }, this);\n}\n_s(ResetPassword, \"SVMM6FRfUjqA+L1g1GzknJW1Gkg=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = ResetPassword;\nexport default ResetPassword;\nvar _c;\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"names":["React","useState","useNavigate","useLocation","handleSuccess","handleError","ToastContainer","jsxDEV","_jsxDEV","ResetPassword","_s","password","setPassword","confirmPassword","setConfirmPassword","state","navigate","handleSubmit","event","preventDefault","response","fetch","method","headers","body","JSON","stringify","email","newPassword","result","json","ok","message","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","id","placeholder","value","onChange","e","setEmail","target","required","htmlFor","_c","$RefreshReg$"],"sources":["C:/Users/thesh/Desktop/Authentication/frontend/src/components/ForgotPassword/ResetPassword.js"],"sourcesContent":["// // pages/ResetPassword.js\r\n// import React, { useState } from 'react';\r\n// import { useNavigate, useLocation } from 'react-router-dom';\r\n// import { handleSuccess, handleError, ToastContainer } from '../../utils/ReactToastify';\r\n// import '../../utils/ReactToastifyCustom.css';\r\n// import '../../utils/style/ResetPassword.css';\r\n\r\n// function ResetPassword() {\r\n//     const [password, setPassword] = useState('');\r\n//     const [confirmPassword, setConfirmPassword] = useState('');\r\n//     const { state } = useLocation();\r\n//     const navigate = useNavigate();\r\n\r\n//     const handleSubmit = async (event) => {\r\n//         event.preventDefault();\r\n//         if (password !== confirmPassword) {\r\n//             handleError('Passwords do not match');\r\n//             return;\r\n//         }\r\n\r\n//         try {\r\n//             const response = await fetch('http://localhost:8080/verification/forgot-password/reset-password', {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                 },\r\n//                 body: JSON.stringify({ email: state.email, newPassword: password }),\r\n//             });\r\n\r\n//             const result = await response.json();\r\n\r\n//             if (response.ok) {\r\n//                 handleSuccess(result.message);\r\n//                 navigate('/login');\r\n//             } else {\r\n//                 handleError(result.message);\r\n//             }\r\n//         } catch (err) {\r\n//             handleError('Network error. Please check your connection and try again.');\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"reset-password-container container\">\r\n//             <h1>Reset Password</h1>\r\n//             <form onSubmit={handleSubmit}>\r\n//                 <input\r\n//                     className=\"Reset-password-input\"\r\n//                     type=\"password\"\r\n//                     placeholder=\"Enter your new password\"\r\n//                     value={password}\r\n//                     onChange={(e) => setPassword(e.target.value)}\r\n//                     required\r\n//                 />\r\n//                 <input\r\n//                     className=\"Reset-password-input\"\r\n//                     type=\"password\"\r\n//                     placeholder=\"Confirm your new password\"\r\n//                     value={confirmPassword}\r\n//                     onChange={(e) => setConfirmPassword(e.target.value)}\r\n//                     required\r\n//                 />\r\n//                 <button className=\"Reset-password-button\" type=\"submit\">Reset Password</button>\r\n//             </form>\r\n//             <ToastContainer />\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default ResetPassword;\r\n\r\n\r\n// pages/ResetPassword.js\r\nimport React, { useState } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { handleSuccess, handleError, ToastContainer } from '../../utils/ReactToastify';\r\nimport '../../utils/ReactToastifyCustom.css';\r\nimport '../../utils/style/ResetPassword.css';\r\n\r\nfunction ResetPassword() {\r\n    const [password, setPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const { state } = useLocation();\r\n    const navigate = useNavigate();\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        if (password !== confirmPassword) {\r\n            handleError('Passwords do not match');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await fetch('http://localhost:8080/verification/forgot-password/reset-password', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ email: state.email, newPassword: password }),\r\n            });\r\n\r\n            const result = await response.json();\r\n\r\n            if (response.ok) {\r\n                handleSuccess(result.message);\r\n                navigate('/login');\r\n            } else {\r\n                handleError(result.message);\r\n            }\r\n        } catch (err) {\r\n            handleError('Network error. Please check your connection and try again.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"reset-password-container container\">\r\n            <h1>Reset Password</h1>\r\n            <form onSubmit={handleSubmit}>\r\n            <div className='form-group'>\r\n                    <input\r\n                        type='email'\r\n                        id='email'\r\n                        placeholder=''\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                        required\r\n                    />\r\n                    <label htmlFor='email' className='form-label'>Email</label>\r\n                </div>\r\n                <div className='form-group'>\r\n                    <input\r\n                        type='password'\r\n                        id='password'\r\n                        placeholder=''\r\n                        value={confirmPassword}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                        required\r\n                    />\r\n                    <label htmlFor='password' className='form-label'>Password</label>\r\n                </div>\r\n                <button className=\"Reset-password-button\" type=\"submit\">Reset Password</button>\r\n            </form>\r\n            <ToastContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ResetPassword;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}