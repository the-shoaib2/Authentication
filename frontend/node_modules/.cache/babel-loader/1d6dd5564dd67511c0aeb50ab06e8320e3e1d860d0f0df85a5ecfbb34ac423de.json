{"ast":null,"code":"import axiosInstance from './axiosConfig';\nexport const fetchLoggedInUser = async () => {\n  const response = await axiosInstance.get('/Users/me');\n  return response.data;\n};\nexport const signupUser = async formData => {\n  const response = await axiosInstance.post(\"/auth/signup\", formData);\n  return response.data;\n};\nexport const loginUser = async (emailOrUsername, password) => {\n  const response = await axiosInstance.post(\"/auth/login\", {\n    emailOrUsername,\n    password\n  });\n  return response.data;\n};\nexport const logoutUser = async () => {\n  const response = await axiosInstance.post(\"/auth/logout\", {}, {\n    withCredentials: true\n  });\n  if (response.status === 200) {\n    clearAuthData();\n  }\n  return response;\n};\nexport const deleteUser = async userId => {\n  const response = await axiosInstance.delete(`/auth/delete/${userId}`);\n  return response;\n};\nexport const refreshToken = async () => {\n  const refreshToken = localStorage.getItem('refreshToken');\n  if (!refreshToken) {\n    console.error('No refresh token provided');\n    return false;\n  }\n  try {\n    const response = await axiosInstance.post('/auth/refresh', {\n      refreshToken: refreshToken\n    });\n    if (response.status === 200) {\n      localStorage.setItem('token', response.data.accessToken);\n      return true;\n    } else {\n      clearAuthData();\n      return false;\n    }\n  } catch (error) {\n    console.error('Error refreshing token:', error);\n    return false;\n  }\n};\nconst clearAuthData = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('refreshToken');\n};","map":{"version":3,"names":["axiosInstance","fetchLoggedInUser","response","get","data","signupUser","formData","post","loginUser","emailOrUsername","password","logoutUser","withCredentials","status","clearAuthData","deleteUser","userId","delete","refreshToken","localStorage","getItem","console","error","setItem","accessToken","removeItem"],"sources":["C:/Users/thesh/Desktop/Authentication - Copy/frontend/src/utils/ApiService.jsx"],"sourcesContent":["import axiosInstance from './axiosConfig';\r\n\r\nexport const fetchLoggedInUser = async () => {\r\n    const response = await axiosInstance.get('/Users/me');\r\n    return response.data;\r\n};\r\n\r\nexport const signupUser = async (formData) => {\r\n    const response = await axiosInstance.post(\"/auth/signup\", formData);\r\n    return response.data;\r\n};\r\n\r\nexport const loginUser = async (emailOrUsername, password) => {\r\n    const response = await axiosInstance.post(\"/auth/login\", {\r\n        emailOrUsername,\r\n        password\r\n    });\r\n    return response.data;\r\n};\r\n\r\nexport const logoutUser = async () => {\r\n    const response = await axiosInstance.post(\"/auth/logout\", {}, {\r\n        withCredentials: true,\r\n    });\r\n    if (response.status === 200) {\r\n        clearAuthData();\r\n    }\r\n    return response;\r\n};\r\n\r\nexport const deleteUser = async (userId) => {\r\n    const response = await axiosInstance.delete(`/auth/delete/${userId}`);\r\n    return response;\r\n};\r\n\r\nexport const refreshToken = async () => {\r\n    const refreshToken = localStorage.getItem('refreshToken');\r\n    if (!refreshToken) {\r\n        console.error('No refresh token provided');\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        const response = await axiosInstance.post('/auth/refresh', {\r\n            refreshToken: refreshToken,\r\n        });\r\n        if (response.status === 200) {\r\n            localStorage.setItem('token', response.data.accessToken);\r\n            return true;\r\n        } else {\r\n            clearAuthData();\r\n            return false;\r\n        }\r\n    } catch (error) {\r\n        console.error('Error refreshing token:', error);\r\n        return false;\r\n    }\r\n};\r\n\r\nconst clearAuthData = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('refreshToken');\r\n};\r\n"],"mappings":"AAAA,OAAOA,aAAa,MAAM,eAAe;AAEzC,OAAO,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EACzC,MAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAG,CAAC,WAAW,CAAC;EACrD,OAAOD,QAAQ,CAACE,IAAI;AACxB,CAAC;AAED,OAAO,MAAMC,UAAU,GAAG,MAAOC,QAAQ,IAAK;EAC1C,MAAMJ,QAAQ,GAAG,MAAMF,aAAa,CAACO,IAAI,CAAC,cAAc,EAAED,QAAQ,CAAC;EACnE,OAAOJ,QAAQ,CAACE,IAAI;AACxB,CAAC;AAED,OAAO,MAAMI,SAAS,GAAG,MAAAA,CAAOC,eAAe,EAAEC,QAAQ,KAAK;EAC1D,MAAMR,QAAQ,GAAG,MAAMF,aAAa,CAACO,IAAI,CAAC,aAAa,EAAE;IACrDE,eAAe;IACfC;EACJ,CAAC,CAAC;EACF,OAAOR,QAAQ,CAACE,IAAI;AACxB,CAAC;AAED,OAAO,MAAMO,UAAU,GAAG,MAAAA,CAAA,KAAY;EAClC,MAAMT,QAAQ,GAAG,MAAMF,aAAa,CAACO,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,EAAE;IAC1DK,eAAe,EAAE;EACrB,CAAC,CAAC;EACF,IAAIV,QAAQ,CAACW,MAAM,KAAK,GAAG,EAAE;IACzBC,aAAa,CAAC,CAAC;EACnB;EACA,OAAOZ,QAAQ;AACnB,CAAC;AAED,OAAO,MAAMa,UAAU,GAAG,MAAOC,MAAM,IAAK;EACxC,MAAMd,QAAQ,GAAG,MAAMF,aAAa,CAACiB,MAAM,CAAC,gBAAgBD,MAAM,EAAE,CAAC;EACrE,OAAOd,QAAQ;AACnB,CAAC;AAED,OAAO,MAAMgB,YAAY,GAAG,MAAAA,CAAA,KAAY;EACpC,MAAMA,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EACzD,IAAI,CAACF,YAAY,EAAE;IACfG,OAAO,CAACC,KAAK,CAAC,2BAA2B,CAAC;IAC1C,OAAO,KAAK;EAChB;EAEA,IAAI;IACA,MAAMpB,QAAQ,GAAG,MAAMF,aAAa,CAACO,IAAI,CAAC,eAAe,EAAE;MACvDW,YAAY,EAAEA;IAClB,CAAC,CAAC;IACF,IAAIhB,QAAQ,CAACW,MAAM,KAAK,GAAG,EAAE;MACzBM,YAAY,CAACI,OAAO,CAAC,OAAO,EAAErB,QAAQ,CAACE,IAAI,CAACoB,WAAW,CAAC;MACxD,OAAO,IAAI;IACf,CAAC,MAAM;MACHV,aAAa,CAAC,CAAC;MACf,OAAO,KAAK;IAChB;EACJ,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACZD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,OAAO,KAAK;EAChB;AACJ,CAAC;AAED,MAAMR,aAAa,GAAGA,CAAA,KAAM;EACxBK,YAAY,CAACM,UAAU,CAAC,OAAO,CAAC;EAChCN,YAAY,CAACM,UAAU,CAAC,cAAc,CAAC;AAC3C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}