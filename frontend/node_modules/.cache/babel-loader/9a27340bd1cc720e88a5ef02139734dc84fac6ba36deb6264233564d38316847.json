{"ast":null,"code":"import axios from 'axios';\nconst apiClient = axios.create({\n  baseURL: 'http://localhost:8080',\n  withCredentials: true\n});\napiClient.interceptors.request.use(config => {\n  const token = sessionStorage.getItem('accessToken');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\napiClient.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n  if (error.response && error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const response = await axios.post('http://localhost:8080/auth/refreshtoken', {}, {\n        withCredentials: true\n      });\n      const {\n        accessToken\n      } = response.data;\n      sessionStorage.setItem('accessToken', accessToken);\n      originalRequest.headers['Authorization'] = `Bearer ${accessToken}`;\n      return apiClient(originalRequest);\n    } catch (err) {\n      console.error('Token refresh failed:', err);\n      return Promise.reject(err);\n    }\n  }\n  return Promise.reject(error);\n});\nexport default apiClient;","map":{"version":3,"names":["axios","apiClient","create","baseURL","withCredentials","interceptors","request","use","config","token","sessionStorage","getItem","headers","error","Promise","reject","response","originalRequest","status","_retry","post","accessToken","data","setItem","err","console"],"sources":["C:/Users/thesh/Desktop/Authentication - Copy/frontend/src/utils/axiosConfig.jsx"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst apiClient = axios.create({\r\n    baseURL: 'http://localhost:8080',\r\n    withCredentials: true,\r\n});\r\n\r\napiClient.interceptors.request.use(config => {\r\n    const token = sessionStorage.getItem('accessToken');\r\n    if (token) {\r\n        config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n}, error => {\r\n    return Promise.reject(error);\r\n});\r\n\r\napiClient.interceptors.response.use(\r\n    response => response,\r\n    async error => {\r\n        const originalRequest = error.config;\r\n        if (error.response && error.response.status === 401 && !originalRequest._retry) {\r\n            originalRequest._retry = true;\r\n            try {\r\n                const response = await axios.post('http://localhost:8080/auth/refreshtoken', {}, { withCredentials: true });\r\n                const { accessToken } = response.data;\r\n                sessionStorage.setItem('accessToken', accessToken);\r\n                originalRequest.headers['Authorization'] = `Bearer ${accessToken}`;\r\n                return apiClient(originalRequest);\r\n            } catch (err) {\r\n                console.error('Token refresh failed:', err);\r\n                return Promise.reject(err);\r\n            }\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default apiClient;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC3BC,OAAO,EAAE,uBAAuB;EAChCC,eAAe,EAAE;AACrB,CAAC,CAAC;AAEFH,SAAS,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EACzC,MAAMC,KAAK,GAAGC,cAAc,CAACC,OAAO,CAAC,aAAa,CAAC;EACnD,IAAIF,KAAK,EAAE;IACPD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;EACvD;EACA,OAAOD,MAAM;AACjB,CAAC,EAAEK,KAAK,IAAI;EACR,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CAAC;AAEFZ,SAAS,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC/BS,QAAQ,IAAIA,QAAQ,EACpB,MAAMH,KAAK,IAAI;EACX,MAAMI,eAAe,GAAGJ,KAAK,CAACL,MAAM;EACpC,IAAIK,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC5EF,eAAe,CAACE,MAAM,GAAG,IAAI;IAC7B,IAAI;MACA,MAAMH,QAAQ,GAAG,MAAMhB,KAAK,CAACoB,IAAI,CAAC,yCAAyC,EAAE,CAAC,CAAC,EAAE;QAAEhB,eAAe,EAAE;MAAK,CAAC,CAAC;MAC3G,MAAM;QAAEiB;MAAY,CAAC,GAAGL,QAAQ,CAACM,IAAI;MACrCZ,cAAc,CAACa,OAAO,CAAC,aAAa,EAAEF,WAAW,CAAC;MAClDJ,eAAe,CAACL,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUS,WAAW,EAAE;MAClE,OAAOpB,SAAS,CAACgB,eAAe,CAAC;IACrC,CAAC,CAAC,OAAOO,GAAG,EAAE;MACVC,OAAO,CAACZ,KAAK,CAAC,uBAAuB,EAAEW,GAAG,CAAC;MAC3C,OAAOV,OAAO,CAACC,MAAM,CAACS,GAAG,CAAC;IAC9B;EACJ;EACA,OAAOV,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAeZ,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}