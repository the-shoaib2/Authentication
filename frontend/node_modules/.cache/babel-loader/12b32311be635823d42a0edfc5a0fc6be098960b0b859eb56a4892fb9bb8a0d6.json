{"ast":null,"code":"// // Login.js \n// import React, { useState } from 'react';\n// import { Link, useNavigate } from 'react-router-dom';\n// import { ToastContainer } from 'react-toastify';\n// import { handleError, handleSuccess } from '../utils/ReactToastify';\n// import '../utils/ReactToastifyCustom.css';\n// import '../utils/loading.css';\n\n// function Login() {\n//     const [loginInfo, setLoginInfo] = useState({\n//         email: '',\n//         password: ''\n//     });\n\n//     const [loading, setLoading] = useState(false); // Add loading state\n//     const [loadingVisible, setLoadingVisible] = useState(false); // State for managing visibility\n//     const navigate = useNavigate();\n\n//     const handleChange = (e) => {\n//         const { name, value } = e.target;\n//         const copyLoginInfo = { ...loginInfo };\n//         copyLoginInfo[name] = value;\n//         setLoginInfo(copyLoginInfo);\n//     }\n\n//     const handleLogin = async (e) => {\n//         e.preventDefault();\n//         const { email, password } = loginInfo;\n//         if (!email || !password) {\n//             return handleError('Email and password are required');\n//         }\n//         setLoading(true); // Start loading\n//         setLoadingVisible(true); // Ensure loading overlay is visible\n//         try {\n//             const url = `http://localhost:8080/auth/login`;\n//             const response = await fetch(url, {\n//                 method: \"POST\",\n//                 headers: {\n//                     'Content-Type': 'application/json'\n//                 },\n//                 body: JSON.stringify(loginInfo)\n//             });\n//             const result = await response.json();\n//             const { success, message, jwtToken, name, error } = result;\n//             if (success) {\n//                 handleSuccess(message);\n//                 localStorage.setItem('token', jwtToken);\n//                 localStorage.setItem('loggedInUser', name);\n//                 setTimeout(() => {\n//                     setLoadingVisible(false); // Fade out the loading overlay\n//                     setTimeout(() => {\n//                         navigate('/home'); // Navigate after loading fades out\n//                     }, 500); // Delay to match the fade-out duration\n//                 }, 1000);\n//             } else if (error) {\n//                 const details = error?.details[0].message;\n//                 handleError(details);\n//                 setLoadingVisible(false); // Fade out the loading overlay\n//             } else {\n//                 handleError(message);\n//                 setLoadingVisible(false); // Fade out the loading overlay\n//             }\n//         } catch (err) {\n//             handleError(err.message || 'An error occurred');\n//             setLoadingVisible(false); // Fade out the loading overlay\n//         } finally {\n//             setLoading(false); // End loading\n//         }\n//     }\n\n//     return (\n//         <div className='container'>\n//             <img src='/app-icon.ico' alt='App Icon' className='app-icon' />\n//             <h1>Login</h1>\n//             <form onSubmit={handleLogin}>\n//                 <div className='form-group'>\n//                     <input\n//                         onChange={handleChange}\n//                         type='email'\n//                         name='email'\n//                         id='email'\n//                         placeholder='Enter your email...'\n//                         value={loginInfo.email}\n//                     />\n//                     <label htmlFor='email' className='form-label'>Email</label>\n//                 </div>\n//                 <div className='form-group'>\n//                     <input\n//                         onChange={handleChange}\n//                         type='password'\n//                         name='password'\n//                         id='password'\n//                         placeholder='Enter your password...'\n//                         value={loginInfo.password}\n//                     />\n//                     <label htmlFor='password' className='form-label'>Password</label>\n//                 </div>\n//                 <button type='submit'>Login</button>\n//                 <Link to=\"/ForgotPassword\" className='signup-link'>Forgot Password?</Link>\n//                 <span>Doesn't have an account? <Link to=\"/signup\" className='signup-link'>Signup</Link></span>\n//             </form>\n//             <ToastContainer />\n\n//             {loadingVisible && (\n//                 <div className={`loading-overlay ${!loading ? 'hidden' : ''}`}>\n//                     <img src='/apple-loading.gif' alt='Loading...' className='loading-spinner' />\n//                 </div>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default Login;\n\n// // components/Login.js\n// import React, { useState } from 'react';\n// import { useNavigate, Link } from 'react-router-dom';\n// import { ToastContainer, toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n// import '../utils/ReactToastifyCustom.css';\n// import '../utils/loading.css';\n\n// function Login() {\n//     const [email, setEmail] = useState('');\n//     const [password, setPassword] = useState('');\n//     const [loading, setLoading] = useState(false);\n//     const [fadeOut, setFadeOut] = useState(false);\n//     const navigate = useNavigate();\n\n//     const handleSubmit = async (event) => {\n//         event.preventDefault();\n//         setLoading(true);\n//         setFadeOut(false);\n\n//         setTimeout(async () => {\n//             setFadeOut(true);\n//             setTimeout(async () => {\n//                 try {\n//                     const response = await fetch(\"http://localhost:8080/auth/login\", {\n//                         method: 'POST',\n//                         headers: {\n//                             'Content-Type': 'application/json',\n//                         },\n//                         body: JSON.stringify({ email, password }),\n//                     });\n//                     const result = await response.json();\n//                     if (response.ok) {\n//                         localStorage.setItem('token', result.accessToken);\n//                         localStorage.setItem('refreshToken', result.refreshToken);\n//                         localStorage.setItem('loggedInUser', JSON.stringify(result));\n//                         toast.success('Login successful');\n//                         navigate('/home');\n//                     } else {\n//                         toast.error(result.message || 'An error occurred');\n//                     }\n//                 } catch (err) {\n//                     toast.error(err.message || 'An error occurred');\n//                 } finally {\n//                     setLoading(false);\n//                 }\n//             }, 250);\n//         }, 1000);\n//     };\n\n//     return (\n//         <div className='login-container container'>\n//             <img src='/app-icon.ico' alt='App Icon' className='app-icon' />\n//             <h1>Login</h1>\n//             <form onSubmit={handleSubmit}>\n//                 <div className='form-group'>\n//                     <input\n//                         type='email'\n//                         id='email'\n//                         placeholder='Enter your email...'\n//                         value={email}\n//                         onChange={(e) => setEmail(e.target.value)}\n//                         required\n//                     />\n//                     <label htmlFor='email' className='form-label'>Email</label>\n//                 </div>\n//                 <div className='form-group'>\n//                     <input\n//                         type='password'\n//                         id='password'\n//                         placeholder='Enter your password...'\n//                         value={password}\n//                         onChange={(e) => setPassword(e.target.value)}\n//                         required\n//                     />\n//                     <label htmlFor='password' className='form-label'>Password</label>\n//                 </div>\n//                 <button type='submit'>Login</button>\n//                 <Link to=\"/ForgotPassword\" className='signup-link'>Forgot Password?</Link>\n//                 <span>Doesn't have an account? <Link to=\"/signup\" className='signup-link'>Signup</Link></span>\n//             </form>\n//             <ToastContainer />\n//             {loading && (\n//                 <div className={`loading-overlay ${fadeOut ? 'hidden' : ''}`}>\n//                     <img src='/apple-loading.gif' alt='Loading...' className='loading-spinner' />\n//                 </div>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default Login;","map":{"version":3,"names":[],"sources":["C:/Users/thesh/Desktop/Authentication/frontend/src/pages/Login.js"],"sourcesContent":["// // Login.js \r\n// import React, { useState } from 'react';\r\n// import { Link, useNavigate } from 'react-router-dom';\r\n// import { ToastContainer } from 'react-toastify';\r\n// import { handleError, handleSuccess } from '../utils/ReactToastify';\r\n// import '../utils/ReactToastifyCustom.css';\r\n// import '../utils/loading.css';\r\n\r\n\r\n// function Login() {\r\n//     const [loginInfo, setLoginInfo] = useState({\r\n//         email: '',\r\n//         password: ''\r\n//     });\r\n\r\n//     const [loading, setLoading] = useState(false); // Add loading state\r\n//     const [loadingVisible, setLoadingVisible] = useState(false); // State for managing visibility\r\n//     const navigate = useNavigate();\r\n\r\n//     const handleChange = (e) => {\r\n//         const { name, value } = e.target;\r\n//         const copyLoginInfo = { ...loginInfo };\r\n//         copyLoginInfo[name] = value;\r\n//         setLoginInfo(copyLoginInfo);\r\n//     }\r\n\r\n//     const handleLogin = async (e) => {\r\n//         e.preventDefault();\r\n//         const { email, password } = loginInfo;\r\n//         if (!email || !password) {\r\n//             return handleError('Email and password are required');\r\n//         }\r\n//         setLoading(true); // Start loading\r\n//         setLoadingVisible(true); // Ensure loading overlay is visible\r\n//         try {\r\n//             const url = `http://localhost:8080/auth/login`;\r\n//             const response = await fetch(url, {\r\n//                 method: \"POST\",\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json'\r\n//                 },\r\n//                 body: JSON.stringify(loginInfo)\r\n//             });\r\n//             const result = await response.json();\r\n//             const { success, message, jwtToken, name, error } = result;\r\n//             if (success) {\r\n//                 handleSuccess(message);\r\n//                 localStorage.setItem('token', jwtToken);\r\n//                 localStorage.setItem('loggedInUser', name);\r\n//                 setTimeout(() => {\r\n//                     setLoadingVisible(false); // Fade out the loading overlay\r\n//                     setTimeout(() => {\r\n//                         navigate('/home'); // Navigate after loading fades out\r\n//                     }, 500); // Delay to match the fade-out duration\r\n//                 }, 1000);\r\n//             } else if (error) {\r\n//                 const details = error?.details[0].message;\r\n//                 handleError(details);\r\n//                 setLoadingVisible(false); // Fade out the loading overlay\r\n//             } else {\r\n//                 handleError(message);\r\n//                 setLoadingVisible(false); // Fade out the loading overlay\r\n//             }\r\n//         } catch (err) {\r\n//             handleError(err.message || 'An error occurred');\r\n//             setLoadingVisible(false); // Fade out the loading overlay\r\n//         } finally {\r\n//             setLoading(false); // End loading\r\n//         }\r\n//     }\r\n\r\n//     return (\r\n//         <div className='container'>\r\n//             <img src='/app-icon.ico' alt='App Icon' className='app-icon' />\r\n//             <h1>Login</h1>\r\n//             <form onSubmit={handleLogin}>\r\n//                 <div className='form-group'>\r\n//                     <input\r\n//                         onChange={handleChange}\r\n//                         type='email'\r\n//                         name='email'\r\n//                         id='email'\r\n//                         placeholder='Enter your email...'\r\n//                         value={loginInfo.email}\r\n//                     />\r\n//                     <label htmlFor='email' className='form-label'>Email</label>\r\n//                 </div>\r\n//                 <div className='form-group'>\r\n//                     <input\r\n//                         onChange={handleChange}\r\n//                         type='password'\r\n//                         name='password'\r\n//                         id='password'\r\n//                         placeholder='Enter your password...'\r\n//                         value={loginInfo.password}\r\n//                     />\r\n//                     <label htmlFor='password' className='form-label'>Password</label>\r\n//                 </div>\r\n//                 <button type='submit'>Login</button>\r\n//                 <Link to=\"/ForgotPassword\" className='signup-link'>Forgot Password?</Link>\r\n//                 <span>Doesn't have an account? <Link to=\"/signup\" className='signup-link'>Signup</Link></span>\r\n//             </form>\r\n//             <ToastContainer />\r\n            \r\n//             {loadingVisible && (\r\n//                 <div className={`loading-overlay ${!loading ? 'hidden' : ''}`}>\r\n//                     <img src='/apple-loading.gif' alt='Loading...' className='loading-spinner' />\r\n//                 </div>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default Login;\r\n\r\n\r\n\r\n\r\n\r\n// // components/Login.js\r\n// import React, { useState } from 'react';\r\n// import { useNavigate, Link } from 'react-router-dom';\r\n// import { ToastContainer, toast } from 'react-toastify';\r\n// import 'react-toastify/dist/ReactToastify.css';\r\n// import '../utils/ReactToastifyCustom.css';\r\n// import '../utils/loading.css';\r\n\r\n// function Login() {\r\n//     const [email, setEmail] = useState('');\r\n//     const [password, setPassword] = useState('');\r\n//     const [loading, setLoading] = useState(false);\r\n//     const [fadeOut, setFadeOut] = useState(false);\r\n//     const navigate = useNavigate();\r\n\r\n//     const handleSubmit = async (event) => {\r\n//         event.preventDefault();\r\n//         setLoading(true);\r\n//         setFadeOut(false);\r\n\r\n//         setTimeout(async () => {\r\n//             setFadeOut(true);\r\n//             setTimeout(async () => {\r\n//                 try {\r\n//                     const response = await fetch(\"http://localhost:8080/auth/login\", {\r\n//                         method: 'POST',\r\n//                         headers: {\r\n//                             'Content-Type': 'application/json',\r\n//                         },\r\n//                         body: JSON.stringify({ email, password }),\r\n//                     });\r\n//                     const result = await response.json();\r\n//                     if (response.ok) {\r\n//                         localStorage.setItem('token', result.accessToken);\r\n//                         localStorage.setItem('refreshToken', result.refreshToken);\r\n//                         localStorage.setItem('loggedInUser', JSON.stringify(result));\r\n//                         toast.success('Login successful');\r\n//                         navigate('/home');\r\n//                     } else {\r\n//                         toast.error(result.message || 'An error occurred');\r\n//                     }\r\n//                 } catch (err) {\r\n//                     toast.error(err.message || 'An error occurred');\r\n//                 } finally {\r\n//                     setLoading(false);\r\n//                 }\r\n//             }, 250);\r\n//         }, 1000);\r\n//     };\r\n\r\n//     return (\r\n//         <div className='login-container container'>\r\n//             <img src='/app-icon.ico' alt='App Icon' className='app-icon' />\r\n//             <h1>Login</h1>\r\n//             <form onSubmit={handleSubmit}>\r\n//                 <div className='form-group'>\r\n//                     <input\r\n//                         type='email'\r\n//                         id='email'\r\n//                         placeholder='Enter your email...'\r\n//                         value={email}\r\n//                         onChange={(e) => setEmail(e.target.value)}\r\n//                         required\r\n//                     />\r\n//                     <label htmlFor='email' className='form-label'>Email</label>\r\n//                 </div>\r\n//                 <div className='form-group'>\r\n//                     <input\r\n//                         type='password'\r\n//                         id='password'\r\n//                         placeholder='Enter your password...'\r\n//                         value={password}\r\n//                         onChange={(e) => setPassword(e.target.value)}\r\n//                         required\r\n//                     />\r\n//                     <label htmlFor='password' className='form-label'>Password</label>\r\n//                 </div>\r\n//                 <button type='submit'>Login</button>\r\n//                 <Link to=\"/ForgotPassword\" className='signup-link'>Forgot Password?</Link>\r\n//                 <span>Doesn't have an account? <Link to=\"/signup\" className='signup-link'>Signup</Link></span>\r\n//             </form>\r\n//             <ToastContainer />\r\n//             {loading && (\r\n//                 <div className={`loading-overlay ${fadeOut ? 'hidden' : ''}`}>\r\n//                     <img src='/apple-loading.gif' alt='Loading...' className='loading-spinner' />\r\n//                 </div>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default Login;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}