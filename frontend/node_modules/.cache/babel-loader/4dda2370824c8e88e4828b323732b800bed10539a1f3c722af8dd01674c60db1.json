{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thesh\\\\Desktop\\\\Authentication\\\\frontend\\\\src\\\\pages\\\\InactiveAccountPopup.jsx\",\n  _s = $RefreshSig$();\n// // components/InactiveAccountPopup.js\n\n// import React from 'react';\n// import { Link } from 'react-router-dom';\n// import '../utils/ReactToastifyCustom.css';\n// import '../utils/style/home.css';\n\n// function InactiveAccountPopup() {\n//     return (\n//         <div className=\"popup-overlay\">\n//             <div className=\"inactive-account-message-container\">\n//                 <h1>Your account is not confirmed yet.</h1>\n//                 <p>Please check your email to confirm your account.</p>\n//                 <Link to=\"/verify-email\" className=\"confirm-account-link\">\n//                     <button className=\"confirm-account-button\">\n//                         Activate Account\n//                     </button>\n//                 </Link>\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default InactiveAccountPopup;\n\n// frontend/src/pages/InactiveAccountPopup.jsx\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport '../utils/ReactToastifyCustom.css';\nimport '../utils/style/home.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InactiveAccountPopup({\n  token\n}) {\n  _s();\n  // Pass the token as a prop\n  const navigate = useNavigate();\n  const handleActivateAccount = () => {\n    // Check if the token is valid before navigating\n    fetch('http://localhost:8080/auth/verify-token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': token\n      }\n    }).then(response => response.json()).then(result => {\n      if (result.success) {\n        // Navigate to VerifyCodeConfirmAccount with token\n        navigate('/verify-email', {\n          state: {\n            token\n          }\n        });\n        console;\n      } else {\n        // Handle invalid token case\n        alert('Invalid or expired token. Please log in again.');\n      }\n    }).catch(err => {\n      alert('Network error. Please try again.');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"popup-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inactive-account-message-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Your account is not confirmed yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please check your email to confirm your account.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"confirm-account-button\",\n        onClick: handleActivateAccount,\n        children: \"Activate Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n_s(InactiveAccountPopup, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c = InactiveAccountPopup;\nexport default InactiveAccountPopup;\nvar _c;\n$RefreshReg$(_c, \"InactiveAccountPopup\");","map":{"version":3,"names":["React","useNavigate","jsxDEV","_jsxDEV","InactiveAccountPopup","token","_s","navigate","handleActivateAccount","fetch","method","headers","then","response","json","result","success","state","console","alert","catch","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/thesh/Desktop/Authentication/frontend/src/pages/InactiveAccountPopup.jsx"],"sourcesContent":["// // components/InactiveAccountPopup.js\r\n\r\n// import React from 'react';\r\n// import { Link } from 'react-router-dom';\r\n// import '../utils/ReactToastifyCustom.css';\r\n// import '../utils/style/home.css';\r\n\r\n// function InactiveAccountPopup() {\r\n//     return (\r\n//         <div className=\"popup-overlay\">\r\n//             <div className=\"inactive-account-message-container\">\r\n//                 <h1>Your account is not confirmed yet.</h1>\r\n//                 <p>Please check your email to confirm your account.</p>\r\n//                 <Link to=\"/verify-email\" className=\"confirm-account-link\">\r\n//                     <button className=\"confirm-account-button\">\r\n//                         Activate Account\r\n//                     </button>\r\n//                 </Link>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default InactiveAccountPopup;\r\n\r\n\r\n\r\n// frontend/src/pages/InactiveAccountPopup.jsx\r\nimport React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport '../utils/ReactToastifyCustom.css';\r\nimport '../utils/style/home.css';\r\n\r\nfunction InactiveAccountPopup({ token }) {  // Pass the token as a prop\r\n    const navigate = useNavigate();\r\n\r\n    const handleActivateAccount = () => {\r\n        // Check if the token is valid before navigating\r\n        fetch('http://localhost:8080/auth/verify-token', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': token,\r\n            },\r\n        })\r\n        .then(response => response.json())\r\n        .then(result => {\r\n            if (result.success) {\r\n                // Navigate to VerifyCodeConfirmAccount with token\r\n                navigate('/verify-email', { state: { token } });\r\n                console\r\n            } else {\r\n                // Handle invalid token case\r\n                alert('Invalid or expired token. Please log in again.');\r\n            }\r\n        })\r\n        .catch(err => {\r\n            alert('Network error. Please try again.');\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"popup-overlay\">\r\n            <div className=\"inactive-account-message-container\">\r\n                <h1>Your account is not confirmed yet.</h1>\r\n                <p>Please check your email to confirm your account.</p>\r\n                <button className=\"confirm-account-button\" onClick={handleActivateAccount}>\r\n                    Activate Account\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InactiveAccountPopup;\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,kCAAkC;AACzC,OAAO,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,oBAAoBA,CAAC;EAAEC;AAAM,CAAC,EAAE;EAAAC,EAAA;EAAG;EACxC,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAE9B,MAAMO,qBAAqB,GAAGA,CAAA,KAAM;IAChC;IACAC,KAAK,CAAC,yCAAyC,EAAE;MAC7CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAEN;MACrB;IACJ,CAAC,CAAC,CACDO,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,MAAM,IAAI;MACZ,IAAIA,MAAM,CAACC,OAAO,EAAE;QAChB;QACAT,QAAQ,CAAC,eAAe,EAAE;UAAEU,KAAK,EAAE;YAAEZ;UAAM;QAAE,CAAC,CAAC;QAC/Ca,OAAO;MACX,CAAC,MAAM;QACH;QACAC,KAAK,CAAC,gDAAgD,CAAC;MAC3D;IACJ,CAAC,CAAC,CACDC,KAAK,CAACC,GAAG,IAAI;MACVF,KAAK,CAAC,kCAAkC,CAAC;IAC7C,CAAC,CAAC;EACN,CAAC;EAED,oBACIhB,OAAA;IAAKmB,SAAS,EAAC,eAAe;IAAAC,QAAA,eAC1BpB,OAAA;MAAKmB,SAAS,EAAC,oCAAoC;MAAAC,QAAA,gBAC/CpB,OAAA;QAAAoB,QAAA,EAAI;MAAkC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3CxB,OAAA;QAAAoB,QAAA,EAAG;MAAgD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACvDxB,OAAA;QAAQmB,SAAS,EAAC,wBAAwB;QAACM,OAAO,EAAEpB,qBAAsB;QAAAe,QAAA,EAAC;MAE3E;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACrB,EAAA,CAvCQF,oBAAoB;EAAA,QACRH,WAAW;AAAA;AAAA4B,EAAA,GADvBzB,oBAAoB;AAyC7B,eAAeA,oBAAoB;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}