{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thesh\\\\Desktop\\\\Authentication\\\\frontend\\\\src\\\\Services\\\\OtpInput.jsx\",\n  _s = $RefreshSig$();\n// frontend/src/Services/OtpInput.jsx\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OtpInput = ({\n  length = 6,\n  onOtpSubmit = () => {},\n  onOtpComplete = () => {}\n}) => {\n  _s();\n  const [otp, setOtp] = useState(new Array(length).fill(\"\"));\n  const inputRefs = useRef([]);\n  useEffect(() => {\n    if (inputRefs.current[0]) {\n      inputRefs.current[0].focus();\n    }\n  }, []);\n  useEffect(() => {\n    onOtpComplete(otp.every(value => value !== \"\"));\n  }, [otp, onOtpComplete]);\n  const handleChange = (index, e) => {\n    const value = e.target.value;\n    if (isNaN(value) || value.length > 1) return;\n    const newOtp = [...otp];\n    newOtp[index] = value.slice(-1);\n    setOtp(newOtp);\n\n    // Focus on the next input field if value is entered\n    if (value && index < length - 1) {\n      inputRefs.current[index + 1].focus();\n    }\n\n    // Auto-submit if all fields are filled\n    if (newOtp.every(digit => digit !== \"\")) {\n      onOtpSubmit(newOtp.join(\"\"));\n    }\n  };\n  const moveCursorToEnd = inputElement => {\n    if (inputElement) {\n      const length = inputElement.value.length;\n      inputElement.setSelectionRange(length, length);\n      inputElement.focus();\n    }\n  };\n  const handleKeyDown = (index, e) => {\n    // Handle Ctrl + A to select all text in all input fields with values\n    if (e.ctrlKey && e.key === \"a\") {\n      e.preventDefault(); // Prevent default browser action\n\n      let anyValueSelected = false;\n\n      // Iterate through all input fields\n      inputRefs.current.forEach(input => {\n        if (input && input.value) {\n          input.focus(); // Ensure the input field is focused\n          input.select(); // Select all text in the input field\n          anyValueSelected = true; // At least one input has a value\n        }\n      });\n      if (anyValueSelected) {\n        return; // Exit early if any value was selected\n      }\n\n      // If no input fields have values, just select text in the current input\n      const inputElement = inputRefs.current[index];\n      if (inputElement) {\n        inputElement.focus(); // Ensure the input field is focused\n        inputElement.select(); // Select all text in the input field\n      }\n      return; // Exit early to avoid executing other key handlers\n    }\n    if (e.key === \"Backspace\") {\n      // Move focus to the previous input if the current one is empty\n      if (!otp[index] && index > 0) {\n        inputRefs.current[index - 1].focus();\n        moveCursorToEnd(inputRefs.current[index - 1]);\n      }\n    } else if (e.key === \"ArrowLeft\") {\n      e.preventDefault();\n      // Move focus to the previous input field or wrap to the last input field\n      if (index > 0) {\n        inputRefs.current[index - 1].focus();\n        if (index === 0) {\n          setTimeout(() => moveCursorToEnd(inputRefs.current[index - 1]));\n        } else {\n          setTimeout(() => moveCursorToEnd(inputRefs.current[index - 1]), 0);\n        }\n        // } else {\n        // Wrap around to the last input field\n        // inputRefs.current[length - 1].focus();\n        // setTimeout(() => moveCursorToEnd(inputRefs.current[length - 1]), 0);\n      }\n    } else if (e.key === \"ArrowRight\") {\n      e.preventDefault();\n      // Move focus to the next input field or wrap to the first input field\n      if (index < length - 1) {\n        inputRefs.current[index + 1].focus();\n        setTimeout(() => moveCursorToEnd(inputRefs.current[index + 1]), 0);\n        // } else {\n        //     // Wrap around to the first input field\n        //     inputRefs.current[0].focus();\n        //     setTimeout(() => moveCursorToEnd(inputRefs.current[0]), 0);\n      }\n    } else if (e.key === \"Tab\") {\n      // Allow tabbing to navigate between fields\n      e.preventDefault(); // Prevent the default tab behavior\n\n      if (e.shiftKey && index > 0) {\n        // Shift + Tab: Move focus to the previous input field\n        inputRefs.current[index - 1].focus();\n        moveCursorToEnd(inputRefs.current[index - 1]);\n      } else if (!e.shiftKey && index < length - 1) {\n        // Tab: Move focus to the next input field\n        inputRefs.current[index + 1].focus();\n        moveCursorToEnd(inputRefs.current[index + 1]);\n      }\n    } else if (e.key === \"Enter\") {\n      // Move focus to the next input field or trigger submission\n      if (index < length - 1) {\n        // Move focus to the next input field\n        inputRefs.current[index + 1].focus();\n        setTimeout(() => moveCursorToEnd(inputRefs.current[index + 1]), 0);\n      } else if (index === length - 1 && otp.every(value => value !== \"\")) {\n        // Trigger submission if all fields are filled and focus is on the last input\n        onOtpSubmit(otp.join(\"\"));\n      }\n    }\n  };\n  const handlePaste = e => {\n    e.preventDefault();\n    const pasteData = e.clipboardData.getData(\"text\").slice(0, length).split(\"\");\n    const newOtp = new Array(length).fill(\"\");\n    pasteData.forEach((digit, i) => {\n      if (i < length) {\n        newOtp[i] = digit;\n        inputRefs.current[i].value = digit;\n      }\n    });\n    setOtp(newOtp);\n    inputRefs.current[length - 1].focus();\n    onOtpSubmit(newOtp.join(\"\"));\n  };\n  const handleClick = index => {\n    inputRefs.current[index].focus(); // Focus on the clicked input field\n    inputRefs.current[index].setSelectionRange(1, 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"otp-input-wrapper\",\n    children: otp.map((value, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      ref: input => inputRefs.current[index] = input,\n      value: value,\n      onChange: e => handleChange(index, e),\n      onKeyDown: e => handleKeyDown(index, e),\n      onPaste: e => handlePaste(e),\n      onClick: () => handleClick(index),\n      className: \"otpField\",\n      maxLength: 1\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n};\n_s(OtpInput, \"KtsFwcsXKrX6tESIX2coBILhJOc=\");\n_c = OtpInput;\nexport default OtpInput;\nvar _c;\n$RefreshReg$(_c, \"OtpInput\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","OtpInput","length","onOtpSubmit","onOtpComplete","_s","otp","setOtp","Array","fill","inputRefs","current","focus","every","value","handleChange","index","e","target","isNaN","newOtp","slice","digit","join","moveCursorToEnd","inputElement","setSelectionRange","handleKeyDown","ctrlKey","key","preventDefault","anyValueSelected","forEach","input","select","setTimeout","shiftKey","handlePaste","pasteData","clipboardData","getData","split","i","handleClick","className","children","map","type","ref","onChange","onKeyDown","onPaste","onClick","maxLength","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/thesh/Desktop/Authentication/frontend/src/Services/OtpInput.jsx"],"sourcesContent":["// frontend/src/Services/OtpInput.jsx\r\n\r\nimport React, { useState, useRef, useEffect } from \"react\";\r\n\r\nconst OtpInput = ({\r\n  length = 6,\r\n  onOtpSubmit = () => {},\r\n  onOtpComplete = () => {},\r\n}) => {\r\n  const [otp, setOtp] = useState(new Array(length).fill(\"\"));\r\n  const inputRefs = useRef([]);\r\n\r\n  useEffect(() => {\r\n    if (inputRefs.current[0]) {\r\n      inputRefs.current[0].focus();\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    onOtpComplete(otp.every((value) => value !== \"\"));\r\n  }, [otp, onOtpComplete]);\r\n\r\n  const handleChange = (index, e) => {\r\n    const value = e.target.value;\r\n    if (isNaN(value) || value.length > 1) return;\r\n\r\n    const newOtp = [...otp];\r\n    newOtp[index] = value.slice(-1);\r\n    setOtp(newOtp);\r\n\r\n    // Focus on the next input field if value is entered\r\n    if (value && index < length - 1) {\r\n      inputRefs.current[index + 1].focus();\r\n    }\r\n\r\n    // Auto-submit if all fields are filled\r\n    if (newOtp.every((digit) => digit !== \"\")) {\r\n      onOtpSubmit(newOtp.join(\"\"));\r\n    }\r\n  };\r\n  const moveCursorToEnd = (inputElement) => {\r\n    if (inputElement) {\r\n      const length = inputElement.value.length;\r\n      inputElement.setSelectionRange(length, length);\r\n      inputElement.focus();\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (index, e) => {\r\n // Handle Ctrl + A to select all text in all input fields with values\r\n if (e.ctrlKey && e.key === \"a\") {\r\n    e.preventDefault(); // Prevent default browser action\r\n\r\n    let anyValueSelected = false;\r\n\r\n    // Iterate through all input fields\r\n    inputRefs.current.forEach(input => {\r\n        if (input && input.value) {\r\n            input.focus(); // Ensure the input field is focused\r\n            input.select(); // Select all text in the input field\r\n            anyValueSelected = true; // At least one input has a value\r\n        }\r\n    });\r\n\r\n    if (anyValueSelected) {\r\n        return; // Exit early if any value was selected\r\n    }\r\n\r\n    // If no input fields have values, just select text in the current input\r\n    const inputElement = inputRefs.current[index];\r\n    if (inputElement) {\r\n        inputElement.focus(); // Ensure the input field is focused\r\n        inputElement.select(); // Select all text in the input field\r\n    }\r\n\r\n    return; // Exit early to avoid executing other key handlers\r\n}\r\n\r\n    if (e.key === \"Backspace\") {\r\n      // Move focus to the previous input if the current one is empty\r\n      if (!otp[index] && index > 0) {\r\n        inputRefs.current[index - 1].focus();\r\n        moveCursorToEnd(inputRefs.current[index - 1]);\r\n      }\r\n    } else if (e.key === \"ArrowLeft\") {\r\n      e.preventDefault();\r\n      // Move focus to the previous input field or wrap to the last input field\r\n      if (index > 0) {\r\n        inputRefs.current[index - 1].focus();\r\n        if (index === 0) {\r\n          setTimeout(() => moveCursorToEnd(inputRefs.current[index - 1]));\r\n        } else {\r\n          setTimeout(() => moveCursorToEnd(inputRefs.current[index - 1]), 0);\r\n        }\r\n        // } else {\r\n        // Wrap around to the last input field\r\n        // inputRefs.current[length - 1].focus();\r\n        // setTimeout(() => moveCursorToEnd(inputRefs.current[length - 1]), 0);\r\n      }\r\n    } else if (e.key === \"ArrowRight\") {\r\n      e.preventDefault();\r\n      // Move focus to the next input field or wrap to the first input field\r\n      if (index < length - 1) {\r\n        inputRefs.current[index + 1].focus();\r\n        setTimeout(() => moveCursorToEnd(inputRefs.current[index + 1]), 0);\r\n        // } else {\r\n        //     // Wrap around to the first input field\r\n        //     inputRefs.current[0].focus();\r\n        //     setTimeout(() => moveCursorToEnd(inputRefs.current[0]), 0);\r\n      }\r\n    } else if (e.key === \"Tab\") {\r\n      // Allow tabbing to navigate between fields\r\n      e.preventDefault(); // Prevent the default tab behavior\r\n\r\n      if (e.shiftKey && index > 0) {\r\n        // Shift + Tab: Move focus to the previous input field\r\n        inputRefs.current[index - 1].focus();\r\n        moveCursorToEnd(inputRefs.current[index - 1]);\r\n      } else if (!e.shiftKey && index < length - 1) {\r\n        // Tab: Move focus to the next input field\r\n        inputRefs.current[index + 1].focus();\r\n        moveCursorToEnd(inputRefs.current[index + 1]);\r\n      }\r\n    } else if (e.key === \"Enter\") {\r\n      // Move focus to the next input field or trigger submission\r\n      if (index < length - 1) {\r\n        // Move focus to the next input field\r\n        inputRefs.current[index + 1].focus();\r\n        setTimeout(() => moveCursorToEnd(inputRefs.current[index + 1]), 0);\r\n      } else if (index === length - 1 && otp.every((value) => value !== \"\")) {\r\n        // Trigger submission if all fields are filled and focus is on the last input\r\n        onOtpSubmit(otp.join(\"\"));\r\n      }\r\n    }\r\n  };\r\n\r\n  const handlePaste = (e) => {\r\n    e.preventDefault();\r\n    const pasteData = e.clipboardData\r\n      .getData(\"text\")\r\n      .slice(0, length)\r\n      .split(\"\");\r\n    const newOtp = new Array(length).fill(\"\");\r\n\r\n    pasteData.forEach((digit, i) => {\r\n      if (i < length) {\r\n        newOtp[i] = digit;\r\n        inputRefs.current[i].value = digit;\r\n      }\r\n    });\r\n\r\n    setOtp(newOtp);\r\n    inputRefs.current[length - 1].focus();\r\n    onOtpSubmit(newOtp.join(\"\"));\r\n  };\r\n\r\n  const handleClick = (index) => {\r\n    inputRefs.current[index].focus(); // Focus on the clicked input field\r\n    inputRefs.current[index].setSelectionRange(1, 1);\r\n  };\r\n\r\n  return (\r\n    <div className=\"otp-input-wrapper\">\r\n      {otp.map((value, index) => (\r\n        <input\r\n          key={index}\r\n          type=\"text\"\r\n          ref={(input) => (inputRefs.current[index] = input)}\r\n          value={value}\r\n          onChange={(e) => handleChange(index, e)}\r\n          onKeyDown={(e) => handleKeyDown(index, e)}\r\n          onPaste={(e) => handlePaste(e)}\r\n          onClick={() => handleClick(index)}\r\n          className=\"otpField\"\r\n          maxLength={1}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OtpInput;\r\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,QAAQ,GAAGA,CAAC;EAChBC,MAAM,GAAG,CAAC;EACVC,WAAW,GAAGA,CAAA,KAAM,CAAC,CAAC;EACtBC,aAAa,GAAGA,CAAA,KAAM,CAAC;AACzB,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGX,QAAQ,CAAC,IAAIY,KAAK,CAACN,MAAM,CAAC,CAACO,IAAI,CAAC,EAAE,CAAC,CAAC;EAC1D,MAAMC,SAAS,GAAGb,MAAM,CAAC,EAAE,CAAC;EAE5BC,SAAS,CAAC,MAAM;IACd,IAAIY,SAAS,CAACC,OAAO,CAAC,CAAC,CAAC,EAAE;MACxBD,SAAS,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC;IAC9B;EACF,CAAC,EAAE,EAAE,CAAC;EAENd,SAAS,CAAC,MAAM;IACdM,aAAa,CAACE,GAAG,CAACO,KAAK,CAAEC,KAAK,IAAKA,KAAK,KAAK,EAAE,CAAC,CAAC;EACnD,CAAC,EAAE,CAACR,GAAG,EAAEF,aAAa,CAAC,CAAC;EAExB,MAAMW,YAAY,GAAGA,CAACC,KAAK,EAAEC,CAAC,KAAK;IACjC,MAAMH,KAAK,GAAGG,CAAC,CAACC,MAAM,CAACJ,KAAK;IAC5B,IAAIK,KAAK,CAACL,KAAK,CAAC,IAAIA,KAAK,CAACZ,MAAM,GAAG,CAAC,EAAE;IAEtC,MAAMkB,MAAM,GAAG,CAAC,GAAGd,GAAG,CAAC;IACvBc,MAAM,CAACJ,KAAK,CAAC,GAAGF,KAAK,CAACO,KAAK,CAAC,CAAC,CAAC,CAAC;IAC/Bd,MAAM,CAACa,MAAM,CAAC;;IAEd;IACA,IAAIN,KAAK,IAAIE,KAAK,GAAGd,MAAM,GAAG,CAAC,EAAE;MAC/BQ,SAAS,CAACC,OAAO,CAACK,KAAK,GAAG,CAAC,CAAC,CAACJ,KAAK,CAAC,CAAC;IACtC;;IAEA;IACA,IAAIQ,MAAM,CAACP,KAAK,CAAES,KAAK,IAAKA,KAAK,KAAK,EAAE,CAAC,EAAE;MACzCnB,WAAW,CAACiB,MAAM,CAACG,IAAI,CAAC,EAAE,CAAC,CAAC;IAC9B;EACF,CAAC;EACD,MAAMC,eAAe,GAAIC,YAAY,IAAK;IACxC,IAAIA,YAAY,EAAE;MAChB,MAAMvB,MAAM,GAAGuB,YAAY,CAACX,KAAK,CAACZ,MAAM;MACxCuB,YAAY,CAACC,iBAAiB,CAACxB,MAAM,EAAEA,MAAM,CAAC;MAC9CuB,YAAY,CAACb,KAAK,CAAC,CAAC;IACtB;EACF,CAAC;EAED,MAAMe,aAAa,GAAGA,CAACX,KAAK,EAAEC,CAAC,KAAK;IACrC;IACA,IAAIA,CAAC,CAACW,OAAO,IAAIX,CAAC,CAACY,GAAG,KAAK,GAAG,EAAE;MAC7BZ,CAAC,CAACa,cAAc,CAAC,CAAC,CAAC,CAAC;;MAEpB,IAAIC,gBAAgB,GAAG,KAAK;;MAE5B;MACArB,SAAS,CAACC,OAAO,CAACqB,OAAO,CAACC,KAAK,IAAI;QAC/B,IAAIA,KAAK,IAAIA,KAAK,CAACnB,KAAK,EAAE;UACtBmB,KAAK,CAACrB,KAAK,CAAC,CAAC,CAAC,CAAC;UACfqB,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC;UAChBH,gBAAgB,GAAG,IAAI,CAAC,CAAC;QAC7B;MACJ,CAAC,CAAC;MAEF,IAAIA,gBAAgB,EAAE;QAClB,OAAO,CAAC;MACZ;;MAEA;MACA,MAAMN,YAAY,GAAGf,SAAS,CAACC,OAAO,CAACK,KAAK,CAAC;MAC7C,IAAIS,YAAY,EAAE;QACdA,YAAY,CAACb,KAAK,CAAC,CAAC,CAAC,CAAC;QACtBa,YAAY,CAACS,MAAM,CAAC,CAAC,CAAC,CAAC;MAC3B;MAEA,OAAO,CAAC;IACZ;IAEI,IAAIjB,CAAC,CAACY,GAAG,KAAK,WAAW,EAAE;MACzB;MACA,IAAI,CAACvB,GAAG,CAACU,KAAK,CAAC,IAAIA,KAAK,GAAG,CAAC,EAAE;QAC5BN,SAAS,CAACC,OAAO,CAACK,KAAK,GAAG,CAAC,CAAC,CAACJ,KAAK,CAAC,CAAC;QACpCY,eAAe,CAACd,SAAS,CAACC,OAAO,CAACK,KAAK,GAAG,CAAC,CAAC,CAAC;MAC/C;IACF,CAAC,MAAM,IAAIC,CAAC,CAACY,GAAG,KAAK,WAAW,EAAE;MAChCZ,CAAC,CAACa,cAAc,CAAC,CAAC;MAClB;MACA,IAAId,KAAK,GAAG,CAAC,EAAE;QACbN,SAAS,CAACC,OAAO,CAACK,KAAK,GAAG,CAAC,CAAC,CAACJ,KAAK,CAAC,CAAC;QACpC,IAAII,KAAK,KAAK,CAAC,EAAE;UACfmB,UAAU,CAAC,MAAMX,eAAe,CAACd,SAAS,CAACC,OAAO,CAACK,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;QACjE,CAAC,MAAM;UACLmB,UAAU,CAAC,MAAMX,eAAe,CAACd,SAAS,CAACC,OAAO,CAACK,KAAK,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACpE;QACA;QACA;QACA;QACA;MACF;IACF,CAAC,MAAM,IAAIC,CAAC,CAACY,GAAG,KAAK,YAAY,EAAE;MACjCZ,CAAC,CAACa,cAAc,CAAC,CAAC;MAClB;MACA,IAAId,KAAK,GAAGd,MAAM,GAAG,CAAC,EAAE;QACtBQ,SAAS,CAACC,OAAO,CAACK,KAAK,GAAG,CAAC,CAAC,CAACJ,KAAK,CAAC,CAAC;QACpCuB,UAAU,CAAC,MAAMX,eAAe,CAACd,SAAS,CAACC,OAAO,CAACK,KAAK,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QAClE;QACA;QACA;QACA;MACF;IACF,CAAC,MAAM,IAAIC,CAAC,CAACY,GAAG,KAAK,KAAK,EAAE;MAC1B;MACAZ,CAAC,CAACa,cAAc,CAAC,CAAC,CAAC,CAAC;;MAEpB,IAAIb,CAAC,CAACmB,QAAQ,IAAIpB,KAAK,GAAG,CAAC,EAAE;QAC3B;QACAN,SAAS,CAACC,OAAO,CAACK,KAAK,GAAG,CAAC,CAAC,CAACJ,KAAK,CAAC,CAAC;QACpCY,eAAe,CAACd,SAAS,CAACC,OAAO,CAACK,KAAK,GAAG,CAAC,CAAC,CAAC;MAC/C,CAAC,MAAM,IAAI,CAACC,CAAC,CAACmB,QAAQ,IAAIpB,KAAK,GAAGd,MAAM,GAAG,CAAC,EAAE;QAC5C;QACAQ,SAAS,CAACC,OAAO,CAACK,KAAK,GAAG,CAAC,CAAC,CAACJ,KAAK,CAAC,CAAC;QACpCY,eAAe,CAACd,SAAS,CAACC,OAAO,CAACK,KAAK,GAAG,CAAC,CAAC,CAAC;MAC/C;IACF,CAAC,MAAM,IAAIC,CAAC,CAACY,GAAG,KAAK,OAAO,EAAE;MAC5B;MACA,IAAIb,KAAK,GAAGd,MAAM,GAAG,CAAC,EAAE;QACtB;QACAQ,SAAS,CAACC,OAAO,CAACK,KAAK,GAAG,CAAC,CAAC,CAACJ,KAAK,CAAC,CAAC;QACpCuB,UAAU,CAAC,MAAMX,eAAe,CAACd,SAAS,CAACC,OAAO,CAACK,KAAK,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;MACpE,CAAC,MAAM,IAAIA,KAAK,KAAKd,MAAM,GAAG,CAAC,IAAII,GAAG,CAACO,KAAK,CAAEC,KAAK,IAAKA,KAAK,KAAK,EAAE,CAAC,EAAE;QACrE;QACAX,WAAW,CAACG,GAAG,CAACiB,IAAI,CAAC,EAAE,CAAC,CAAC;MAC3B;IACF;EACF,CAAC;EAED,MAAMc,WAAW,GAAIpB,CAAC,IAAK;IACzBA,CAAC,CAACa,cAAc,CAAC,CAAC;IAClB,MAAMQ,SAAS,GAAGrB,CAAC,CAACsB,aAAa,CAC9BC,OAAO,CAAC,MAAM,CAAC,CACfnB,KAAK,CAAC,CAAC,EAAEnB,MAAM,CAAC,CAChBuC,KAAK,CAAC,EAAE,CAAC;IACZ,MAAMrB,MAAM,GAAG,IAAIZ,KAAK,CAACN,MAAM,CAAC,CAACO,IAAI,CAAC,EAAE,CAAC;IAEzC6B,SAAS,CAACN,OAAO,CAAC,CAACV,KAAK,EAAEoB,CAAC,KAAK;MAC9B,IAAIA,CAAC,GAAGxC,MAAM,EAAE;QACdkB,MAAM,CAACsB,CAAC,CAAC,GAAGpB,KAAK;QACjBZ,SAAS,CAACC,OAAO,CAAC+B,CAAC,CAAC,CAAC5B,KAAK,GAAGQ,KAAK;MACpC;IACF,CAAC,CAAC;IAEFf,MAAM,CAACa,MAAM,CAAC;IACdV,SAAS,CAACC,OAAO,CAACT,MAAM,GAAG,CAAC,CAAC,CAACU,KAAK,CAAC,CAAC;IACrCT,WAAW,CAACiB,MAAM,CAACG,IAAI,CAAC,EAAE,CAAC,CAAC;EAC9B,CAAC;EAED,MAAMoB,WAAW,GAAI3B,KAAK,IAAK;IAC7BN,SAAS,CAACC,OAAO,CAACK,KAAK,CAAC,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC;IAClCF,SAAS,CAACC,OAAO,CAACK,KAAK,CAAC,CAACU,iBAAiB,CAAC,CAAC,EAAE,CAAC,CAAC;EAClD,CAAC;EAED,oBACE1B,OAAA;IAAK4C,SAAS,EAAC,mBAAmB;IAAAC,QAAA,EAC/BvC,GAAG,CAACwC,GAAG,CAAC,CAAChC,KAAK,EAAEE,KAAK,kBACpBhB,OAAA;MAEE+C,IAAI,EAAC,MAAM;MACXC,GAAG,EAAGf,KAAK,IAAMvB,SAAS,CAACC,OAAO,CAACK,KAAK,CAAC,GAAGiB,KAAO;MACnDnB,KAAK,EAAEA,KAAM;MACbmC,QAAQ,EAAGhC,CAAC,IAAKF,YAAY,CAACC,KAAK,EAAEC,CAAC,CAAE;MACxCiC,SAAS,EAAGjC,CAAC,IAAKU,aAAa,CAACX,KAAK,EAAEC,CAAC,CAAE;MAC1CkC,OAAO,EAAGlC,CAAC,IAAKoB,WAAW,CAACpB,CAAC,CAAE;MAC/BmC,OAAO,EAAEA,CAAA,KAAMT,WAAW,CAAC3B,KAAK,CAAE;MAClC4B,SAAS,EAAC,UAAU;MACpBS,SAAS,EAAE;IAAE,GATRrC,KAAK;MAAAsC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAUX,CACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACpD,EAAA,CA/KIJ,QAAQ;AAAAyD,EAAA,GAARzD,QAAQ;AAiLd,eAAeA,QAAQ;AAAC,IAAAyD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}