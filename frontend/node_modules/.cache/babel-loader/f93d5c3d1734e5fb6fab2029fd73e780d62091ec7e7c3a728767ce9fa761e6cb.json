{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thesh\\\\Desktop\\\\Authentication\\\\frontend\\\\src\\\\pages\\\\Signup.js\",\n  _s = $RefreshSig$();\n// // //Signup.js\n\n// // import React, { useEffect, useState } from 'react';\n// // import { useNavigate, Link } from 'react-router-dom';\n// // import { handleSuccess, handleError, ToastContainer } from '../utils/ReactToastify';\n// // import '../utils/ReactToastifyCustom.css';\n// // import '../utils/style/animations.css';\n// // import '../utils/loading.css';\n\n// // function Signup() {\n// //     const [name, setName] = useState('');\n// //     const [email, setEmail] = useState('');\n// //     const [password, setPassword] = useState('');\n// //     const [confirmPassword, setConfirmPassword] = useState('');\n// //     const [loading, setLoading] = useState(false);\n// //     const [fadeIn, setFadeIn] = useState(true);\n// //     const [fadeOut, setFadeOut] = useState(false);\n// //     const navigate = useNavigate();\n\n// //     useEffect(() => {\n// //         const timeoutId = setTimeout(() => {\n// //             setFadeIn(false);\n// //         }, 500);\n// //         return () => clearTimeout(timeoutId);\n// //     }, []);\n\n// //     const handleSubmit = async (event) => {\n// //         event.preventDefault();\n\n// //         if (password !== confirmPassword) {\n// //             handleError('Passwords do not match');\n// //             return;\n// //         }\n\n// //         setLoading(true);\n// //         setFadeOut(false);\n\n// //         setTimeout(async () => {\n// //             setFadeOut(true);\n// //             setTimeout(async () => {\n// //                 try {\n// //                     const response = await fetch(\"http://localhost:8080/auth/signup\", {\n// //                         method: 'POST',\n// //                         headers: {\n// //                             'Content-Type': 'application/json',\n// //                         },\n// //                         body: JSON.stringify({ name, email, password }),\n// //                     });\n// //                     const result = await response.json();\n// //                     if (response.ok) {\n// //                         handleSuccess('Signup successful!');\n// //                         setTimeout(() => navigate('/login'), 500);\n// //                     } else {\n// //                         handleError(result.message || 'An error occurred during signup. Please try again.');\n// //                     }\n// //                 } catch (err) {\n// //                     handleError('Network error. Please check your connection and try again.');\n// //                 } finally {\n// //                     setLoading(false);\n// //                 }\n// //             }, 250);\n// //         }, 1000);\n// //     };\n\n// //     return (\n// //         <div className={`signup-container container ${fadeIn ? 'fade-in' : ''}`}>\n// //             <img src='/app-icon.ico' alt='App Icon' className='app-icon' />\n// //             <h1>Sign up</h1>\n// //             <form onSubmit={handleSubmit}>\n// //                 <div className='form-group'>\n// //                     <input\n// //                         type='text'\n// //                         id='name'\n// //                         placeholder=''\n// //                         value={name}\n// //                         onChange={(e) => setName(e.target.value)}\n// //                         required\n// //                     />\n// //                     <label htmlFor='name' className='form-label'>Name</label>\n// //                 </div>\n// //                 <div className='form-group'>\n// //                     <input\n// //                         type='email'\n// //                         id='email'\n// //                         placeholder=''\n// //                         value={email}\n// //                         onChange={(e) => setEmail(e.target.value)}\n// //                         required\n// //                     />\n// //                     <label htmlFor='email' className='form-label'>Email</label>\n// //                 </div>\n\n// //                 <div className='form-group-container'>\n// //                     <div className='form-group'>\n// //                         <input\n// //                             type='password'\n// //                             id='password'\n// //                             placeholder=''\n// //                             value={password}\n// //                             onChange={(e) => setPassword(e.target.value)}\n// //                             required\n// //                         />\n// //                         <label htmlFor='password' className='form-label'>Password</label>\n// //                     </div>\n\n// //                     <div className='form-group'>\n// //                         <input\n// //                             type='password'\n// //                             id='confirmPassword'\n// //                             placeholder=''\n// //                             value={confirmPassword}\n// //                             onChange={(e) => setConfirmPassword(e.target.value)}\n// //                             required\n// //                         />\n// //                         <label htmlFor='confirmPassword' className='form-label'>Confirm Password</label>\n// //                     </div>\n// //                 </div>\n\n// //                 <button className='signup-button' type='submit'>Sign up</button>\n// //                 <span>Already have an account? <Link to=\"/login\" className='pages-link'>Login</Link></span>\n// //             </form>\n\n// //             <span className=\"terms\">\n// //                 By creating an account, you agree to our \n// //                 <Link to=\"/terms\" className='terms-pages-link'> Terms of Use</Link>, \n// //                 <Link to=\"/privacy-policy\" className='terms-pages-link'> Privacy Policy</Link>.\n// //             </span>\n\n// //             <ToastContainer />\n// //             {loading && (\n// //                 <div className={`loading-overlay ${fadeOut ? 'hidden' : ''}`}>\n// //                     <img src='/apple-loading.gif' alt='Loading...' className='loading-spinner' />\n// //                 </div>\n// //             )}\n// //         </div>\n// //     );\n// // }\n\n// // export default Signup;\n\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate, Link } from 'react-router-dom';\n// import { handleSuccess, handleError, ToastContainer } from '../utils/ReactToastify';\n// import '../utils/ReactToastifyCustom.css';\n// import '../utils/loading.css';\n// import '../utils/style/animations.css';\n\n// function Signup() {\n//     const [name, setName] = useState('');\n//     const [email, setEmail] = useState('');\n//     const [password, setPassword] = useState('');\n//     const [confirmPassword, setConfirmPassword] = useState('');\n//     const [loading, setLoading] = useState(false);\n//     const [fadeIn, setFadeIn] = useState(true);\n//     const [fadeOut, setFadeOut] = useState(false);\n//     const navigate = useNavigate();\n\n//     useEffect(() => {\n//         const timeoutId = setTimeout(() => {\n//             setFadeIn(false);\n//         }, 500);\n//         return () => clearTimeout(timeoutId);\n//     }, []);\n\n//     useEffect(() => {\n//         const refreshToken = localStorage.getItem('refreshToken');\n//         if (refreshToken) {\n//             // Attempt auto-login using the refresh token\n//             (async () => {\n//                 try {\n//                     const response = await fetch(\"http://localhost:8080/auth/refresh-token\", {\n//                         method: 'POST',\n//                         headers: {\n//                             'Content-Type': 'application/json',\n//                         },\n//                         body: JSON.stringify({ refreshToken }),\n//                     });\n//                     const result = await response.json();\n//                     if (response.ok) {\n//                         localStorage.setItem('token', result.accessToken);\n//                         localStorage.setItem('refreshToken', result.refreshToken);\n//                         localStorage.setItem('loggedInUser', JSON.stringify(result));\n//                         handleSuccess('Auto-login successful!');\n//                         navigate('/home');\n//                     } else {\n//                         handleError(result.message || 'Failed to auto-login.');\n//                     }\n//                 } catch (err) {\n//                     handleError('Network error. Please check your connection and try again.');\n//                 }\n//             })();\n//         }\n//     }, [navigate]);\n\n//     const handleSubmit = async (event) => {\n//         event.preventDefault();\n\n//         if (password !== confirmPassword) {\n//             handleError('Passwords do not match');\n//             return;\n//         }\n\n//         setLoading(true);\n//         setFadeOut(false);\n\n//         setTimeout(async () => {\n//             setFadeOut(true);\n//             setTimeout(async () => {\n//                 try {\n//                     const response = await fetch(\"http://localhost:8080/auth/signup\", {\n//                         method: 'POST',\n//                         headers: {\n//                             'Content-Type': 'application/json',\n//                         },\n//                         body: JSON.stringify({ name, email, password }),\n//                     });\n//                     const result = await response.json();\n//                     if (response.ok) {\n//                         localStorage.setItem('token', result.accessToken);\n//                         localStorage.setItem('refreshToken', result.refreshToken);\n//                         localStorage.setItem('loggedInUser', JSON.stringify(result));\n//                         handleSuccess('Signup successful!');\n//                         setTimeout(() => navigate('/login'), 500);\n//                     } else {\n//                         handleError(result.message || 'An error occurred during signup. Please try again.');\n//                     }\n//                 } catch (err) {\n//                     handleError('Network error. Please check your connection and try again.');\n//                 } finally {\n//                     setLoading(false);\n//                 }\n//             }, 250);\n//         }, 1000);\n//     };\n\n//     return (\n//         <div className={`signup-container container ${fadeIn ? 'fade-in' : ''}`}>\n//             <img src='/app-icon.ico' alt='App Icon' className='app-icon' />\n//             <h1>Sign up</h1>\n//             <form onSubmit={handleSubmit}>\n//                 <div className='form-group'>\n//                     <input\n//                         type='text'\n//                         id='name'\n//                         placeholder=''\n//                         value={name}\n//                         onChange={(e) => setName(e.target.value)}\n//                         required\n//                     />\n//                     <label htmlFor='name' className='form-label'>Name</label>\n//                 </div>\n//                 <div className='form-group'>\n//                     <input\n//                         type='email'\n//                         id='email'\n//                         placeholder=''\n//                         value={email}\n//                         onChange={(e) => setEmail(e.target.value)}\n//                         required\n//                     />\n//                     <label htmlFor='email' className='form-label'>Email</label>\n//                 </div>\n\n//                 <div className='form-group-container'>\n//                     <div className='form-group'>\n//                         <input\n//                             type='password'\n//                             id='password'\n//                             placeholder=''\n//                             value={password}\n//                             onChange={(e) => setPassword(e.target.value)}\n//                             required\n//                         />\n//                         <label htmlFor='password' className='form-label'>Password</label>\n//                     </div>\n\n//                     <div className='form-group'>\n//                         <input\n//                             type='password'\n//                             id='confirmPassword'\n//                             placeholder=''\n//                             value={confirmPassword}\n//                             onChange={(e) => setConfirmPassword(e.target.value)}\n//                             required\n//                         />\n//                         <label htmlFor='confirmPassword' className='form-label'>Confirm Password</label>\n//                     </div>\n//                 </div>\n\n//                 <button className='signup-button' type='submit'>Sign up</button>\n//                 <span>Already have an account? <Link to=\"/login\" className='pages-link'>Login</Link></span>\n//             </form>\n\n//             <span className=\"terms\">\n//                 By creating an account, you agree to our \n//                 <Link to=\"/terms\" className='terms-pages-link'> Terms of Use</Link>, \n//                 <Link to=\"/privacy-policy\" className='terms-pages-link'> Privacy Policy</Link>.\n//             </span>\n\n//             <ToastContainer />\n//             {loading && (\n//                 <div className={`loading-overlay ${fadeOut ? 'hidden' : ''}`}>\n//                     <img src='/apple-loading.gif' alt='Loading...' className='loading-spinner' />\n//                 </div>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default Signup;\n\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { handleSuccess, handleError, ToastContainer } from '../utils/ReactToastify';\nimport useAuthStore from '../store/useAuthStore';\nimport '../utils/ReactToastifyCustom.css';\nimport '../utils/loading.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Signup() {\n  _s();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const navigate = useNavigate();\n  const {\n    signup,\n    loading,\n    error\n  } = useAuthStore();\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (password !== confirmPassword) {\n      handleError('Passwords do not match');\n      return;\n    }\n    await signup(name, email, password);\n    if (!error) {\n      handleSuccess('Signup successful!');\n      navigate('/verify-code');\n    } else {\n      handleError(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"signup-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sign up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Sign up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-overlay\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 350,\n    columnNumber: 9\n  }, this);\n}\n_s(Signup, \"aGCWnrWfuyJHdUwXvuwU1ptgQtk=\", false, function () {\n  return [useNavigate, useAuthStore];\n});\n_c = Signup;\nexport default Signup;\nvar _c;\n$RefreshReg$(_c, \"Signup\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","handleSuccess","handleError","ToastContainer","useAuthStore","jsxDEV","_jsxDEV","Signup","_s","name","setName","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","navigate","signup","loading","error","handleSubmit","event","preventDefault","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","_c","$RefreshReg$"],"sources":["C:/Users/thesh/Desktop/Authentication/frontend/src/pages/Signup.js"],"sourcesContent":["// // //Signup.js\r\n\r\n// // import React, { useEffect, useState } from 'react';\r\n// // import { useNavigate, Link } from 'react-router-dom';\r\n// // import { handleSuccess, handleError, ToastContainer } from '../utils/ReactToastify';\r\n// // import '../utils/ReactToastifyCustom.css';\r\n// // import '../utils/style/animations.css';\r\n// // import '../utils/loading.css';\r\n\r\n// // function Signup() {\r\n// //     const [name, setName] = useState('');\r\n// //     const [email, setEmail] = useState('');\r\n// //     const [password, setPassword] = useState('');\r\n// //     const [confirmPassword, setConfirmPassword] = useState('');\r\n// //     const [loading, setLoading] = useState(false);\r\n// //     const [fadeIn, setFadeIn] = useState(true);\r\n// //     const [fadeOut, setFadeOut] = useState(false);\r\n// //     const navigate = useNavigate();\r\n\r\n// //     useEffect(() => {\r\n// //         const timeoutId = setTimeout(() => {\r\n// //             setFadeIn(false);\r\n// //         }, 500);\r\n// //         return () => clearTimeout(timeoutId);\r\n// //     }, []);\r\n\r\n// //     const handleSubmit = async (event) => {\r\n// //         event.preventDefault();\r\n\r\n// //         if (password !== confirmPassword) {\r\n// //             handleError('Passwords do not match');\r\n// //             return;\r\n// //         }\r\n\r\n\r\n// //         setLoading(true);\r\n// //         setFadeOut(false);\r\n\r\n// //         setTimeout(async () => {\r\n// //             setFadeOut(true);\r\n// //             setTimeout(async () => {\r\n// //                 try {\r\n// //                     const response = await fetch(\"http://localhost:8080/auth/signup\", {\r\n// //                         method: 'POST',\r\n// //                         headers: {\r\n// //                             'Content-Type': 'application/json',\r\n// //                         },\r\n// //                         body: JSON.stringify({ name, email, password }),\r\n// //                     });\r\n// //                     const result = await response.json();\r\n// //                     if (response.ok) {\r\n// //                         handleSuccess('Signup successful!');\r\n// //                         setTimeout(() => navigate('/login'), 500);\r\n// //                     } else {\r\n// //                         handleError(result.message || 'An error occurred during signup. Please try again.');\r\n// //                     }\r\n// //                 } catch (err) {\r\n// //                     handleError('Network error. Please check your connection and try again.');\r\n// //                 } finally {\r\n// //                     setLoading(false);\r\n// //                 }\r\n// //             }, 250);\r\n// //         }, 1000);\r\n// //     };\r\n\r\n// //     return (\r\n// //         <div className={`signup-container container ${fadeIn ? 'fade-in' : ''}`}>\r\n// //             <img src='/app-icon.ico' alt='App Icon' className='app-icon' />\r\n// //             <h1>Sign up</h1>\r\n// //             <form onSubmit={handleSubmit}>\r\n// //                 <div className='form-group'>\r\n// //                     <input\r\n// //                         type='text'\r\n// //                         id='name'\r\n// //                         placeholder=''\r\n// //                         value={name}\r\n// //                         onChange={(e) => setName(e.target.value)}\r\n// //                         required\r\n// //                     />\r\n// //                     <label htmlFor='name' className='form-label'>Name</label>\r\n// //                 </div>\r\n// //                 <div className='form-group'>\r\n// //                     <input\r\n// //                         type='email'\r\n// //                         id='email'\r\n// //                         placeholder=''\r\n// //                         value={email}\r\n// //                         onChange={(e) => setEmail(e.target.value)}\r\n// //                         required\r\n// //                     />\r\n// //                     <label htmlFor='email' className='form-label'>Email</label>\r\n// //                 </div>\r\n\r\n// //                 <div className='form-group-container'>\r\n// //                     <div className='form-group'>\r\n// //                         <input\r\n// //                             type='password'\r\n// //                             id='password'\r\n// //                             placeholder=''\r\n// //                             value={password}\r\n// //                             onChange={(e) => setPassword(e.target.value)}\r\n// //                             required\r\n// //                         />\r\n// //                         <label htmlFor='password' className='form-label'>Password</label>\r\n// //                     </div>\r\n\r\n// //                     <div className='form-group'>\r\n// //                         <input\r\n// //                             type='password'\r\n// //                             id='confirmPassword'\r\n// //                             placeholder=''\r\n// //                             value={confirmPassword}\r\n// //                             onChange={(e) => setConfirmPassword(e.target.value)}\r\n// //                             required\r\n// //                         />\r\n// //                         <label htmlFor='confirmPassword' className='form-label'>Confirm Password</label>\r\n// //                     </div>\r\n// //                 </div>\r\n\r\n// //                 <button className='signup-button' type='submit'>Sign up</button>\r\n// //                 <span>Already have an account? <Link to=\"/login\" className='pages-link'>Login</Link></span>\r\n// //             </form>\r\n\r\n// //             <span className=\"terms\">\r\n// //                 By creating an account, you agree to our \r\n// //                 <Link to=\"/terms\" className='terms-pages-link'> Terms of Use</Link>, \r\n// //                 <Link to=\"/privacy-policy\" className='terms-pages-link'> Privacy Policy</Link>.\r\n// //             </span>\r\n\r\n// //             <ToastContainer />\r\n// //             {loading && (\r\n// //                 <div className={`loading-overlay ${fadeOut ? 'hidden' : ''}`}>\r\n// //                     <img src='/apple-loading.gif' alt='Loading...' className='loading-spinner' />\r\n// //                 </div>\r\n// //             )}\r\n// //         </div>\r\n// //     );\r\n// // }\r\n\r\n// // export default Signup;\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useNavigate, Link } from 'react-router-dom';\r\n// import { handleSuccess, handleError, ToastContainer } from '../utils/ReactToastify';\r\n// import '../utils/ReactToastifyCustom.css';\r\n// import '../utils/loading.css';\r\n// import '../utils/style/animations.css';\r\n\r\n// function Signup() {\r\n//     const [name, setName] = useState('');\r\n//     const [email, setEmail] = useState('');\r\n//     const [password, setPassword] = useState('');\r\n//     const [confirmPassword, setConfirmPassword] = useState('');\r\n//     const [loading, setLoading] = useState(false);\r\n//     const [fadeIn, setFadeIn] = useState(true);\r\n//     const [fadeOut, setFadeOut] = useState(false);\r\n//     const navigate = useNavigate();\r\n\r\n//     useEffect(() => {\r\n//         const timeoutId = setTimeout(() => {\r\n//             setFadeIn(false);\r\n//         }, 500);\r\n//         return () => clearTimeout(timeoutId);\r\n//     }, []);\r\n\r\n//     useEffect(() => {\r\n//         const refreshToken = localStorage.getItem('refreshToken');\r\n//         if (refreshToken) {\r\n//             // Attempt auto-login using the refresh token\r\n//             (async () => {\r\n//                 try {\r\n//                     const response = await fetch(\"http://localhost:8080/auth/refresh-token\", {\r\n//                         method: 'POST',\r\n//                         headers: {\r\n//                             'Content-Type': 'application/json',\r\n//                         },\r\n//                         body: JSON.stringify({ refreshToken }),\r\n//                     });\r\n//                     const result = await response.json();\r\n//                     if (response.ok) {\r\n//                         localStorage.setItem('token', result.accessToken);\r\n//                         localStorage.setItem('refreshToken', result.refreshToken);\r\n//                         localStorage.setItem('loggedInUser', JSON.stringify(result));\r\n//                         handleSuccess('Auto-login successful!');\r\n//                         navigate('/home');\r\n//                     } else {\r\n//                         handleError(result.message || 'Failed to auto-login.');\r\n//                     }\r\n//                 } catch (err) {\r\n//                     handleError('Network error. Please check your connection and try again.');\r\n//                 }\r\n//             })();\r\n//         }\r\n//     }, [navigate]);\r\n\r\n//     const handleSubmit = async (event) => {\r\n//         event.preventDefault();\r\n\r\n//         if (password !== confirmPassword) {\r\n//             handleError('Passwords do not match');\r\n//             return;\r\n//         }\r\n\r\n//         setLoading(true);\r\n//         setFadeOut(false);\r\n\r\n//         setTimeout(async () => {\r\n//             setFadeOut(true);\r\n//             setTimeout(async () => {\r\n//                 try {\r\n//                     const response = await fetch(\"http://localhost:8080/auth/signup\", {\r\n//                         method: 'POST',\r\n//                         headers: {\r\n//                             'Content-Type': 'application/json',\r\n//                         },\r\n//                         body: JSON.stringify({ name, email, password }),\r\n//                     });\r\n//                     const result = await response.json();\r\n//                     if (response.ok) {\r\n//                         localStorage.setItem('token', result.accessToken);\r\n//                         localStorage.setItem('refreshToken', result.refreshToken);\r\n//                         localStorage.setItem('loggedInUser', JSON.stringify(result));\r\n//                         handleSuccess('Signup successful!');\r\n//                         setTimeout(() => navigate('/login'), 500);\r\n//                     } else {\r\n//                         handleError(result.message || 'An error occurred during signup. Please try again.');\r\n//                     }\r\n//                 } catch (err) {\r\n//                     handleError('Network error. Please check your connection and try again.');\r\n//                 } finally {\r\n//                     setLoading(false);\r\n//                 }\r\n//             }, 250);\r\n//         }, 1000);\r\n//     };\r\n\r\n//     return (\r\n//         <div className={`signup-container container ${fadeIn ? 'fade-in' : ''}`}>\r\n//             <img src='/app-icon.ico' alt='App Icon' className='app-icon' />\r\n//             <h1>Sign up</h1>\r\n//             <form onSubmit={handleSubmit}>\r\n//                 <div className='form-group'>\r\n//                     <input\r\n//                         type='text'\r\n//                         id='name'\r\n//                         placeholder=''\r\n//                         value={name}\r\n//                         onChange={(e) => setName(e.target.value)}\r\n//                         required\r\n//                     />\r\n//                     <label htmlFor='name' className='form-label'>Name</label>\r\n//                 </div>\r\n//                 <div className='form-group'>\r\n//                     <input\r\n//                         type='email'\r\n//                         id='email'\r\n//                         placeholder=''\r\n//                         value={email}\r\n//                         onChange={(e) => setEmail(e.target.value)}\r\n//                         required\r\n//                     />\r\n//                     <label htmlFor='email' className='form-label'>Email</label>\r\n//                 </div>\r\n\r\n//                 <div className='form-group-container'>\r\n//                     <div className='form-group'>\r\n//                         <input\r\n//                             type='password'\r\n//                             id='password'\r\n//                             placeholder=''\r\n//                             value={password}\r\n//                             onChange={(e) => setPassword(e.target.value)}\r\n//                             required\r\n//                         />\r\n//                         <label htmlFor='password' className='form-label'>Password</label>\r\n//                     </div>\r\n\r\n//                     <div className='form-group'>\r\n//                         <input\r\n//                             type='password'\r\n//                             id='confirmPassword'\r\n//                             placeholder=''\r\n//                             value={confirmPassword}\r\n//                             onChange={(e) => setConfirmPassword(e.target.value)}\r\n//                             required\r\n//                         />\r\n//                         <label htmlFor='confirmPassword' className='form-label'>Confirm Password</label>\r\n//                     </div>\r\n//                 </div>\r\n\r\n//                 <button className='signup-button' type='submit'>Sign up</button>\r\n//                 <span>Already have an account? <Link to=\"/login\" className='pages-link'>Login</Link></span>\r\n//             </form>\r\n\r\n//             <span className=\"terms\">\r\n//                 By creating an account, you agree to our \r\n//                 <Link to=\"/terms\" className='terms-pages-link'> Terms of Use</Link>, \r\n//                 <Link to=\"/privacy-policy\" className='terms-pages-link'> Privacy Policy</Link>.\r\n//             </span>\r\n\r\n//             <ToastContainer />\r\n//             {loading && (\r\n//                 <div className={`loading-overlay ${fadeOut ? 'hidden' : ''}`}>\r\n//                     <img src='/apple-loading.gif' alt='Loading...' className='loading-spinner' />\r\n//                 </div>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default Signup;\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { handleSuccess, handleError, ToastContainer } from '../utils/ReactToastify';\r\nimport useAuthStore from '../store/useAuthStore';\r\nimport '../utils/ReactToastifyCustom.css';\r\nimport '../utils/loading.css';\r\n\r\nfunction Signup() {\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const navigate = useNavigate();\r\n    const { signup, loading, error } = useAuthStore();\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        if (password !== confirmPassword) {\r\n            handleError('Passwords do not match');\r\n            return;\r\n        }\r\n        await signup(name, email, password);\r\n        if (!error) {\r\n            handleSuccess('Signup successful!');\r\n            navigate('/verify-code');\r\n        } else {\r\n            handleError(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"signup-container\">\r\n            <h1>Sign up</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                {/* Form Fields */}\r\n                <button type=\"submit\">Sign up</button>\r\n            </form>\r\n            <ToastContainer />\r\n            {loading && <div className=\"loading-overlay\">Loading...</div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Signup;\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAOA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,aAAa,EAAEC,WAAW,EAAEC,cAAc,QAAQ,wBAAwB;AACnF,OAAOC,YAAY,MAAM,uBAAuB;AAChD,OAAO,kCAAkC;AACzC,OAAO,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EACd,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACgB,eAAe,EAAEC,kBAAkB,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAMkB,QAAQ,GAAGjB,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEkB,MAAM;IAAEC,OAAO;IAAEC;EAAM,CAAC,GAAGhB,YAAY,CAAC,CAAC;EAEjD,MAAMiB,YAAY,GAAG,MAAOC,KAAK,IAAK;IAClCA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtB,IAAIV,QAAQ,KAAKE,eAAe,EAAE;MAC9Bb,WAAW,CAAC,wBAAwB,CAAC;MACrC;IACJ;IACA,MAAMgB,MAAM,CAACT,IAAI,EAAEE,KAAK,EAAEE,QAAQ,CAAC;IACnC,IAAI,CAACO,KAAK,EAAE;MACRnB,aAAa,CAAC,oBAAoB,CAAC;MACnCgB,QAAQ,CAAC,cAAc,CAAC;IAC5B,CAAC,MAAM;MACHf,WAAW,CAACkB,KAAK,CAAC;IACtB;EACJ,CAAC;EAED,oBACId,OAAA;IAAKkB,SAAS,EAAC,kBAAkB;IAAAC,QAAA,gBAC7BnB,OAAA;MAAAmB,QAAA,EAAI;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChBvB,OAAA;MAAMwB,QAAQ,EAAET,YAAa;MAAAI,QAAA,eAEzBnB,OAAA;QAAQyB,IAAI,EAAC,QAAQ;QAAAN,QAAA,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC,CAAC,eACPvB,OAAA,CAACH,cAAc;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACjBV,OAAO,iBAAIb,OAAA;MAAKkB,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5D,CAAC;AAEd;AAACrB,EAAA,CAlCQD,MAAM;EAAA,QAKMP,WAAW,EACOI,YAAY;AAAA;AAAA4B,EAAA,GAN1CzB,MAAM;AAoCf,eAAeA,MAAM;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}