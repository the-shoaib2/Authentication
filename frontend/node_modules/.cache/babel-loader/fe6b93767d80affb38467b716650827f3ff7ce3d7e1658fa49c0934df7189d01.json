{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nexport async function refreshToken() {\n  try {\n    const response = await fetch('http://localhost:8080/auth/refresh', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        refreshToken: localStorage.getItem('refreshToken')\n      })\n    });\n    const data = await response.json();\n    if (response.ok) {\n      localStorage.setItem('token', data.accessToken);\n      return true;\n    }\n    return false;\n  } catch (error) {\n    console.error('Error refreshing token:', error);\n    return false;\n  }\n}\nexport async function checkAuthentication() {\n  const token = localStorage.getItem('token');\n  if (!token) return false;\n  try {\n    const response = await fetch('http://localhost:8080/auth/verify', {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      return await refreshToken();\n    }\n    return true;\n  } catch (error) {\n    console.error('Error verifying token:', error);\n    return false;\n  }\n}\nfunction RefreshHandler({\n  setIsAuthenticated\n}) {\n  _s();\n  const location = useLocation();\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Clear all toasts when the location changes\n    // toast.dismiss();\n\n    if (localStorage.getItem('token')) {\n      setIsAuthenticated(true);\n      if (location.pathname === '/' || location.pathname === '/login' || location.pathname === '/signup') {\n        navigate('/home', {\n          replace: false\n        });\n      }\n    }\n  }, [location, navigate, setIsAuthenticated]);\n  return null;\n}\n_s(RefreshHandler, \"fPjCxODVr6jVvib6o2c9VLE4s84=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = RefreshHandler;\nexport default RefreshHandler;\nvar _c;\n$RefreshReg$(_c, \"RefreshHandler\");","map":{"version":3,"names":["useEffect","useLocation","useNavigate","refreshToken","response","fetch","method","headers","body","JSON","stringify","localStorage","getItem","data","json","ok","setItem","accessToken","error","console","checkAuthentication","token","RefreshHandler","setIsAuthenticated","_s","location","navigate","pathname","replace","_c","$RefreshReg$"],"sources":["C:/Users/thesh/Downloads/Authentication/frontend/src/utils/RefreshHandler.js"],"sourcesContent":["import { useEffect } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\n\r\nexport async function refreshToken() {\r\n  try {\r\n    const response = await fetch('http://localhost:8080/auth/refresh', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        refreshToken: localStorage.getItem('refreshToken'),\r\n      }),\r\n    });\r\n    const data = await response.json();\r\n    if (response.ok) {\r\n      localStorage.setItem('token', data.accessToken);\r\n      return true;\r\n    }\r\n    return false;\r\n  } catch (error) {\r\n    console.error('Error refreshing token:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function checkAuthentication() {\r\n  const token = localStorage.getItem('token');\r\n  if (!token) return false;\r\n  \r\n  try {\r\n    const response = await fetch('http://localhost:8080/auth/verify', {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    });\r\n    if (!response.ok) {\r\n      return await refreshToken();\r\n    }\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error verifying token:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction RefreshHandler({ setIsAuthenticated }) {\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        // Clear all toasts when the location changes\r\n        // toast.dismiss();\r\n        \r\n        if (localStorage.getItem('token')) {\r\n            setIsAuthenticated(true);\r\n            if (location.pathname === '/' ||\r\n                location.pathname === '/login' ||\r\n                location.pathname === '/signup'\r\n            ) {\r\n                navigate('/home', { replace: false });\r\n            }\r\n        }\r\n    }, [location, navigate, setIsAuthenticated]);\r\n\r\n    return null;\r\n}\r\n\r\nexport default RefreshHandler;\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAE3D,OAAO,eAAeC,YAAYA,CAAA,EAAG;EACnC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;MACjEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBP,YAAY,EAAEQ,YAAY,CAACC,OAAO,CAAC,cAAc;MACnD,CAAC;IACH,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClC,IAAIV,QAAQ,CAACW,EAAE,EAAE;MACfJ,YAAY,CAACK,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,WAAW,CAAC;MAC/C,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,OAAO,KAAK;EACd;AACF;AAEA,OAAO,eAAeE,mBAAmBA,CAAA,EAAG;EAC1C,MAAMC,KAAK,GAAGV,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAI,CAACS,KAAK,EAAE,OAAO,KAAK;EAExB,IAAI;IACF,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,EAAE;MAChEE,OAAO,EAAE;QACP,eAAe,EAAE,UAAUc,KAAK;MAClC;IACF,CAAC,CAAC;IACF,IAAI,CAACjB,QAAQ,CAACW,EAAE,EAAE;MAChB,OAAO,MAAMZ,YAAY,CAAC,CAAC;IAC7B;IACA,OAAO,IAAI;EACb,CAAC,CAAC,OAAOe,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,KAAK;EACd;AACF;AAEA,SAASI,cAAcA,CAAC;EAAEC;AAAmB,CAAC,EAAE;EAAAC,EAAA;EAC5C,MAAMC,QAAQ,GAAGxB,WAAW,CAAC,CAAC;EAC9B,MAAMyB,QAAQ,GAAGxB,WAAW,CAAC,CAAC;EAE9BF,SAAS,CAAC,MAAM;IACZ;IACA;;IAEA,IAAIW,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,EAAE;MAC/BW,kBAAkB,CAAC,IAAI,CAAC;MACxB,IAAIE,QAAQ,CAACE,QAAQ,KAAK,GAAG,IACzBF,QAAQ,CAACE,QAAQ,KAAK,QAAQ,IAC9BF,QAAQ,CAACE,QAAQ,KAAK,SAAS,EACjC;QACED,QAAQ,CAAC,OAAO,EAAE;UAAEE,OAAO,EAAE;QAAM,CAAC,CAAC;MACzC;IACJ;EACJ,CAAC,EAAE,CAACH,QAAQ,EAAEC,QAAQ,EAAEH,kBAAkB,CAAC,CAAC;EAE5C,OAAO,IAAI;AACf;AAACC,EAAA,CApBQF,cAAc;EAAA,QACFrB,WAAW,EACXC,WAAW;AAAA;AAAA2B,EAAA,GAFvBP,cAAc;AAsBvB,eAAeA,cAAc;AAAC,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}