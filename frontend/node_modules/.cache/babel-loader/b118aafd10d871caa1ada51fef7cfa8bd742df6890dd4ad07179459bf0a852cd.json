{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thesh\\\\Desktop\\\\Authentication\\\\frontend\\\\src\\\\pages\\\\VerifyCodeAccount.jsx\",\n  _s = $RefreshSig$();\n// // frontend/src/pages/VerifyCodeAccount.jsx\n\n// import React, { useState, useEffect } from 'react';\n// import { useNavigate, useLocation } from 'react-router-dom';\n// import { handleSuccess, handleError, ToastContainer } from '../utils/ReactToastify';\n// import '../utils/ReactToastifyCustom.css';\n// import '../utils/style/SentOtpForgotPassword.css';\n// import OtpInput from '../Services/OtpInput';\n\n// function VerifyCodeConfirmAccount() {\n//     const [otp, setOtp] = useState('');\n//     const [timer, setTimer] = useState(60);\n//     const [isResendEnabled, setIsResendEnabled] = useState(false);\n//     const [isComplete, setIsComplete] = useState(false);\n//     // const [isVerified, setIsVerified] = useState(false); // Track OTP verification status\n//     const [hasCodeBeenSent, setHasCodeBeenSent] = useState(false); // Track if code has been sent\n//     const { state } = useLocation(); // Get email from location state\n//     const navigate = useNavigate();\n\n//     // Handle countdown timer\n//     useEffect(() => {\n//         const countdown = timer > 0 ? setInterval(() => {\n//             setTimer((prev) => prev - 1);\n//         }, 1000) : null;\n\n//         if (timer === 0) {\n//             setIsResendEnabled(true);\n//         }\n\n//         return () => {\n//             if (countdown) clearInterval(countdown);\n//         };\n//     }, [timer]);\n\n//     // // Auto-login if OTP is verified\n//     // useEffect(() => {\n//     //     if (isVerified) {\n//     //         const refreshToken = localStorage.getItem('refreshToken');\n//     //         if (refreshToken) {\n//     //             (async () => {\n//     //                 try {\n//     //                     const response = await fetch(\"http://localhost:8080/auth/refresh-token\", {\n//     //                         method: 'POST',\n//     //                         headers: {\n//     //                             'Content-Type': 'application/json',\n//     //                         },\n//     //                         body: JSON.stringify({ refreshToken }),\n//     //                     });\n//     //                     const result = await response.json();\n//     //                     if (response.ok) {\n//     //                         localStorage.setItem('token', result.accessToken);\n//     //                         localStorage.setItem('refreshToken', result.refreshToken);\n//     //                         localStorage.setItem('loggedInUser', JSON.stringify(result));\n//     //                         handleSuccess('Auto-login successful!');\n//     //                         navigate('/home');\n//     //                     } else {\n//     //                         handleError(result.message || 'Failed to auto-login.');\n//     //                     }\n//     //                 } catch (err) {\n//     //                     handleError('Network error. Please check your connection and try again.');\n//     //                 }\n//     //             })();\n//     //         }\n//     //     }\n//     // }, [isVerified, navigate]);\n\n//     const handleSubmit = async (event) => {\n//         event.preventDefault();\n//         try {\n//             const token = localStorage.getItem('token'); // Get the token from localStorage\n//             const response = await fetch('http://localhost:8080/auth/verify-email', {\n//                 method: 'POST',\n//                 headers: { \n//                     'Content-Type': 'application/json',\n//                     'Authorization': `Bearer ${token}` // Add the token to the Authorization header\n//                 },\n//                 body: JSON.stringify({ email: state.email, code: otp }),\n//             });\n\n//             const result = await response.json();\n\n//             if (response.ok) {\n//                 handleSuccess(result.message);\n//             } else {\n//                 handleError(result.message);\n//             }\n//         } catch (err) {\n//             handleError('Network error. Please check your connection and try again.');\n//         }\n//     };\n\n//     const handleSendOtp = async () => {\n//         try {\n//             setHasCodeBeenSent(true);\n//             setIsResendEnabled(false);\n//             setTimer(60); // Reset timer\n//             const token = localStorage.getItem('token'); // Get the token from localStorage\n//             const response = await fetch('http://localhost:8080/auth/verify-email', {\n//                 method: 'POST',\n//                 headers: { \n//                     'Content-Type': 'application/json',\n//                     'Authorization': `Bearer ${token}` // Add the token to the Authorization header\n//                 },\n//                 body: JSON.stringify({ email: state.email }),\n//             });\n\n//             const result = await response.json();\n\n//             if (response.ok) {\n//                 handleSuccess(result.message);\n//             } else {\n//                 handleError(result.message);\n//             }\n//         } catch (err) {\n//             handleError('Failed to send OTP. Please try again.');\n//         }\n//     };\n\n//     const handleResendOtp = async () => {\n//         try {\n//             setIsResendEnabled(false);\n//             setTimer(60); // Reset timer\n//             const token = localStorage.getItem('token'); // Get the token from localStorage\n//             const response = await fetch('http://localhost:8080/auth/verify-email', {\n//                 method: 'POST',\n//                 headers: { \n//                     'Content-Type': 'application/json',\n//                     'Authorization': `Bearer ${token}` // Add the token to the Authorization header\n//                 },\n//                 body: JSON.stringify({ email: state.email }),\n//             });\n\n//             const result = await response.json();\n\n//             if (response.ok) {\n//                 handleSuccess(result.message);\n//             } else {\n//                 handleError(result.message);\n//             }\n//         } catch (err) {\n//             handleError('Failed to resend OTP. Please try again.');\n//         }\n//     };\n\n//     return (\n//         <div className=\"otp-wrapper\">\n//             <div>\n//                 <img src='/app-icon.ico' alt='App Icon' className='app-icon' />\n//             </div>\n//             <h1 className=\"otp-title\">Verification Code</h1>\n//             <div className=\"otp-timer\">\n//                 {hasCodeBeenSent ? (\n//                     <p>We've sent a verification code to your registered email address.</p>\n//                 ) : (\n//                     <p>Click the button to send the verification code to your email.</p>\n//                 )}\n//                 <div className=\"timer\">\n//                     <p>Time Remaining: {timer} s</p>\n//                 </div>\n//             </div>\n//             <form onSubmit={handleSubmit}>\n//                 {!hasCodeBeenSent ? (\n//                     <button\n//                         type=\"button\"\n//                         className=\"otp-btn send\"\n//                         onClick={handleSendOtp}\n//                     >\n//                         Send Code\n//                     </button>\n//                 ) : (\n//                     <OtpInput\n//                         length={6}\n//                         onOtpSubmit={(otp) => setOtp(otp)}\n//                         onOtpComplete={(complete) => setIsComplete(complete)}\n//                     />\n//                 )}\n//                 <div className=\"otp-buttons\">\n//                     {timer === 0 && isResendEnabled ? (\n//                         <>\n//                             <div className=\"otp-message\">\n//                                 <p>Didn't receive the code?</p>\n//                             </div>\n//                             <button\n//                                 type=\"button\"\n//                                 className=\"otp-btn resend\"\n//                                 onClick={handleResendOtp}\n//                             >\n//                                 Resend Code\n//                             </button>\n//                         </>\n//                     ) : hasCodeBeenSent ? (\n//                         <>\n//                             <div className=\"otp-message\">\n//                                 <br />\n//                             </div>\n//                             <button\n//                                 type=\"submit\"\n//                                 className={`otp-btn verify ${isComplete ? 'active' : ''}`}\n//                                 disabled={!isComplete}\n//                             >\n//                                 Verify Code\n//                             </button>\n//                         </>\n//                     ) : null}\n//                 </div>\n//             </form>\n//             <ToastContainer />\n//         </div>\n//     );\n// }\n\n// export default VerifyCodeConfirmAccount;\n\n// VerifyCodeConfirmAccount.jsx\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { handleSuccess, handleError, ToastContainer } from '../utils/ReactToastify';\nimport '../utils/ReactToastifyCustom.css';\nimport '../utils/style/SentOtpForgotPassword.css';\nimport OtpInput from '../Services/OtpInput';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction VerifyCodeConfirmAccount() {\n  _s();\n  const [otp, setOtp] = useState('');\n  const [timer, setTimer] = useState(0);\n  const [isResendEnabled, setIsResendEnabled] = useState(false);\n  const [isComplete, setIsComplete] = useState(false);\n  const [hasCodeBeenSent, setHasCodeBeenSent] = useState(false);\n  const {\n    state\n  } = useLocation(); // Get email from location state\n  const navigate = useNavigate();\n\n  // Handle countdown timer\n  useEffect(() => {\n    if (timer > 0) {\n      const countdown = setInterval(() => {\n        setTimer(prev => prev - 1);\n      }, 1000);\n      return () => clearInterval(countdown);\n    } else {\n      setIsResendEnabled(true);\n    }\n  }, [timer]);\n  const handleSubmit = async event => {\n    event.preventDefault();\n    try {\n      const response = await fetch('http://localhost:8080/auth/verify-email', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: state.email,\n          code: otp\n        })\n      });\n      const result = await response.json();\n      if (response.ok) {\n        handleSuccess(result.message);\n        // Automatically log in after successful verification\n        const loginResponse = await fetch(\"http://localhost:8080/auth/login\", {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email: state.email,\n            password: \"yourPassword\"\n          }) // Use appropriate password\n        });\n        const loginResult = await loginResponse.json();\n        if (loginResponse.ok) {\n          localStorage.setItem('token', loginResult.accessToken);\n          localStorage.setItem('refreshToken', loginResult.refreshToken);\n          localStorage.setItem('loggedInUser', JSON.stringify(loginResult));\n          navigate('/home');\n        } else {\n          handleError(loginResult.message || 'Login failed.');\n        }\n      } else {\n        handleError(result.message);\n      }\n    } catch (err) {\n      handleError('Network error. Please check your connection and try again.');\n    }\n  };\n  const handleSendOtp = async () => {\n    try {\n      setHasCodeBeenSent(true);\n      setIsResendEnabled(false);\n      setTimer(60); // Start timer when sending the code\n      const response = await fetch('http://localhost:8080/auth/verify-email', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: state.email\n        })\n      });\n      const result = await response.json();\n      if (response.ok) {\n        handleSuccess(result.message);\n      } else {\n        handleError(result.message);\n      }\n    } catch (err) {\n      handleError('Failed to send OTP. Please try again.');\n    }\n  };\n  const handleResendOtp = async () => {\n    try {\n      setIsResendEnabled(false);\n      setTimer(60); // Reset timer when resending the code\n      const response = await fetch('http://localhost:8080/auth/verify-email', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: state.email\n        })\n      });\n      const result = await response.json();\n      if (response.ok) {\n        handleSuccess(result.message);\n      } else {\n        handleError(result.message);\n      }\n    } catch (err) {\n      handleError('Failed to resend OTP. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"otp-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/app-icon.ico\",\n        alt: \"App Icon\",\n        className: \"app-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"otp-title\",\n      children: \"Verification Code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"otp-timer\",\n      children: [hasCodeBeenSent ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"We've sent a verification code to your registered email address.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Click the button to send the verification code to your email.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Time Remaining: \", timer, \" s\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"otp-buttons\",\n        children: !hasCodeBeenSent ? /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"otp-btn send\",\n          onClick: handleSendOtp,\n          children: \"Send Code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 25\n        }, this) : timer === 0 && isResendEnabled ? /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"otp-btn resend\",\n          onClick: handleResendOtp,\n          children: \"Resend Code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 25\n        }, this) : hasCodeBeenSent && timer > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(OtpInput, {\n            length: 6,\n            onOtpSubmit: otp => setOtp(otp),\n            onOtpComplete: complete => setIsComplete(complete)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: `otp-btn verify ${isComplete ? 'active' : ''}`,\n            disabled: !isComplete,\n            children: \"Verify Code\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 339,\n    columnNumber: 9\n  }, this);\n}\n_s(VerifyCodeConfirmAccount, \"iQBc3Qw1IpFqe2YOiKId37EHR1g=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = VerifyCodeConfirmAccount;\nexport default VerifyCodeConfirmAccount;\nvar _c;\n$RefreshReg$(_c, \"VerifyCodeConfirmAccount\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useLocation","handleSuccess","handleError","ToastContainer","OtpInput","jsxDEV","_jsxDEV","Fragment","_Fragment","VerifyCodeConfirmAccount","_s","otp","setOtp","timer","setTimer","isResendEnabled","setIsResendEnabled","isComplete","setIsComplete","hasCodeBeenSent","setHasCodeBeenSent","state","navigate","countdown","setInterval","prev","clearInterval","handleSubmit","event","preventDefault","response","fetch","method","headers","body","JSON","stringify","email","code","result","json","ok","message","loginResponse","password","loginResult","localStorage","setItem","accessToken","refreshToken","err","handleSendOtp","handleResendOtp","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onClick","length","onOtpSubmit","onOtpComplete","complete","disabled","_c","$RefreshReg$"],"sources":["C:/Users/thesh/Desktop/Authentication/frontend/src/pages/VerifyCodeAccount.jsx"],"sourcesContent":["// // frontend/src/pages/VerifyCodeAccount.jsx\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useNavigate, useLocation } from 'react-router-dom';\r\n// import { handleSuccess, handleError, ToastContainer } from '../utils/ReactToastify';\r\n// import '../utils/ReactToastifyCustom.css';\r\n// import '../utils/style/SentOtpForgotPassword.css';\r\n// import OtpInput from '../Services/OtpInput';\r\n\r\n// function VerifyCodeConfirmAccount() {\r\n//     const [otp, setOtp] = useState('');\r\n//     const [timer, setTimer] = useState(60);\r\n//     const [isResendEnabled, setIsResendEnabled] = useState(false);\r\n//     const [isComplete, setIsComplete] = useState(false);\r\n//     // const [isVerified, setIsVerified] = useState(false); // Track OTP verification status\r\n//     const [hasCodeBeenSent, setHasCodeBeenSent] = useState(false); // Track if code has been sent\r\n//     const { state } = useLocation(); // Get email from location state\r\n//     const navigate = useNavigate();\r\n\r\n//     // Handle countdown timer\r\n//     useEffect(() => {\r\n//         const countdown = timer > 0 ? setInterval(() => {\r\n//             setTimer((prev) => prev - 1);\r\n//         }, 1000) : null;\r\n\r\n//         if (timer === 0) {\r\n//             setIsResendEnabled(true);\r\n//         }\r\n\r\n//         return () => {\r\n//             if (countdown) clearInterval(countdown);\r\n//         };\r\n//     }, [timer]);\r\n\r\n//     // // Auto-login if OTP is verified\r\n//     // useEffect(() => {\r\n//     //     if (isVerified) {\r\n//     //         const refreshToken = localStorage.getItem('refreshToken');\r\n//     //         if (refreshToken) {\r\n//     //             (async () => {\r\n//     //                 try {\r\n//     //                     const response = await fetch(\"http://localhost:8080/auth/refresh-token\", {\r\n//     //                         method: 'POST',\r\n//     //                         headers: {\r\n//     //                             'Content-Type': 'application/json',\r\n//     //                         },\r\n//     //                         body: JSON.stringify({ refreshToken }),\r\n//     //                     });\r\n//     //                     const result = await response.json();\r\n//     //                     if (response.ok) {\r\n//     //                         localStorage.setItem('token', result.accessToken);\r\n//     //                         localStorage.setItem('refreshToken', result.refreshToken);\r\n//     //                         localStorage.setItem('loggedInUser', JSON.stringify(result));\r\n//     //                         handleSuccess('Auto-login successful!');\r\n//     //                         navigate('/home');\r\n//     //                     } else {\r\n//     //                         handleError(result.message || 'Failed to auto-login.');\r\n//     //                     }\r\n//     //                 } catch (err) {\r\n//     //                     handleError('Network error. Please check your connection and try again.');\r\n//     //                 }\r\n//     //             })();\r\n//     //         }\r\n//     //     }\r\n//     // }, [isVerified, navigate]);\r\n\r\n//     const handleSubmit = async (event) => {\r\n//         event.preventDefault();\r\n//         try {\r\n//             const token = localStorage.getItem('token'); // Get the token from localStorage\r\n//             const response = await fetch('http://localhost:8080/auth/verify-email', {\r\n//                 method: 'POST',\r\n//                 headers: { \r\n//                     'Content-Type': 'application/json',\r\n//                     'Authorization': `Bearer ${token}` // Add the token to the Authorization header\r\n//                 },\r\n//                 body: JSON.stringify({ email: state.email, code: otp }),\r\n//             });\r\n    \r\n//             const result = await response.json();\r\n    \r\n//             if (response.ok) {\r\n//                 handleSuccess(result.message);\r\n//             } else {\r\n//                 handleError(result.message);\r\n//             }\r\n//         } catch (err) {\r\n//             handleError('Network error. Please check your connection and try again.');\r\n//         }\r\n//     };\r\n    \r\n//     const handleSendOtp = async () => {\r\n//         try {\r\n//             setHasCodeBeenSent(true);\r\n//             setIsResendEnabled(false);\r\n//             setTimer(60); // Reset timer\r\n//             const token = localStorage.getItem('token'); // Get the token from localStorage\r\n//             const response = await fetch('http://localhost:8080/auth/verify-email', {\r\n//                 method: 'POST',\r\n//                 headers: { \r\n//                     'Content-Type': 'application/json',\r\n//                     'Authorization': `Bearer ${token}` // Add the token to the Authorization header\r\n//                 },\r\n//                 body: JSON.stringify({ email: state.email }),\r\n//             });\r\n    \r\n//             const result = await response.json();\r\n    \r\n//             if (response.ok) {\r\n//                 handleSuccess(result.message);\r\n//             } else {\r\n//                 handleError(result.message);\r\n//             }\r\n//         } catch (err) {\r\n//             handleError('Failed to send OTP. Please try again.');\r\n//         }\r\n//     };\r\n    \r\n//     const handleResendOtp = async () => {\r\n//         try {\r\n//             setIsResendEnabled(false);\r\n//             setTimer(60); // Reset timer\r\n//             const token = localStorage.getItem('token'); // Get the token from localStorage\r\n//             const response = await fetch('http://localhost:8080/auth/verify-email', {\r\n//                 method: 'POST',\r\n//                 headers: { \r\n//                     'Content-Type': 'application/json',\r\n//                     'Authorization': `Bearer ${token}` // Add the token to the Authorization header\r\n//                 },\r\n//                 body: JSON.stringify({ email: state.email }),\r\n//             });\r\n    \r\n//             const result = await response.json();\r\n    \r\n//             if (response.ok) {\r\n//                 handleSuccess(result.message);\r\n//             } else {\r\n//                 handleError(result.message);\r\n//             }\r\n//         } catch (err) {\r\n//             handleError('Failed to resend OTP. Please try again.');\r\n//         }\r\n//     };\r\n    \r\n\r\n//     return (\r\n//         <div className=\"otp-wrapper\">\r\n//             <div>\r\n//                 <img src='/app-icon.ico' alt='App Icon' className='app-icon' />\r\n//             </div>\r\n//             <h1 className=\"otp-title\">Verification Code</h1>\r\n//             <div className=\"otp-timer\">\r\n//                 {hasCodeBeenSent ? (\r\n//                     <p>We've sent a verification code to your registered email address.</p>\r\n//                 ) : (\r\n//                     <p>Click the button to send the verification code to your email.</p>\r\n//                 )}\r\n//                 <div className=\"timer\">\r\n//                     <p>Time Remaining: {timer} s</p>\r\n//                 </div>\r\n//             </div>\r\n//             <form onSubmit={handleSubmit}>\r\n//                 {!hasCodeBeenSent ? (\r\n//                     <button\r\n//                         type=\"button\"\r\n//                         className=\"otp-btn send\"\r\n//                         onClick={handleSendOtp}\r\n//                     >\r\n//                         Send Code\r\n//                     </button>\r\n//                 ) : (\r\n//                     <OtpInput\r\n//                         length={6}\r\n//                         onOtpSubmit={(otp) => setOtp(otp)}\r\n//                         onOtpComplete={(complete) => setIsComplete(complete)}\r\n//                     />\r\n//                 )}\r\n//                 <div className=\"otp-buttons\">\r\n//                     {timer === 0 && isResendEnabled ? (\r\n//                         <>\r\n//                             <div className=\"otp-message\">\r\n//                                 <p>Didn't receive the code?</p>\r\n//                             </div>\r\n//                             <button\r\n//                                 type=\"button\"\r\n//                                 className=\"otp-btn resend\"\r\n//                                 onClick={handleResendOtp}\r\n//                             >\r\n//                                 Resend Code\r\n//                             </button>\r\n//                         </>\r\n//                     ) : hasCodeBeenSent ? (\r\n//                         <>\r\n//                             <div className=\"otp-message\">\r\n//                                 <br />\r\n//                             </div>\r\n//                             <button\r\n//                                 type=\"submit\"\r\n//                                 className={`otp-btn verify ${isComplete ? 'active' : ''}`}\r\n//                                 disabled={!isComplete}\r\n//                             >\r\n//                                 Verify Code\r\n//                             </button>\r\n//                         </>\r\n//                     ) : null}\r\n//                 </div>\r\n//             </form>\r\n//             <ToastContainer />\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default VerifyCodeConfirmAccount;\r\n\r\n\r\n\r\n\r\n\r\n// VerifyCodeConfirmAccount.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { handleSuccess, handleError, ToastContainer } from '../utils/ReactToastify';\r\nimport '../utils/ReactToastifyCustom.css';\r\nimport '../utils/style/SentOtpForgotPassword.css';\r\nimport OtpInput from '../Services/OtpInput';\r\n\r\nfunction VerifyCodeConfirmAccount() {\r\n    const [otp, setOtp] = useState('');\r\n    const [timer, setTimer] = useState(0);\r\n    const [isResendEnabled, setIsResendEnabled] = useState(false);\r\n    const [isComplete, setIsComplete] = useState(false);\r\n    const [hasCodeBeenSent, setHasCodeBeenSent] = useState(false);\r\n    const { state } = useLocation(); // Get email from location state\r\n    const navigate = useNavigate();\r\n\r\n    // Handle countdown timer\r\n    useEffect(() => {\r\n        if (timer > 0) {\r\n            const countdown = setInterval(() => {\r\n                setTimer((prev) => prev - 1);\r\n            }, 1000);\r\n\r\n            return () => clearInterval(countdown);\r\n        } else {\r\n            setIsResendEnabled(true);\r\n        }\r\n    }, [timer]);\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        try {\r\n            const response = await fetch('http://localhost:8080/auth/verify-email', {\r\n                method: 'POST',\r\n                headers: { \r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ email: state.email, code: otp }),\r\n            });\r\n\r\n            const result = await response.json();\r\n\r\n            if (response.ok) {\r\n                handleSuccess(result.message);\r\n                // Automatically log in after successful verification\r\n                const loginResponse = await fetch(\"http://localhost:8080/auth/login\", {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({ email: state.email, password: \"yourPassword\" }), // Use appropriate password\r\n                });\r\n                const loginResult = await loginResponse.json();\r\n                if (loginResponse.ok) {\r\n                    localStorage.setItem('token', loginResult.accessToken);\r\n                    localStorage.setItem('refreshToken', loginResult.refreshToken);\r\n                    localStorage.setItem('loggedInUser', JSON.stringify(loginResult));\r\n                    navigate('/home');\r\n                } else {\r\n                    handleError(loginResult.message || 'Login failed.');\r\n                }\r\n            } else {\r\n                handleError(result.message);\r\n            }\r\n        } catch (err) {\r\n            handleError('Network error. Please check your connection and try again.');\r\n        }\r\n    };\r\n\r\n    const handleSendOtp = async () => {\r\n        try {\r\n            setHasCodeBeenSent(true);\r\n            setIsResendEnabled(false);\r\n            setTimer(60); // Start timer when sending the code\r\n            const response = await fetch('http://localhost:8080/auth/verify-email', {\r\n                method: 'POST',\r\n                headers: { \r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ email: state.email }),\r\n            });\r\n\r\n            const result = await response.json();\r\n\r\n            if (response.ok) {\r\n                handleSuccess(result.message);\r\n            } else {\r\n                handleError(result.message);\r\n            }\r\n        } catch (err) {\r\n            handleError('Failed to send OTP. Please try again.');\r\n        }\r\n    };\r\n\r\n    const handleResendOtp = async () => {\r\n        try {\r\n            setIsResendEnabled(false);\r\n            setTimer(60); // Reset timer when resending the code\r\n            const response = await fetch('http://localhost:8080/auth/verify-email', {\r\n                method: 'POST',\r\n                headers: { \r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ email: state.email }),\r\n            });\r\n\r\n            const result = await response.json();\r\n\r\n            if (response.ok) {\r\n                handleSuccess(result.message);\r\n            } else {\r\n                handleError(result.message);\r\n            }\r\n        } catch (err) {\r\n            handleError('Failed to resend OTP. Please try again.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"otp-wrapper\">\r\n            <div>\r\n                <img src='/app-icon.ico' alt='App Icon' className='app-icon' />\r\n            </div>\r\n            <h1 className=\"otp-title\">Verification Code</h1>\r\n            <div className=\"otp-timer\">\r\n                {hasCodeBeenSent ? (\r\n                    <p>We've sent a verification code to your registered email address.</p>\r\n                ) : (\r\n                    <p>Click the button to send the verification code to your email.</p>\r\n                )}\r\n                <div className=\"timer\">\r\n                    <p>Time Remaining: {timer} s</p>\r\n                </div>\r\n            </div>\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"otp-buttons\">\r\n                    {!hasCodeBeenSent ? (\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"otp-btn send\"\r\n                            onClick={handleSendOtp}\r\n                        >\r\n                            Send Code\r\n                        </button>\r\n                    ) : timer === 0 && isResendEnabled ? (\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"otp-btn resend\"\r\n                            onClick={handleResendOtp}\r\n                        >\r\n                            Resend Code\r\n                        </button>\r\n                    ) : hasCodeBeenSent && timer > 0 ? (\r\n                        <>\r\n                            <OtpInput\r\n                                length={6}\r\n                                onOtpSubmit={(otp) => setOtp(otp)}\r\n                                onOtpComplete={(complete) => setIsComplete(complete)}\r\n                            />\r\n                            <button\r\n                                type=\"submit\"\r\n                                className={`otp-btn verify ${isComplete ? 'active' : ''}`}\r\n                                disabled={!isComplete}\r\n                            >\r\n                                Verify Code\r\n                            </button>\r\n                        </>\r\n                    ) : null}\r\n                </div>\r\n            </form>\r\n            <ToastContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VerifyCodeConfirmAccount;\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D,SAASC,aAAa,EAAEC,WAAW,EAAEC,cAAc,QAAQ,wBAAwB;AACnF,OAAO,kCAAkC;AACzC,OAAO,0CAA0C;AACjD,OAAOC,QAAQ,MAAM,sBA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}