{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thesh\\\\Desktop\\\\Authentication\\\\frontend\\\\src\\\\Services\\\\OtpInput.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useRef, useEffect } from 'react';\n\n// const OtpInput = ({ length = 6, onOtpSubmit = () => {}, onOtpComplete = () => {} }) => {\n//     const [otp, setOtp] = useState(new Array(length).fill(\"\"));\n//     const [isComplete, setIsComplete] = useState(false);\n//     const inputRefs = useRef([]);\n\n//     useEffect(() => {\n//         if (inputRefs.current[0]) {\n//             inputRefs.current[0].focus();\n//         }\n//     }, []);\n\n//     useEffect(() => {\n//         onOtpComplete(isComplete);\n//     }, [isComplete, onOtpComplete]);\n\n//     const handleChange = (index, value) => {\n//         const newOtp = [...otp];\n\n//         if (value.length > 1) {\n//             // Handle pasted content\n//             const pastedCode = value.slice(0, length).split(\"\");\n//             for (let i = 0; i < length; i++) {\n//                 newOtp[i] = pastedCode[i] || \"\";\n//             }\n//             setOtp(newOtp);\n\n//             // Focus on the last non-empty input or the first empty one\n//             const lastFilledIndex = newOtp.findLastIndex((digit) => digit !== \"\");\n//             const focusIndex = lastFilledIndex < length - 1 ? lastFilledIndex + 1 : length - 1;\n//             inputRefs.current[focusIndex].focus();\n\n//         } else {\n//             // Handle single character input\n//             newOtp[index] = value.slice(-1);\n//             setOtp(newOtp);\n\n//             // Move focus to the next input field if value is entered\n//             if (value && index < length - 1) {\n//                 inputRefs.current[index + 1].focus();\n//             }\n//         }\n\n//         const combinedOtp = newOtp.join(\"\");\n//         const isComplete = combinedOtp.length === length && newOtp.every(digit => digit !== \"\");\n//         setIsComplete(isComplete);\n\n//         if (isComplete) {\n//             onOtpSubmit(combinedOtp);\n//         }\n//     };\n\n//     const handleKeyDown = (index, e) => {\n//         if (e.key === \"Backspace\") {\n//             if (!otp[index] && index > 0) {\n//                 inputRefs.current[index - 1].focus();\n//             }\n//         } else if (e.key === \"Enter\") {\n//             if (index === length - 1 && isComplete) {\n//                 onOtpSubmit(otp.join(\"\"));\n//             }\n//         }\n//     };\n\n//     const handlePaste = (e) => {\n//         e.preventDefault();\n//         const pasteData = e.clipboardData.getData('text').slice(0, length);\n//         const newOtp = pasteData.split(\"\");\n//         setOtp(newOtp);\n//         inputRefs.current[length - 1].focus();\n//         onOtpSubmit(pasteData);\n//         onOtpComplete(true);\n//     };\n\n//     const handleClick = (index) => {\n//         inputRefs.current[index].select();\n//     };\n\n//     return (\n//         <div className=\"otp-input-wrapper\">\n//             {otp.map((value, index) => (\n//                 <input\n//                     key={index}\n//                     type=\"text\"\n//                     ref={(input) => (inputRefs.current[index] = input)}\n//                     value={value}\n//                     onChange={(e) => handleChange(index, e.target.value)}\n//                     onKeyDown={(e) => handleKeyDown(index, e)}\n//                     onPaste={(e) => handlePaste(e)}\n//                     className=\"otpField\"\n//                     maxLength={1}\n//                     onClick={() => handleClick(index)}\n//                 />\n//             ))}\n//         </div>\n//     );\n// };\n\n// export default OtpInput;\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OtpInput = ({\n  length = 6,\n  onOtpSubmit = () => {},\n  onOtpComplete = () => {}\n}) => {\n  _s();\n  const [otp, setOtp] = useState(new Array(length).fill(\"\"));\n  const [isComplete, setIsComplete] = useState(false);\n  const inputRefs = useRef([]);\n  useEffect(() => {\n    if (inputRefs.current[0]) {\n      inputRefs.current[0].focus();\n    }\n  }, []);\n  useEffect(() => {\n    onOtpComplete(isComplete);\n  }, [isComplete, onOtpComplete]);\n  const handleChange = (index, e) => {\n    const value = e.target.value;\n    if (isNaN(value) || value.length > 1) return;\n    const newOtp = [...otp];\n    newOtp[index] = value.slice(-1);\n    setOtp(newOtp);\n    const combinedOtp = newOtp.join(\"\");\n    const isComplete = combinedOtp.length === length;\n    setIsComplete(isComplete);\n    if (value && index < length - 1) {\n      inputRefs.current[index + 1].focus();\n    }\n  };\n  const handleClick = index => {\n    inputRefs.current[index].setSelectionRange(1, 1);\n    inputRefs.current[index].select();\n  };\n  const handleKeyDown = (index, e) => {\n    if (e.key === \"Backspace\") {\n      if (!otp[index] && index > 0) {\n        inputRefs.current[index - 1].focus();\n      }\n    } else if (e.key === \"ArrowRight\") {\n      if (index < length - 1) {\n        inputRefs.current[index + 1].focus();\n      }\n    } else if (e.key === \"ArrowLeft\") {\n      if (index > 0) {\n        inputRefs.current[index - 1].focus();\n      }\n    } else if (e.key === \"Enter\") {\n      if (isComplete) {\n        onOtpSubmit(otp.join(\"\"));\n      }\n    }\n  };\n  const handlePaste = e => {\n    e.preventDefault();\n    const pasteData = e.clipboardData.getData('text').slice(0, length);\n    const newOtp = pasteData.split('').map((char, index) => index < length ? char : '');\n    setOtp(newOtp);\n    inputRefs.current[length - 1].focus();\n    onOtpSubmit(pasteData);\n    onOtpComplete(newOtp.length === length);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"otp-input-wrapper\",\n    children: otp.map((value, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      ref: input => inputRefs.current[index] = input,\n      value: value,\n      onChange: e => handleChange(index, e),\n      onKeyDown: e => handleKeyDown(index, e),\n      onPaste: e => handlePaste(e),\n      className: \"otpField\",\n      maxLength: 1,\n      onClick: () => handleClick(index)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 9\n  }, this);\n};\n_s(OtpInput, \"0FKmTaRg9l47KWiTZNc4SSfG/9I=\");\n_c = OtpInput;\nexport default OtpInput;\nvar _c;\n$RefreshReg$(_c, \"OtpInput\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","OtpInput","length","onOtpSubmit","onOtpComplete","_s","otp","setOtp","Array","fill","isComplete","setIsComplete","inputRefs","current","focus","handleChange","index","e","value","target","isNaN","newOtp","slice","combinedOtp","join","handleClick","setSelectionRange","select","handleKeyDown","key","handlePaste","preventDefault","pasteData","clipboardData","getData","split","map","char","className","children","type","ref","input","onChange","onKeyDown","onPaste","maxLength","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/thesh/Desktop/Authentication/frontend/src/Services/OtpInput.jsx"],"sourcesContent":["// import React, { useState, useRef, useEffect } from 'react';\r\n\r\n// const OtpInput = ({ length = 6, onOtpSubmit = () => {}, onOtpComplete = () => {} }) => {\r\n//     const [otp, setOtp] = useState(new Array(length).fill(\"\"));\r\n//     const [isComplete, setIsComplete] = useState(false);\r\n//     const inputRefs = useRef([]);\r\n\r\n//     useEffect(() => {\r\n//         if (inputRefs.current[0]) {\r\n//             inputRefs.current[0].focus();\r\n//         }\r\n//     }, []);\r\n\r\n//     useEffect(() => {\r\n//         onOtpComplete(isComplete);\r\n//     }, [isComplete, onOtpComplete]);\r\n\r\n//     const handleChange = (index, value) => {\r\n//         const newOtp = [...otp];\r\n        \r\n//         if (value.length > 1) {\r\n//             // Handle pasted content\r\n//             const pastedCode = value.slice(0, length).split(\"\");\r\n//             for (let i = 0; i < length; i++) {\r\n//                 newOtp[i] = pastedCode[i] || \"\";\r\n//             }\r\n//             setOtp(newOtp);\r\n\r\n//             // Focus on the last non-empty input or the first empty one\r\n//             const lastFilledIndex = newOtp.findLastIndex((digit) => digit !== \"\");\r\n//             const focusIndex = lastFilledIndex < length - 1 ? lastFilledIndex + 1 : length - 1;\r\n//             inputRefs.current[focusIndex].focus();\r\n\r\n//         } else {\r\n//             // Handle single character input\r\n//             newOtp[index] = value.slice(-1);\r\n//             setOtp(newOtp);\r\n\r\n//             // Move focus to the next input field if value is entered\r\n//             if (value && index < length - 1) {\r\n//                 inputRefs.current[index + 1].focus();\r\n//             }\r\n//         }\r\n\r\n//         const combinedOtp = newOtp.join(\"\");\r\n//         const isComplete = combinedOtp.length === length && newOtp.every(digit => digit !== \"\");\r\n//         setIsComplete(isComplete);\r\n\r\n//         if (isComplete) {\r\n//             onOtpSubmit(combinedOtp);\r\n//         }\r\n//     };\r\n\r\n//     const handleKeyDown = (index, e) => {\r\n//         if (e.key === \"Backspace\") {\r\n//             if (!otp[index] && index > 0) {\r\n//                 inputRefs.current[index - 1].focus();\r\n//             }\r\n//         } else if (e.key === \"Enter\") {\r\n//             if (index === length - 1 && isComplete) {\r\n//                 onOtpSubmit(otp.join(\"\"));\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     const handlePaste = (e) => {\r\n//         e.preventDefault();\r\n//         const pasteData = e.clipboardData.getData('text').slice(0, length);\r\n//         const newOtp = pasteData.split(\"\");\r\n//         setOtp(newOtp);\r\n//         inputRefs.current[length - 1].focus();\r\n//         onOtpSubmit(pasteData);\r\n//         onOtpComplete(true);\r\n//     };\r\n\r\n//     const handleClick = (index) => {\r\n//         inputRefs.current[index].select();\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"otp-input-wrapper\">\r\n//             {otp.map((value, index) => (\r\n//                 <input\r\n//                     key={index}\r\n//                     type=\"text\"\r\n//                     ref={(input) => (inputRefs.current[index] = input)}\r\n//                     value={value}\r\n//                     onChange={(e) => handleChange(index, e.target.value)}\r\n//                     onKeyDown={(e) => handleKeyDown(index, e)}\r\n//                     onPaste={(e) => handlePaste(e)}\r\n//                     className=\"otpField\"\r\n//                     maxLength={1}\r\n//                     onClick={() => handleClick(index)}\r\n//                 />\r\n//             ))}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default OtpInput;\r\n\r\n\r\n\r\n\r\nimport React, { useState, useRef, useEffect } from 'react';\r\n\r\nconst OtpInput = ({ length = 6, onOtpSubmit = () => {}, onOtpComplete = () => {} }) => {\r\n    const [otp, setOtp] = useState(new Array(length).fill(\"\"));\r\n    const [isComplete, setIsComplete] = useState(false);\r\n    const inputRefs = useRef([]);\r\n\r\n    useEffect(() => {\r\n        if (inputRefs.current[0]) {\r\n            inputRefs.current[0].focus();\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        onOtpComplete(isComplete);\r\n    }, [isComplete, onOtpComplete]);\r\n\r\n    const handleChange = (index, e) => {\r\n        const value = e.target.value;\r\n\r\n        if (isNaN(value) || value.length > 1) return;\r\n\r\n        const newOtp = [...otp];\r\n        newOtp[index] = value.slice(-1);\r\n        setOtp(newOtp);\r\n\r\n        const combinedOtp = newOtp.join(\"\");\r\n        const isComplete = combinedOtp.length === length;\r\n        setIsComplete(isComplete);\r\n\r\n        if (value && index < length - 1) {\r\n            inputRefs.current[index + 1].focus();\r\n        }\r\n    };\r\n\r\n    const handleClick = (index) => {\r\n        inputRefs.current[index].setSelectionRange(1, 1);\r\n        inputRefs.current[index].select();\r\n    };\r\n\r\n    const handleKeyDown = (index, e) => {\r\n        if (e.key === \"Backspace\") {\r\n            if (!otp[index] && index > 0) {\r\n                inputRefs.current[index - 1].focus();\r\n            }\r\n        } else if (e.key === \"ArrowRight\") {\r\n            if (index < length - 1) {\r\n                inputRefs.current[index + 1].focus();\r\n            }\r\n        } else if (e.key === \"ArrowLeft\") {\r\n            if (index > 0) {\r\n                inputRefs.current[index - 1].focus();\r\n            }\r\n        } else if (e.key === \"Enter\") {\r\n            if (isComplete) {\r\n                onOtpSubmit(otp.join(\"\"));\r\n            }\r\n        }\r\n    };\r\n\r\n    const handlePaste = (e) => {\r\n        e.preventDefault();\r\n        const pasteData = e.clipboardData.getData('text').slice(0, length);\r\n        const newOtp = pasteData.split('').map((char, index) => index < length ? char : '');\r\n        setOtp(newOtp);\r\n        inputRefs.current[length - 1].focus();\r\n        onOtpSubmit(pasteData);\r\n        onOtpComplete(newOtp.length === length);\r\n    };\r\n\r\n    return (\r\n        <div className=\"otp-input-wrapper\">\r\n            {otp.map((value, index) => (\r\n                <input\r\n                    key={index}\r\n                    type=\"text\"\r\n                    ref={(input) => (inputRefs.current[index] = input)}\r\n                    value={value}\r\n                    onChange={(e) => handleChange(index, e)}\r\n                    onKeyDown={(e) => handleKeyDown(index, e)}\r\n                    onPaste={(e) => handlePaste(e)}\r\n                    className=\"otpField\"\r\n                    maxLength={1}\r\n                    onClick={() => handleClick(index)}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OtpInput;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}