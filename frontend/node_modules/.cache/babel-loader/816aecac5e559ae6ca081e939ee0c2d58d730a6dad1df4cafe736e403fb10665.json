{"ast":null,"code":"// // pages/ResetPassword.js\n// import React, { useState } from 'react';\n// import { useNavigate, useLocation } from 'react-router-dom';\n// import { handleSuccess, handleError, ToastContainer } from '../../utils/ReactToastify';\n// import '../../utils/ReactToastifyCustom.css';\n// import '../../utils/style/ResetPassword.css';\n\n// function ResetPassword() {\n//     const [password, setPassword] = useState('');\n//     const [confirmPassword, setConfirmPassword] = useState('');\n//     const [passwordError, setPasswordError] = useState(false);\n//     const [confirmPasswordError, setConfirmPasswordError] = useState(false);\n//     const [matchError, setMatchError] = useState(false); // New state for match error\n//     const { state } = useLocation();\n//     const navigate = useNavigate();\n\n//     const handleSubmit = async (event) => {\n//         event.preventDefault();\n//         let hasError = false;\n\n//         // Validate inputs\n//         if (!password) {\n//             setPasswordError(true);\n//             hasError = true;\n//         } else {\n//             setPasswordError(false);\n//         }\n\n//         if (!confirmPassword) {\n//             setConfirmPasswordError(true);\n//             hasError = true;\n//         } else {\n//             setConfirmPasswordError(false);\n//         }\n\n//         if (password !== confirmPassword) {\n//             setMatchError(true); // Set match error\n//             handleError('Passwords do not match');\n//             hasError = true;\n//         } else {\n//             setMatchError(false); // Clear match error if passwords match\n//         }\n\n//         if (hasError) return;\n\n//         try {\n//             const response = await fetch('http://localhost:8080/verification/forgot-password/reset-password', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify({ email: state.email, newPassword: password }),\n//             });\n\n//             const result = await response.json();\n\n//             if (response.ok) {\n//                 handleSuccess(result.message);\n//                 navigate('/login');\n//             } else {\n//                 handleError(result.message);\n//             }\n//         } catch (err) {\n//             handleError('Network error. Please check your connection and try again.');\n//         }\n//     };\n\n//     return (\n//         <div className=\"reset-password-container\">\n//             <img src='/app-icon.ico' alt='App Icon' className='app-icon' />\n//             <h1>Reset Password</h1>\n//             <form onSubmit={handleSubmit}>\n//                 <div className={`input-wrapper ${matchError ? 'error' : ''}`}>\n//                     <div className={`form-group-reset-password ${passwordError ? 'error' : ''}`}>\n//                         <input\n//                             type='password'\n//                             id='new-password'\n//                             placeholder=''\n//                             value={password}\n//                             onChange={(e) => setPassword(e.target.value)}\n//                             required\n//                         />\n//                         <label htmlFor='new-password' className='form-label-reset-password'>New password</label>\n//                     </div>\n//                     <div className={`form-group-reset-password ${confirmPasswordError ? 'error' : ''}`}>\n//                         <input\n//                             type='password'\n//                             id='confirm-password'\n//                             placeholder=''\n//                             value={confirmPassword}\n//                             onChange={(e) => setConfirmPassword(e.target.value)}\n//                             required\n//                         />\n//                         <label htmlFor='confirm-password' className='form-label-reset-password'>Confirm Password</label>\n//                     </div>\n//                 </div>\n//                 <button type=\"submit\">Reset Password</button>\n//                 <button type=\"button\" onClick={() => navigate(-2)} className=\"back-button\">Back</button>\n//             </form>\n//             <ToastContainer />\n//         </div>\n//     );\n// }\n\n// export default ResetPassword;\n\n// // frontend/src/components/ForgotPassword/ResetPassword.jsx","map":{"version":3,"names":[],"sources":["C:/Users/thesh/Desktop/Authentication/frontend/src/components/ForgotPassword/ResetPassword.jsx"],"sourcesContent":["// // pages/ResetPassword.js\r\n// import React, { useState } from 'react';\r\n// import { useNavigate, useLocation } from 'react-router-dom';\r\n// import { handleSuccess, handleError, ToastContainer } from '../../utils/ReactToastify';\r\n// import '../../utils/ReactToastifyCustom.css';\r\n// import '../../utils/style/ResetPassword.css';\r\n\r\n// function ResetPassword() {\r\n//     const [password, setPassword] = useState('');\r\n//     const [confirmPassword, setConfirmPassword] = useState('');\r\n//     const [passwordError, setPasswordError] = useState(false);\r\n//     const [confirmPasswordError, setConfirmPasswordError] = useState(false);\r\n//     const [matchError, setMatchError] = useState(false); // New state for match error\r\n//     const { state } = useLocation();\r\n//     const navigate = useNavigate();\r\n\r\n//     const handleSubmit = async (event) => {\r\n//         event.preventDefault();\r\n//         let hasError = false;\r\n\r\n//         // Validate inputs\r\n//         if (!password) {\r\n//             setPasswordError(true);\r\n//             hasError = true;\r\n//         } else {\r\n//             setPasswordError(false);\r\n//         }\r\n\r\n//         if (!confirmPassword) {\r\n//             setConfirmPasswordError(true);\r\n//             hasError = true;\r\n//         } else {\r\n//             setConfirmPasswordError(false);\r\n//         }\r\n\r\n//         if (password !== confirmPassword) {\r\n//             setMatchError(true); // Set match error\r\n//             handleError('Passwords do not match');\r\n//             hasError = true;\r\n//         } else {\r\n//             setMatchError(false); // Clear match error if passwords match\r\n//         }\r\n\r\n//         if (hasError) return;\r\n\r\n//         try {\r\n//             const response = await fetch('http://localhost:8080/verification/forgot-password/reset-password', {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                 },\r\n//                 body: JSON.stringify({ email: state.email, newPassword: password }),\r\n//             });\r\n\r\n//             const result = await response.json();\r\n\r\n//             if (response.ok) {\r\n//                 handleSuccess(result.message);\r\n//                 navigate('/login');\r\n//             } else {\r\n//                 handleError(result.message);\r\n//             }\r\n//         } catch (err) {\r\n//             handleError('Network error. Please check your connection and try again.');\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"reset-password-container\">\r\n//             <img src='/app-icon.ico' alt='App Icon' className='app-icon' />\r\n//             <h1>Reset Password</h1>\r\n//             <form onSubmit={handleSubmit}>\r\n//                 <div className={`input-wrapper ${matchError ? 'error' : ''}`}>\r\n//                     <div className={`form-group-reset-password ${passwordError ? 'error' : ''}`}>\r\n//                         <input\r\n//                             type='password'\r\n//                             id='new-password'\r\n//                             placeholder=''\r\n//                             value={password}\r\n//                             onChange={(e) => setPassword(e.target.value)}\r\n//                             required\r\n//                         />\r\n//                         <label htmlFor='new-password' className='form-label-reset-password'>New password</label>\r\n//                     </div>\r\n//                     <div className={`form-group-reset-password ${confirmPasswordError ? 'error' : ''}`}>\r\n//                         <input\r\n//                             type='password'\r\n//                             id='confirm-password'\r\n//                             placeholder=''\r\n//                             value={confirmPassword}\r\n//                             onChange={(e) => setConfirmPassword(e.target.value)}\r\n//                             required\r\n//                         />\r\n//                         <label htmlFor='confirm-password' className='form-label-reset-password'>Confirm Password</label>\r\n//                     </div>\r\n//                 </div>\r\n//                 <button type=\"submit\">Reset Password</button>\r\n//                 <button type=\"button\" onClick={() => navigate(-2)} className=\"back-button\">Back</button>\r\n//             </form>\r\n//             <ToastContainer />\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default ResetPassword;\r\n\r\n\r\n// // frontend/src/components/ForgotPassword/ResetPassword.jsx"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}