{"ast":null,"code":"// authUtils.js\nexport const checkTokenValidity = async accessToken => {\n  try {\n    const response = await fetch('http://localhost:8080/auth/validate', {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Error validating token: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error validating token:', error);\n    throw error;\n  }\n};\nexport const refreshToken = async refreshToken => {\n  try {\n    const response = await fetch('http://localhost:8080/auth/refresh-token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        refreshToken\n      })\n    });\n    if (response.status === 403) {\n      throw new Error('Forbidden: Invalid refresh token');\n    }\n    if (!response.ok) {\n      throw new Error(`Error refreshing token: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error refreshing token:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["checkTokenValidity","accessToken","response","fetch","method","headers","ok","Error","statusText","json","error","console","refreshToken","body","JSON","stringify","status"],"sources":["C:/Users/thesh/Desktop/Authentication/frontend/src/utils/authUtils.js"],"sourcesContent":["// authUtils.js\r\nexport const checkTokenValidity = async (accessToken) => {\r\n    try {\r\n        const response = await fetch('http://localhost:8080/auth/validate', {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${accessToken}`,\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error(`Error validating token: ${response.statusText}`);\r\n        }\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error('Error validating token:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport const refreshToken = async (refreshToken) => {\r\n    try {\r\n        const response = await fetch('http://localhost:8080/auth/refresh-token', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ refreshToken })\r\n        });\r\n        if (response.status === 403) {\r\n            throw new Error('Forbidden: Invalid refresh token');\r\n        }\r\n        if (!response.ok) {\r\n            throw new Error(`Error refreshing token: ${response.statusText}`);\r\n        }\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error('Error refreshing token:', error);\r\n        throw error;\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,kBAAkB,GAAG,MAAOC,WAAW,IAAK;EACrD,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;MAChEC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,eAAe,EAAE,UAAUJ,WAAW,EAAE;QACxC,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;IACF,IAAI,CAACC,QAAQ,CAACI,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,2BAA2BL,QAAQ,CAACM,UAAU,EAAE,CAAC;IACrE;IACA,OAAO,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAME,YAAY,GAAG,MAAOA,YAAY,IAAK;EAChD,IAAI;IACA,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAC,0CAA0C,EAAE;MACrEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEH;MAAa,CAAC;IACzC,CAAC,CAAC;IACF,IAAIV,QAAQ,CAACc,MAAM,KAAK,GAAG,EAAE;MACzB,MAAM,IAAIT,KAAK,CAAC,kCAAkC,CAAC;IACvD;IACA,IAAI,CAACL,QAAQ,CAACI,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,2BAA2BL,QAAQ,CAACM,UAAU,EAAE,CAAC;IACrE;IACA,OAAO,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}