{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thesh\\\\Desktop\\\\Authentication\\\\frontend\\\\src\\\\components\\\\ForgotPassword\\\\SentOtpForgotPassword.js\",\n  _s = $RefreshSig$();\n// // SentOtpForgotPassword.js\n// import React, { useState, useEffect, useRef } from 'react';\n// import { useNavigate, useLocation } from 'react-router-dom';\n// import { handleSuccess, handleError, ToastContainer } from '../../utils/ReactToastify';\n// import '../../utils/ReactToastifyCustom.css';\n// import '../../utils/style/SentOtpForgotPassword.css';\n\n// const OtpInput = ({ length = 6, onOtpSubmit = () => { }, onOtpComplete = () => { } }) => {\n//     const [otp, setOtp] = useState(new Array(length).fill(\"\"));\n//     const [isComplete, setIsComplete] = useState(false);\n//     const inputRefs = useRef([]);\n\n//     useEffect(() => {\n//         if (inputRefs.current[0]) {\n//             inputRefs.current[0].focus();\n//         }\n//     }, []);\n\n//     useEffect(() => {\n//         onOtpComplete(isComplete);\n//     }, [isComplete, onOtpComplete]);\n\n//     const handleChange = (index, e) => {\n//         const value = e.target.value;\n//         if (isNaN(value) || value.length > 1) return;\n\n//         const newOtp = [...otp];\n//         newOtp[index] = value.slice(-1);\n//         setOtp(newOtp);\n\n//         const combinedOtp = newOtp.join(\"\");\n//         const isComplete = combinedOtp.length === length;\n//         setIsComplete(isComplete);\n\n//         if (value && index < length - 1) {\n//             inputRefs.current[index + 1].focus();\n//         }\n//     };\n\n//     const handleClick = (index) => {\n//         inputRefs.current[index].setSelectionRange(1, 1);\n//         inputRefs.current[index].select();\n//     };\n\n//     const handleKeyDown = (index, e) => {\n//         if (e.key === \"Backspace\") {\n//             if (!otp[index] && index > 0) {\n//                 inputRefs.current[index - 1].focus();\n//             }\n//         } else if (e.key === \"Enter\") {\n//             if (index < length - 1) {\n//                 inputRefs.current[index + 1].focus();\n//             } else if (index === length - 1) {\n//                 if (isComplete) {\n//                     onOtpSubmit(otp.join(\"\"));\n//                 }\n//             }\n//         }\n//     };\n\n//     const handlePaste = (e) => {\n//         e.preventDefault();\n//         const pasteData = e.clipboardData.getData('text').slice(0, length);\n//         if (pasteData.length === length) {\n//             setOtp(pasteData.split(''));\n//             onOtpSubmit(pasteData);\n//             onOtpComplete(true);\n//         }\n//     };\n\n//     return (\n//         <div className=\"otp-input-wrapper\">\n//             {otp.map((value, index) => (\n//                 <input\n//                     key={index}\n//                     type=\"text\"\n//                     ref={(input) => (inputRefs.current[index] = input)}\n//                     value={value}\n//                     onChange={(e) => handleChange(index, e)}\n//                     onKeyDown={(e) => handleKeyDown(index, e)}\n//                     onPaste={(e) => handlePaste(e)}\n//                     className=\"otpField\"\n//                     maxLength={1}\n//                     onClick={() => handleClick(index)}\n//                 />\n//             ))}\n//         </div>\n//     );\n// };\n\n// function SentOtpForgotPassword() {\n//     const [otp, setOtp] = useState('');\n//     const [timer, setTimer] = useState(30);\n//     const [isResendEnabled, setIsResendEnabled] = useState(false);\n//     const [isComplete, setIsComplete] = useState(false);\n//     const { state } = useLocation();\n//     const navigate = useNavigate();\n\n//     useEffect(() => {\n//         const countdown = timer > 0 ? setInterval(() => {\n//             setTimer((prev) => prev - 1);\n//         }, 1000) : null;\n\n//         if (timer === 0) {\n//             setIsResendEnabled(true);\n//         }\n\n//         return () => {\n//             if (countdown) clearInterval(countdown);\n//         };\n//     }, [timer]);\n\n//     const handleSubmit = async (event) => {\n//         event.preventDefault();\n//         try {\n//             const response = await fetch('http://localhost:8080/verification/forgot-password/verify-otp', {\n//                 method: 'POST',\n//                 headers: { 'Content-Type': 'application/json' },\n//                 body: JSON.stringify({ email: state.email, otp }),\n//             });\n\n//             const result = await response.json();\n\n//             if (response.ok) {\n//                 handleSuccess(result.message);\n//                 navigate('/forgot-password/reset-password', { state: { email: state.email } });\n//             } else {\n//                 handleError(result.message);\n//             }\n//         } catch (err) {\n//             handleError('Network error. Please check your connection and try again.');\n//         }\n//     };\n\n//     const handleResendOtp = async () => {\n//         try {\n//             setIsResendEnabled(false);\n//             setTimer(30); // Reset timer\n//             const response = await fetch('http://localhost:8080/verification/forgot-password/send-otp', {\n//                 method: 'POST',\n//                 headers: { 'Content-Type': 'application/json' },\n//                 body: JSON.stringify({ email: state.email }),\n//             });\n\n//             const result = await response.json();\n\n//             if (response.ok) {\n//                 isResendEnabled(true)\n//                 handleSuccess(result.message);\n//             } else {\n//                 handleError(result.message);\n//             }\n//         } catch (err) {\n//             handleError('Failed to resend OTP. Please try again.');\n//         }\n//     };\n\n//     return (\n//         <div className=\"otp-wrapper\">\n//             <h1 className=\"otp-title\">Verification Code</h1>\n//             <div className=\"otp-timer\">\n//                 Time Remaining: {timer}s\n//             </div>\n//             <form onSubmit={handleSubmit}>\n//                 <OtpInput\n//                     length={6}\n//                     onOtpSubmit={(otp) => setOtp(otp)}\n//                     onOtpComplete={(complete) => setIsComplete(complete)}\n//                 />\n//                 <div className=\"otp-buttons\">\n//                     {timer === 0 ? (\n//                         <button\n//                             type=\"button\"\n//                             className=\"otp-btn resend\"\n//                             onClick={handleResendOtp}\n//                         >\n//                             Resend Code\n//                         </button>\n//                     ) : (\n//                         <button\n//                             type=\"submit\"\n//                             className={`otp-btn verify ${isComplete ? 'active' : ''}`}\n//                             disabled={!isComplete}\n//                         >\n//                             Verify Code\n//                         </button>\n//                     )}\n//                 </div>\n//             </form>\n//             <ToastContainer />\n//         </div>\n//     );\n// }\n\n// export default SentOtpForgotPassword;\n\n// SentOtpForgotPassword.js\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { handleSuccess, handleError, ToastContainer } from '../../utils/ReactToastify';\nimport '../../utils/ReactToastifyCustom.css';\nimport '../../utils/style/SentOtpForgotPassword.css';\nimport OtpInput from './OtpInput'; // Adjust the import path based on your folder structure\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SentOtpForgotPassword() {\n  _s();\n  const [otp, setOtp] = useState('');\n  const [timer, setTimer] = useState(30);\n  const [isResendEnabled, setIsResendEnabled] = useState(false);\n  const [isComplete, setIsComplete] = useState(false);\n  const {\n    state\n  } = useLocation();\n  const navigate = useNavigate();\n  useEffect(() => {\n    const countdown = timer > 0 ? setInterval(() => {\n      setTimer(prev => prev - 1);\n    }, 1000) : null;\n    if (timer === 0) {\n      setIsResendEnabled(true);\n    }\n    return () => {\n      if (countdown) clearInterval(countdown);\n    };\n  }, [timer]);\n  const handleSubmit = async event => {\n    event.preventDefault();\n    try {\n      const response = await fetch('http://localhost:8080/verification/forgot-password/verify-otp', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: state.email,\n          otp\n        })\n      });\n      const result = await response.json();\n      if (response.ok) {\n        handleSuccess(result.message);\n        navigate('/forgot-password/reset-password', {\n          state: {\n            email: state.email\n          }\n        });\n      } else {\n        handleError(result.message);\n      }\n    } catch (err) {\n      handleError('Network error. Please check your connection and try again.');\n    }\n  };\n  const handleResendOtp = async () => {\n    try {\n      setIsResendEnabled(false);\n      setTimer(30); // Reset timer\n      const response = await fetch('http://localhost:8080/verification/forgot-password/send-otp', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: state.email\n        })\n      });\n      const result = await response.json();\n      if (response.ok) {\n        handleSuccess(result.message);\n      } else {\n        handleError(result.message);\n      }\n    } catch (err) {\n      handleError('Failed to resend OTP. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"otp-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"otp-title\",\n      children: \"Verification Code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"otp-timer\",\n      children: [\"Time Remaining: \", timer, \"s\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(OtpInput, {\n        length: 6,\n        onOtpSubmit: otp => setOtp(otp),\n        onOtpComplete: complete => setIsComplete(complete)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"otp-buttons\",\n        children: timer === 0 ? /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"otp-btn resend\",\n          onClick: handleResendOtp,\n          children: \"Resend Code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: `otp-btn verify ${isComplete ? 'active' : ''}`,\n          disabled: !isComplete,\n          children: \"Verify Code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 9\n  }, this);\n}\n_s(SentOtpForgotPassword, \"HpnkmFkYIcU0wKdB/LHt21oHeE8=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = SentOtpForgotPassword;\nexport default SentOtpForgotPassword;\nvar _c;\n$RefreshReg$(_c, \"SentOtpForgotPassword\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useLocation","handleSuccess","handleError","ToastContainer","OtpInput","jsxDEV","_jsxDEV","SentOtpForgotPassword","_s","otp","setOtp","timer","setTimer","isResendEnabled","setIsResendEnabled","isComplete","setIsComplete","state","navigate","countdown","setInterval","prev","clearInterval","handleSubmit","event","preventDefault","response","fetch","method","headers","body","JSON","stringify","email","result","json","ok","message","err","handleResendOtp","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","length","onOtpSubmit","onOtpComplete","complete","type","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/thesh/Desktop/Authentication/frontend/src/components/ForgotPassword/SentOtpForgotPassword.js"],"sourcesContent":["// // SentOtpForgotPassword.js\r\n// import React, { useState, useEffect, useRef } from 'react';\r\n// import { useNavigate, useLocation } from 'react-router-dom';\r\n// import { handleSuccess, handleError, ToastContainer } from '../../utils/ReactToastify';\r\n// import '../../utils/ReactToastifyCustom.css';\r\n// import '../../utils/style/SentOtpForgotPassword.css';\r\n\r\n// const OtpInput = ({ length = 6, onOtpSubmit = () => { }, onOtpComplete = () => { } }) => {\r\n//     const [otp, setOtp] = useState(new Array(length).fill(\"\"));\r\n//     const [isComplete, setIsComplete] = useState(false);\r\n//     const inputRefs = useRef([]);\r\n\r\n//     useEffect(() => {\r\n//         if (inputRefs.current[0]) {\r\n//             inputRefs.current[0].focus();\r\n//         }\r\n//     }, []);\r\n\r\n//     useEffect(() => {\r\n//         onOtpComplete(isComplete);\r\n//     }, [isComplete, onOtpComplete]);\r\n\r\n//     const handleChange = (index, e) => {\r\n//         const value = e.target.value;\r\n//         if (isNaN(value) || value.length > 1) return;\r\n\r\n//         const newOtp = [...otp];\r\n//         newOtp[index] = value.slice(-1);\r\n//         setOtp(newOtp);\r\n\r\n//         const combinedOtp = newOtp.join(\"\");\r\n//         const isComplete = combinedOtp.length === length;\r\n//         setIsComplete(isComplete);\r\n\r\n//         if (value && index < length - 1) {\r\n//             inputRefs.current[index + 1].focus();\r\n//         }\r\n//     };\r\n\r\n//     const handleClick = (index) => {\r\n//         inputRefs.current[index].setSelectionRange(1, 1);\r\n//         inputRefs.current[index].select();\r\n//     };\r\n\r\n//     const handleKeyDown = (index, e) => {\r\n//         if (e.key === \"Backspace\") {\r\n//             if (!otp[index] && index > 0) {\r\n//                 inputRefs.current[index - 1].focus();\r\n//             }\r\n//         } else if (e.key === \"Enter\") {\r\n//             if (index < length - 1) {\r\n//                 inputRefs.current[index + 1].focus();\r\n//             } else if (index === length - 1) {\r\n//                 if (isComplete) {\r\n//                     onOtpSubmit(otp.join(\"\"));\r\n//                 }\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     const handlePaste = (e) => {\r\n//         e.preventDefault();\r\n//         const pasteData = e.clipboardData.getData('text').slice(0, length);\r\n//         if (pasteData.length === length) {\r\n//             setOtp(pasteData.split(''));\r\n//             onOtpSubmit(pasteData);\r\n//             onOtpComplete(true);\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"otp-input-wrapper\">\r\n//             {otp.map((value, index) => (\r\n//                 <input\r\n//                     key={index}\r\n//                     type=\"text\"\r\n//                     ref={(input) => (inputRefs.current[index] = input)}\r\n//                     value={value}\r\n//                     onChange={(e) => handleChange(index, e)}\r\n//                     onKeyDown={(e) => handleKeyDown(index, e)}\r\n//                     onPaste={(e) => handlePaste(e)}\r\n//                     className=\"otpField\"\r\n//                     maxLength={1}\r\n//                     onClick={() => handleClick(index)}\r\n//                 />\r\n//             ))}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// function SentOtpForgotPassword() {\r\n//     const [otp, setOtp] = useState('');\r\n//     const [timer, setTimer] = useState(30);\r\n//     const [isResendEnabled, setIsResendEnabled] = useState(false);\r\n//     const [isComplete, setIsComplete] = useState(false);\r\n//     const { state } = useLocation();\r\n//     const navigate = useNavigate();\r\n\r\n//     useEffect(() => {\r\n//         const countdown = timer > 0 ? setInterval(() => {\r\n//             setTimer((prev) => prev - 1);\r\n//         }, 1000) : null;\r\n\r\n//         if (timer === 0) {\r\n//             setIsResendEnabled(true);\r\n//         }\r\n\r\n//         return () => {\r\n//             if (countdown) clearInterval(countdown);\r\n//         };\r\n//     }, [timer]);\r\n\r\n//     const handleSubmit = async (event) => {\r\n//         event.preventDefault();\r\n//         try {\r\n//             const response = await fetch('http://localhost:8080/verification/forgot-password/verify-otp', {\r\n//                 method: 'POST',\r\n//                 headers: { 'Content-Type': 'application/json' },\r\n//                 body: JSON.stringify({ email: state.email, otp }),\r\n//             });\r\n\r\n//             const result = await response.json();\r\n\r\n//             if (response.ok) {\r\n//                 handleSuccess(result.message);\r\n//                 navigate('/forgot-password/reset-password', { state: { email: state.email } });\r\n//             } else {\r\n//                 handleError(result.message);\r\n//             }\r\n//         } catch (err) {\r\n//             handleError('Network error. Please check your connection and try again.');\r\n//         }\r\n//     };\r\n\r\n//     const handleResendOtp = async () => {\r\n//         try {\r\n//             setIsResendEnabled(false);\r\n//             setTimer(30); // Reset timer\r\n//             const response = await fetch('http://localhost:8080/verification/forgot-password/send-otp', {\r\n//                 method: 'POST',\r\n//                 headers: { 'Content-Type': 'application/json' },\r\n//                 body: JSON.stringify({ email: state.email }),\r\n//             });\r\n\r\n//             const result = await response.json();\r\n\r\n//             if (response.ok) {\r\n//                 isResendEnabled(true)\r\n//                 handleSuccess(result.message);\r\n//             } else {\r\n//                 handleError(result.message);\r\n//             }\r\n//         } catch (err) {\r\n//             handleError('Failed to resend OTP. Please try again.');\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"otp-wrapper\">\r\n//             <h1 className=\"otp-title\">Verification Code</h1>\r\n//             <div className=\"otp-timer\">\r\n//                 Time Remaining: {timer}s\r\n//             </div>\r\n//             <form onSubmit={handleSubmit}>\r\n//                 <OtpInput\r\n//                     length={6}\r\n//                     onOtpSubmit={(otp) => setOtp(otp)}\r\n//                     onOtpComplete={(complete) => setIsComplete(complete)}\r\n//                 />\r\n//                 <div className=\"otp-buttons\">\r\n//                     {timer === 0 ? (\r\n//                         <button\r\n//                             type=\"button\"\r\n//                             className=\"otp-btn resend\"\r\n//                             onClick={handleResendOtp}\r\n//                         >\r\n//                             Resend Code\r\n//                         </button>\r\n//                     ) : (\r\n//                         <button\r\n//                             type=\"submit\"\r\n//                             className={`otp-btn verify ${isComplete ? 'active' : ''}`}\r\n//                             disabled={!isComplete}\r\n//                         >\r\n//                             Verify Code\r\n//                         </button>\r\n//                     )}\r\n//                 </div>\r\n//             </form>\r\n//             <ToastContainer />\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default SentOtpForgotPassword;\r\n\r\n\r\n\r\n// SentOtpForgotPassword.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { handleSuccess, handleError, ToastContainer } from '../../utils/ReactToastify';\r\nimport '../../utils/ReactToastifyCustom.css';\r\nimport '../../utils/style/SentOtpForgotPassword.css';\r\nimport OtpInput from './OtpInput'; // Adjust the import path based on your folder structure\r\n\r\nfunction SentOtpForgotPassword() {\r\n    const [otp, setOtp] = useState('');\r\n    const [timer, setTimer] = useState(30);\r\n    const [isResendEnabled, setIsResendEnabled] = useState(false);\r\n    const [isComplete, setIsComplete] = useState(false);\r\n    const { state } = useLocation();\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const countdown = timer > 0 ? setInterval(() => {\r\n            setTimer((prev) => prev - 1);\r\n        }, 1000) : null;\r\n\r\n        if (timer === 0) {\r\n            setIsResendEnabled(true);\r\n        }\r\n\r\n        return () => {\r\n            if (countdown) clearInterval(countdown);\r\n        };\r\n    }, [timer]);\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        try {\r\n            const response = await fetch('http://localhost:8080/verification/forgot-password/verify-otp', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ email: state.email, otp }),\r\n            });\r\n\r\n            const result = await response.json();\r\n\r\n            if (response.ok) {\r\n                handleSuccess(result.message);\r\n                navigate('/forgot-password/reset-password', { state: { email: state.email } });\r\n            } else {\r\n                handleError(result.message);\r\n            }\r\n        } catch (err) {\r\n            handleError('Network error. Please check your connection and try again.');\r\n        }\r\n    };\r\n\r\n    const handleResendOtp = async () => {\r\n        try {\r\n            setIsResendEnabled(false);\r\n            setTimer(30); // Reset timer\r\n            const response = await fetch('http://localhost:8080/verification/forgot-password/send-otp', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ email: state.email }),\r\n            });\r\n\r\n            const result = await response.json();\r\n\r\n            if (response.ok) {\r\n                handleSuccess(result.message);\r\n            } else {\r\n                handleError(result.message);\r\n            }\r\n        } catch (err) {\r\n            handleError('Failed to resend OTP. Please try again.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"otp-wrapper\">\r\n            <h1 className=\"otp-title\">Verification Code</h1>\r\n            <div className=\"otp-timer\">\r\n                Time Remaining: {timer}s\r\n            </div>\r\n            <form onSubmit={handleSubmit}>\r\n                <OtpInput\r\n                    length={6}\r\n                    onOtpSubmit={(otp) => setOtp(otp)}\r\n                    onOtpComplete={(complete) => setIsComplete(complete)}\r\n                />\r\n                <div className=\"otp-buttons\">\r\n                    {timer === 0 ? (\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"otp-btn resend\"\r\n                            onClick={handleResendOtp}\r\n                        >\r\n                            Resend Code\r\n                        </button>\r\n                    ) : (\r\n                        <button\r\n                            type=\"submit\"\r\n                            className={`otp-btn verify ${isComplete ? 'active' : ''}`}\r\n                            disabled={!isComplete}\r\n                        >\r\n                            Verify Code\r\n                        </button>\r\n                    )}\r\n                </div>\r\n            </form>\r\n            <ToastContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SentOtpForgotPassword;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D,SAASC,aAAa,EAAEC,WAAW,EAAEC,cAAc,QAAQ,2BAA2B;AACtF,OAAO,qCAAqC;AAC5C,OAAO,6CAA6C;AACpD,OAAOC,QAAQ,MAAM,YAAY,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnC,SAASC,qBAAqBA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAM,CAACC,GAAG,EAAEC,M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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}