{"ast":null,"code":"import axios from 'axios';\n\n// Create Axios instance\nconst apiClient = axios.create({\n  baseURL: 'https://your-api-url.com',\n  // Replace with your API base URL\n  withCredentials: true // Send cookies with requests\n});\n\n// Request Interceptor to include the access token in headers\napiClient.interceptors.request.use(config => {\n  const token = sessionStorage.getItem('accessToken');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response Interceptor to handle expired access tokens\napiClient.interceptors.response.use(response => {\n  return response;\n}, async error => {\n  const originalRequest = error.config;\n\n  // Check if the error is due to an expired access token\n  if (error.response && error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n\n    // Try refreshing the access token\n    try {\n      const response = await axios.post('/auth/refresh-token', {}, {\n        withCredentials: true\n      });\n      const {\n        accessToken\n      } = response.data;\n\n      // Store the new access token in sessionStorage\n      sessionStorage.setItem('accessToken', accessToken);\n\n      // Update the original request with the new access token\n      originalRequest.headers['Authorization'] = `Bearer ${accessToken}`;\n\n      // Retry the original request\n      return apiClient(originalRequest);\n    } catch (err) {\n      console.error('Token refresh failed:', err);\n      return Promise.reject(err);\n    }\n  }\n  return Promise.reject(error);\n});\nexport default apiClient;","map":{"version":3,"names":["axios","apiClient","create","baseURL","withCredentials","interceptors","request","use","config","token","sessionStorage","getItem","headers","error","Promise","reject","response","originalRequest","status","_retry","post","accessToken","data","setItem","err","console"],"sources":["C:/Users/thesh/Desktop/Authentication - Copy/frontend/src/utils/axiosConfig.jsx"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create Axios instance\r\nconst apiClient = axios.create({\r\n    baseURL: 'https://your-api-url.com', // Replace with your API base URL\r\n    withCredentials: true, // Send cookies with requests\r\n});\r\n\r\n// Request Interceptor to include the access token in headers\r\napiClient.interceptors.request.use((config) => {\r\n    const token = sessionStorage.getItem('accessToken');\r\n    if (token) {\r\n        config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n}, (error) => {\r\n    return Promise.reject(error);\r\n});\r\n\r\n// Response Interceptor to handle expired access tokens\r\napiClient.interceptors.response.use(\r\n    (response) => {\r\n        return response;\r\n    },\r\n    async (error) => {\r\n        const originalRequest = error.config;\r\n\r\n        // Check if the error is due to an expired access token\r\n        if (error.response && error.response.status === 401 && !originalRequest._retry) {\r\n            originalRequest._retry = true;\r\n\r\n            // Try refreshing the access token\r\n            try {\r\n                const response = await axios.post(\r\n                    '/auth/refresh-token',\r\n                    {},\r\n                    { withCredentials: true }\r\n                );\r\n                const { accessToken } = response.data;\r\n\r\n                // Store the new access token in sessionStorage\r\n                sessionStorage.setItem('accessToken', accessToken);\r\n\r\n                // Update the original request with the new access token\r\n                originalRequest.headers['Authorization'] = `Bearer ${accessToken}`;\r\n\r\n                // Retry the original request\r\n                return apiClient(originalRequest);\r\n            } catch (err) {\r\n                console.error('Token refresh failed:', err);\r\n                return Promise.reject(err);\r\n            }\r\n        }\r\n\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default apiClient;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC3BC,OAAO,EAAE,0BAA0B;EAAE;EACrCC,eAAe,EAAE,IAAI,CAAE;AAC3B,CAAC,CAAC;;AAEF;AACAH,SAAS,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EAC3C,MAAMC,KAAK,GAAGC,cAAc,CAACC,OAAO,CAAC,aAAa,CAAC;EACnD,IAAIF,KAAK,EAAE;IACPD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;EACvD;EACA,OAAOD,MAAM;AACjB,CAAC,EAAGK,KAAK,IAAK;EACV,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CAAC;;AAEF;AACAZ,SAAS,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC9BS,QAAQ,IAAK;EACV,OAAOA,QAAQ;AACnB,CAAC,EACD,MAAOH,KAAK,IAAK;EACb,MAAMI,eAAe,GAAGJ,KAAK,CAACL,MAAM;;EAEpC;EACA,IAAIK,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC5EF,eAAe,CAACE,MAAM,GAAG,IAAI;;IAE7B;IACA,IAAI;MACA,MAAMH,QAAQ,GAAG,MAAMhB,KAAK,CAACoB,IAAI,CAC7B,qBAAqB,EACrB,CAAC,CAAC,EACF;QAAEhB,eAAe,EAAE;MAAK,CAC5B,CAAC;MACD,MAAM;QAAEiB;MAAY,CAAC,GAAGL,QAAQ,CAACM,IAAI;;MAErC;MACAZ,cAAc,CAACa,OAAO,CAAC,aAAa,EAAEF,WAAW,CAAC;;MAElD;MACAJ,eAAe,CAACL,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUS,WAAW,EAAE;;MAElE;MACA,OAAOpB,SAAS,CAACgB,eAAe,CAAC;IACrC,CAAC,CAAC,OAAOO,GAAG,EAAE;MACVC,OAAO,CAACZ,KAAK,CAAC,uBAAuB,EAAEW,GAAG,CAAC;MAC3C,OAAOV,OAAO,CAACC,MAAM,CAACS,GAAG,CAAC;IAC9B;EACJ;EAEA,OAAOV,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAeZ,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}