{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thesh\\\\Desktop\\\\Authentication\\\\frontend\\\\src\\\\components\\\\Services\\\\ChatServices\\\\ChatServices.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport '../../../assets/style/ServicesStyle/ChatService.css';\nimport MessageInput from './MessageInput';\nimport { v4 as uuidv4 } from 'uuid'; // To generate unique IDs\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatService = ({\n  onClose\n}) => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [messages, setMessages] = useState({});\n  const messagesEndRef = useRef(null);\n  const handleSendMessage = useCallback(() => {\n    if (message.trim() && selectedUser) {\n      const newMessage = {\n        id: uuidv4(),\n        // Assign a unique ID to the message\n        text: message,\n        sender: 'user',\n        timestamp: new Date(),\n        status: 'sent' // Initial status\n      };\n\n      // Update the messages state with the new message\n      setMessages(prevMessages => ({\n        ...prevMessages,\n        [selectedUser.id]: [...(prevMessages[selectedUser.id] || []), newMessage]\n      }));\n      setMessage('');\n\n      // Simulate message status changes using message ID\n      setTimeout(() => updateMessageStatus(newMessage.id, 'delivered'), 1000);\n      setTimeout(() => updateMessageStatus(newMessage.id, 'seen'), 2000);\n    }\n  }, [message, selectedUser]);\n  const updateMessageStatus = (messageId, status) => {\n    setMessages(prevMessages => ({\n      ...prevMessages,\n      [selectedUser.id]: prevMessages[selectedUser.id].map(msg => msg.id === messageId ? {\n        ...msg,\n        status\n      } : msg)\n    }));\n  };\n  const handleUserSelect = useCallback(user => {\n    setSelectedUser(user);\n  }, []);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages, selectedUser]);\n  useEffect(() => {\n    if (selectedUser) {\n      setMessages(prevMessages => ({\n        ...prevMessages,\n        [selectedUser.id]: prevMessages[selectedUser.id] || [{\n          id: uuidv4(),\n          // Ensure even demo messages have an ID\n          text: \"Hey there! This is a demo message.\",\n          sender: 'other',\n          timestamp: new Date(),\n          status: 'seen'\n        }]\n      }));\n    }\n  }, [selectedUser]);\n  const formatTime = useCallback(date => {\n    return date.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  }, []);\n  const renderChatList = useCallback(() => /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"chat-list\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this), [selectedUser, handleUserSelect]);\n  const renderMessageGroups = useCallback(() => {\n    var _messages$selectedUse;\n    return (_messages$selectedUse = messages[selectedUser.id]) === null || _messages$selectedUse === void 0 ? void 0 : _messages$selectedUse.reduce((groups, msg, index, array) => {\n      const prevMsg = array[index - 1];\n      const timeDiff = prevMsg ? msg.timestamp - prevMsg.timestamp : Infinity;\n      const isNewGroup = !prevMsg || timeDiff > 30000 || prevMsg.sender !== msg.sender;\n      if (isNewGroup) {\n        groups.push([msg]);\n      } else {\n        groups[groups.length - 1].push(msg);\n      }\n      return groups;\n    }, []).map((group, groupIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `message-group ${group[0].sender === 'user' ? 'user-group' : 'other-group'}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-timestamp-center\",\n        children: formatTime(group[0].timestamp)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-group-content\",\n        children: [group[0].sender !== 'user' && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: selectedUser.avatar,\n          alt: selectedUser.name,\n          className: \"message-avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-bubble-group\",\n          children: group.map((msg, msgIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-bubble\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-content\",\n              children: msg.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 17\n            }, this)\n          }, msgIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), group[group.length - 1].sender === 'user' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-status\",\n        children: [group[group.length - 1].status === 'sent' && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"sent\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 59\n        }, this), group[group.length - 1].status === 'delivered' && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"delivered\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 64\n        }, this), group[group.length - 1].status === 'seen' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"seen-status\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: selectedUser.avatar,\n            alt: selectedUser.name,\n            className: \"seen-avatar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"seen-text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this)]\n    }, groupIndex, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this));\n  }, [messages, selectedUser, formatTime]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container-main-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-sidebar\",\n      children: renderChatList()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-main\",\n      children: selectedUser ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"massage-box-chat-header\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-messages-container\",\n          children: [renderMessageGroups(), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n          message: message,\n          setMessage: setMessage,\n          handleSendMessage: handleSendMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-chat-selected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatService, \"QaGPpkg7+D/qeXtKqICIA3cOv2k=\");\n_c = ChatService;\nexport default ChatService;\nvar _c;\n$RefreshReg$(_c, \"ChatService\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","MessageInput","v4","uuidv4","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatService","onClose","_s","message","setMessage","selectedUser","setSelectedUser","messages","setMessages","messagesEndRef","handleSendMessage","trim","newMessage","id","text","sender","timestamp","Date","status","prevMessages","setTimeout","updateMessageStatus","messageId","map","msg","handleUserSelect","user","_messagesEndRef$curre","current","scrollIntoView","behavior","formatTime","date","toLocaleTimeString","hour","minute","renderChatList","className","fileName","_jsxFileName","lineNumber","columnNumber","renderMessageGroups","_messages$selectedUse","reduce","groups","index","array","prevMsg","timeDiff","Infinity","isNewGroup","push","length","group","groupIndex","children","src","avatar","alt","name","msgIndex","ref","_c","$RefreshReg$"],"sources":["C:/Users/thesh/Desktop/Authentication/frontend/src/components/Services/ChatServices/ChatServices.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport '../../../assets/style/ServicesStyle/ChatService.css';\r\nimport MessageInput from './MessageInput';\r\nimport { v4 as uuidv4 } from 'uuid';  // To generate unique IDs\r\n\r\nconst ChatService = ({ onClose }) => {\r\n  const [message, setMessage] = useState('');\r\n  const [selectedUser, setSelectedUser] = useState(null);\r\n  const [messages, setMessages] = useState({});\r\n  const messagesEndRef = useRef(null);\r\n\r\n  const handleSendMessage = useCallback(() => {\r\n    if (message.trim() && selectedUser) {\r\n      const newMessage = { \r\n        id: uuidv4(),  // Assign a unique ID to the message\r\n        text: message, \r\n        sender: 'user', \r\n        timestamp: new Date(),\r\n        status: 'sent'  // Initial status\r\n      };\r\n      \r\n      // Update the messages state with the new message\r\n      setMessages(prevMessages => ({\r\n        ...prevMessages,\r\n        [selectedUser.id]: [...(prevMessages[selectedUser.id] || []), newMessage]\r\n      }));\r\n      setMessage('');\r\n\r\n      // Simulate message status changes using message ID\r\n      setTimeout(() => updateMessageStatus(newMessage.id, 'delivered'), 1000);\r\n      setTimeout(() => updateMessageStatus(newMessage.id, 'seen'), 2000);\r\n    }\r\n  }, [message, selectedUser]);\r\n\r\n  const updateMessageStatus = (messageId, status) => {\r\n    setMessages(prevMessages => ({\r\n      ...prevMessages,\r\n      [selectedUser.id]: prevMessages[selectedUser.id].map(msg =>\r\n        msg.id === messageId ? { ...msg, status } : msg\r\n      )\r\n    }));\r\n  };\r\n\r\n  const handleUserSelect = useCallback((user) => {\r\n    setSelectedUser(user);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages, selectedUser]);\r\n\r\n  useEffect(() => {\r\n    if (selectedUser) {\r\n      setMessages(prevMessages => ({\r\n        ...prevMessages,\r\n        [selectedUser.id]: prevMessages[selectedUser.id] || [{\r\n          id: uuidv4(),  // Ensure even demo messages have an ID\r\n          text: \"Hey there! This is a demo message.\",\r\n          sender: 'other',\r\n          timestamp: new Date(),\r\n          status: 'seen'\r\n        }]\r\n      }));\r\n    }\r\n  }, [selectedUser]);\r\n\r\n  const formatTime = useCallback((date) => {\r\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n  }, []);\r\n\r\n  const renderChatList = useCallback(() => (\r\n    <ul className=\"chat-list\">\r\n      {/* Your user list rendering code */}\r\n    </ul>\r\n  ), [selectedUser, handleUserSelect]);\r\n\r\n  const renderMessageGroups = useCallback(() => (\r\n    messages[selectedUser.id]?.reduce((groups, msg, index, array) => {\r\n      const prevMsg = array[index - 1];\r\n      const timeDiff = prevMsg ? msg.timestamp - prevMsg.timestamp : Infinity;\r\n      const isNewGroup = !prevMsg || timeDiff > 30000 || prevMsg.sender !== msg.sender;\r\n\r\n      if (isNewGroup) {\r\n        groups.push([msg]);\r\n      } else {\r\n        groups[groups.length - 1].push(msg);\r\n      }\r\n      return groups;\r\n    }, []).map((group, groupIndex) => (\r\n      <div key={groupIndex} className={`message-group ${group[0].sender === 'user' ? 'user-group' : 'other-group'}`}>\r\n        <div className=\"message-timestamp-center\">\r\n          {formatTime(group[0].timestamp)}\r\n        </div>\r\n        <div className='message-group-content'>\r\n          {group[0].sender !== 'user' && (\r\n            <img src={selectedUser.avatar} alt={selectedUser.name} className=\"message-avatar\" />\r\n          )}\r\n          <div className=\"message-bubble-group\">\r\n            {group.map((msg, msgIndex) => (\r\n              <div key={msgIndex} className=\"message-bubble\">\r\n                <div className=\"message-content\">{msg.text}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {group[group.length - 1].sender === 'user' && (\r\n          <div className=\"message-status\">\r\n            {group[group.length - 1].status === 'sent' && <span>sent</span>}\r\n            {group[group.length - 1].status === 'delivered' && <span>delivered</span>}\r\n            {group[group.length - 1].status === 'seen' && (\r\n              <div className=\"seen-status\">\r\n                <img src={selectedUser.avatar} alt={selectedUser.name} className=\"seen-avatar\" />\r\n                <span className=\"seen-text\"></span>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    ))\r\n  ), [messages, selectedUser, formatTime]);\r\n\r\n  return (\r\n    <div className=\"chat-container-main-wrapper\">\r\n      <div className=\"chat-sidebar\">\r\n        {/* Sidebar rendering */}\r\n        {renderChatList()}\r\n      </div>\r\n\r\n      <div className=\"chat-main\">\r\n        {selectedUser ? (\r\n          <>\r\n            <div className=\"massage-box-chat-header\">\r\n              {/* Header section */}\r\n            </div>\r\n\r\n            <div className=\"chat-messages-container\">\r\n              {renderMessageGroups()}\r\n              <div ref={messagesEndRef} />\r\n            </div>\r\n\r\n            <MessageInput\r\n              message={message}\r\n              setMessage={setMessage}\r\n              handleSendMessage={handleSendMessage}\r\n            />\r\n          </>\r\n        ) : (\r\n          <div className=\"no-chat-selected\">\r\n            {/* Placeholder when no user is selected */}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}