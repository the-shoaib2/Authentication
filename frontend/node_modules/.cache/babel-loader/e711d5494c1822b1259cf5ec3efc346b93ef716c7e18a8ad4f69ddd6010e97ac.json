{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thesh\\\\Desktop\\\\Authentication\\\\frontend\\\\src\\\\components\\\\ConfirmAccountEmail.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ConfirmAccountPopup({\n  isActive,\n  email,\n  token,\n  show,\n  onClose,\n  accountExpiryDate,\n  onLogout\n}) {\n  _s();\n  const [showPopup, setShowPopup] = useState(false);\n  const [remainingDays, setRemainingDays] = useState(0);\n  const [remainingHours, setRemainingHours] = useState(0);\n  const [remainingMinutes, setRemainingMinutes] = useState(0);\n  const [isExpired, setIsExpired] = useState(false);\n  const [expiryDate, setExpiryDate] = useState(new Date());\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (!isActive && show) {\n      setShowPopup(true);\n    }\n  }, [isActive, show]);\n  useEffect(() => {\n    if (accountExpiryDate) {\n      const checkAccountStatus = async () => {\n        try {\n          const response = await fetch('http://localhost:8080/Users/check-account-status', {\n            method: 'GET',\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          });\n          const data = await response.json();\n          if (data.expired) {\n            setIsExpired(true);\n            onLogout();\n            navigate('/login');\n          } else {\n            setRemainingDays(data.days);\n            setRemainingHours(data.hours);\n            setRemainingMinutes(data.minutes);\n            setExpiryDate(new Date(data.expiryDate));\n            setIsExpired(false);\n          }\n        } catch (error) {\n          console.error('Error checking account status:', error);\n        }\n      };\n      checkAccountStatus();\n\n      // Set up an interval to check the status every minute\n      const intervalId = setInterval(checkAccountStatus, 60000);\n\n      // Clean up the interval on component unmount\n      return () => clearInterval(intervalId);\n    }\n  }, [accountExpiryDate, token, onLogout, navigate]);\n  if (isActive) return null;\n  const handleClose = () => {\n    setShowPopup(false);\n    if (onClose) onClose();\n  };\n  const getMessage = () => {\n    if (isExpired) {\n      return \"Your account has expired and will be deleted soon. Please contact support if you wish to reactivate it.\";\n    } else if (remainingMinutes <= 5) {\n      return `Your account will expire in ${remainingMinutes} minute${remainingMinutes !== 1 ? 's' : ''}. Please confirm your email immediately to avoid account deletion.`;\n    } else if (remainingDays > 0) {\n      return `Confirm your email within ${remainingDays} day${remainingDays !== 1 ? 's' : ''}. Expires: ${new Date(accountExpiryDate).toLocaleDateString()}. Account will be auto-deleted after expiration. Note: Account deletion unavailable after confirmation.`;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `confirm-account-bar ${isExpired || remainingMinutes <= 5 ? 'warning' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"confirm-account-message\",\n        children: getMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), !isExpired && /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/verify-email\",\n        className: \"confirm-email-button\",\n        state: {\n          token: token,\n          email: email\n        },\n        children: \"Confirm Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), showPopup && !isExpired && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inactive-account-message-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-popup-button\",\n          onClick: handleClose\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Your account is not confirmed yet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: getMessage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/verify-email\",\n          className: \"confirm-account-link\",\n          state: {\n            token: token,\n            email: email\n          },\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"confirm-account-button\",\n            children: \"Activate Account\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n}\n_s(ConfirmAccountPopup, \"XOGb2EkvXgPfMf5oJKUbub4cWVk=\", false, function () {\n  return [useNavigate];\n});\n_c = ConfirmAccountPopup;\nexport default ConfirmAccountPopup;\nvar _c;\n$RefreshReg$(_c, \"ConfirmAccountPopup\");","map":{"version":3,"names":["React","useEffect","useState","Link","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","ConfirmAccountPopup","isActive","email","token","show","onClose","accountExpiryDate","onLogout","_s","showPopup","setShowPopup","remainingDays","setRemainingDays","remainingHours","setRemainingHours","remainingMinutes","setRemainingMinutes","isExpired","setIsExpired","expiryDate","setExpiryDate","Date","navigate","checkAccountStatus","response","fetch","method","headers","data","json","expired","days","hours","minutes","error","console","intervalId","setInterval","clearInterval","handleClose","getMessage","toLocaleDateString","children","className","fileName","_jsxFileName","lineNumber","columnNumber","to","state","onClick","_c","$RefreshReg$"],"sources":["C:/Users/thesh/Desktop/Authentication/frontend/src/components/ConfirmAccountEmail.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\n\r\nfunction ConfirmAccountPopup({ isActive, email, token, show, onClose, accountExpiryDate, onLogout }) {\r\n    const [showPopup, setShowPopup] = useState(false);\r\n    const [remainingDays, setRemainingDays] = useState(0);\r\n    const [remainingHours, setRemainingHours] = useState(0);\r\n    const [remainingMinutes, setRemainingMinutes] = useState(0);\r\n    const [isExpired, setIsExpired] = useState(false);\r\n    const [expiryDate, setExpiryDate] = useState(new Date());\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        if (!isActive && show) {\r\n            setShowPopup(true);\r\n        }\r\n    }, [isActive, show]);\r\n\r\n    useEffect(() => {\r\n        if (accountExpiryDate) {\r\n            const checkAccountStatus = async () => {\r\n                try {\r\n                    const response = await fetch('http://localhost:8080/Users/check-account-status', {\r\n                        method: 'GET',\r\n                        headers: {\r\n                            'Authorization': `Bearer ${token}`\r\n                        }\r\n                    });\r\n                    const data = await response.json();\r\n                    if (data.expired) {\r\n                        setIsExpired(true);\r\n                        onLogout();\r\n                        navigate('/login');\r\n                    } else {\r\n                        setRemainingDays(data.days);\r\n                        setRemainingHours(data.hours);\r\n                        setRemainingMinutes(data.minutes);\r\n                        setExpiryDate(new Date(data.expiryDate));\r\n                        setIsExpired(false);\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error checking account status:', error);\r\n                }\r\n            };\r\n            checkAccountStatus();\r\n\r\n            // Set up an interval to check the status every minute\r\n            const intervalId = setInterval(checkAccountStatus, 60000);\r\n\r\n            // Clean up the interval on component unmount\r\n            return () => clearInterval(intervalId);\r\n        }\r\n    }, [accountExpiryDate, token, onLogout, navigate]);\r\n\r\n    if (isActive) return null;\r\n\r\n    const handleClose = () => {\r\n        setShowPopup(false);\r\n        if (onClose) onClose();\r\n    };\r\n\r\n    const getMessage = () => {\r\n        if (isExpired) {\r\n            return \"Your account has expired and will be deleted soon. Please contact support if you wish to reactivate it.\";\r\n        } else if (remainingMinutes <= 5) {\r\n            return `Your account will expire in ${remainingMinutes} minute${remainingMinutes !== 1 ? 's' : ''}. Please confirm your email immediately to avoid account deletion.`;\r\n        } else if (remainingDays > 0) {\r\n            return `Confirm your email within ${remainingDays} day${remainingDays !== 1 ? 's' : ''}. Expires: ${new Date(accountExpiryDate).toLocaleDateString()}. Account will be auto-deleted after expiration. Note: Account deletion unavailable after confirmation.`;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className={`confirm-account-bar ${isExpired || remainingMinutes <= 5 ? 'warning' : ''}`}>\r\n                <span className=\"confirm-account-message\">\r\n                    {getMessage()}\r\n                </span>\r\n                {!isExpired && (\r\n                    <Link \r\n                        to=\"/verify-email\" \r\n                        className=\"confirm-email-button\"\r\n                        state={{ \r\n                            token: token,\r\n                            email: email\r\n                        }}\r\n                    >\r\n                        Confirm Email\r\n                    </Link>\r\n                )}\r\n            </div>\r\n            {showPopup && !isExpired && (\r\n                <div className=\"popup-overlay\">\r\n                    <div className=\"inactive-account-message-container\">\r\n                        <button className=\"close-popup-button\" onClick={handleClose}>\r\n                            {/* &times; */}\r\n                        </button>\r\n                        <h1>Your account is not confirmed yet.</h1>\r\n                        <p>{getMessage()}</p>\r\n                        <Link \r\n                            to=\"/verify-email\" \r\n                            className=\"confirm-account-link\" \r\n                            state={{ \r\n                                token: token,\r\n                                email: email\r\n                            }}\r\n                        >\r\n                            <button className=\"confirm-account-button\">\r\n                                Activate Account\r\n                            </button>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ConfirmAccountPopup;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}