{"ast":null,"code":"'use strict';\n\nimport utils from './../utils.js';\nimport settle from './../core/settle.js';\nimport buildFullPath from '../core/buildFullPath.js';\nimport buildURL from './../helpers/buildURL.js';\nimport { getProxyForUrl } from 'proxy-from-env';\nimport http from 'http';\nimport https from 'https';\nimport util from 'util';\nimport followRedirects from 'follow-redirects';\nimport zlib from 'zlib';\nimport { VERSION } from '../env/data.js';\nimport transitionalDefaults from '../defaults/transitional.js';\nimport AxiosError from '../core/AxiosError.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport platform from '../platform/index.js';\nimport fromDataURI from '../helpers/fromDataURI.js';\nimport stream from 'stream';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport AxiosTransformStream from '../helpers/AxiosTransformStream.js';\nimport { EventEmitter } from 'events';\nimport formDataToStream from \"../helpers/formDataToStream.js\";\nimport readBlob from \"../helpers/readBlob.js\";\nimport ZlibHeaderTransformStream from '../helpers/ZlibHeaderTransformStream.js';\nimport callbackify from \"../helpers/callbackify.js\";\nimport { progressEventReducer, progressEventDecorator, asyncDecorator } from \"../helpers/progressEventReducer.js\";\nconst zlibOptions = {\n  flush: zlib.constants.Z_SYNC_FLUSH,\n  finishFlush: zlib.constants.Z_SYNC_FLUSH\n};\nconst brotliOptions = {\n  flush: zlib.constants.BROTLI_OPERATION_FLUSH,\n  finishFlush: zlib.constants.BROTLI_OPERATION_FLUSH\n};\nconst isBrotliSupported = utils.isFunction(zlib.createBrotliDecompress);\nconst {\n  http: httpFollow,\n  https: httpsFollow\n} = followRedirects;\nconst isHttps = /https:?/;\nconst supportedProtocols = platform.protocols.map(protocol => {\n  return protocol + ':';\n});\nconst flushOnFinish = (stream, [throttled, flush]) => {\n  stream.on('end', flush).on('error', flush);\n  return throttled;\n};\n\n/**\n * If the proxy or config beforeRedirects functions are defined, call them with the options\n * object.\n *\n * @param {Object<string, any>} options - The options object that was passed to the request.\n *\n * @returns {Object<string, any>}\n */\nfunction dispatchBeforeRedirect(options, responseDetails) {\n  if (options.beforeRedirects.proxy) {\n    options.beforeRedirects.proxy(options);\n  }\n  if (options.beforeRedirects.config) {\n    options.beforeRedirects.config(options, responseDetails);\n  }\n}\n\n/**\n * If the proxy or config afterRedirects functions are defined, call them with the options\n *\n * @param {http.ClientRequestArgs} options\n * @param {AxiosProxyConfig} configProxy configuration from Axios options object\n * @param {string} location\n *\n * @returns {http.ClientRequestArgs}\n */\nfunction setProxy(options, configProxy, location) {\n  let proxy = configProxy;\n  if (!proxy && proxy !== false) {\n    const proxyUrl = getProxyForUrl(location);\n    if (proxyUrl) {\n      proxy = new URL(proxyUrl);\n    }\n  }\n  if (proxy) {\n    // Basic proxy authorization\n    if (proxy.username) {\n      proxy.auth = (proxy.username || '') + ':' + (proxy.password || '');\n    }\n    if (proxy.auth) {\n      // Support proxy auth object form\n      if (proxy.auth.username || proxy.auth.password) {\n        proxy.auth = (proxy.auth.username || '') + ':' + (proxy.auth.password || '');\n      }\n      const base64 = Buffer.from(proxy.auth, 'utf8').toString('base64');\n      options.headers['Proxy-Authorization'] = 'Basic ' + base64;\n    }\n    options.headers.host = options.hostname + (options.port ? ':' + options.port : '');\n    const proxyHost = proxy.hostname || proxy.host;\n    options.hostname = proxyHost;\n    // Replace 'host' since options is not a URL object\n    options.host = proxyHost;\n    options.port = proxy.port;\n    options.path = location;\n    if (proxy.protocol) {\n      options.protocol = proxy.protocol.includes(':') ? proxy.protocol : `${proxy.protocol}:`;\n    }\n  }\n  options.beforeRedirects.proxy = function beforeRedirect(redirectOptions) {\n    // Configure proxy for redirected request, passing the original config proxy to apply\n    // the exact same logic as if the redirected request was performed by axios directly.\n    setProxy(redirectOptions, configProxy, redirectOptions.href);\n  };\n}\nconst isHttpAdapterSupported = typeof process !== 'undefined' && utils.kindOf(process) === 'process';\n\n// temporary hotfix\n\nconst wrapAsync = asyncExecutor => {\n  return new Promise((resolve, reject) => {\n    let onDone;\n    let isDone;\n    const done = (value, isRejected) => {\n      if (isDone) return;\n      isDone = true;\n      onDone && onDone(value, isRejected);\n    };\n    const _resolve = value => {\n      done(value);\n      resolve(value);\n    };\n    const _reject = reason => {\n      done(reason, true);\n      reject(reason);\n    };\n    asyncExecutor(_resolve, _reject, onDoneHandler => onDone = onDoneHandler).catch(_reject);\n  });\n};\nconst resolveFamily = ({\n  address,\n  family\n}) => {\n  if (!utils.isString(address)) {\n    throw TypeError('address must be a string');\n  }\n  return {\n    address,\n    family: family || (address.indexOf('.') < 0 ? 6 : 4)\n  };\n};\nconst buildAddressEntry = (address, family) => resolveFamily(utils.isObject(address) ? address : {\n  address,\n  family\n});\n\n/*eslint consistent-return:0*/\nexport default isHttpAdapterSupported && function httpAdapter(config) {\n  return wrapAsync(async function dispatchHttpRequest(resolve, reject, onDone) {\n    let {\n      data,\n      lookup,\n      family\n    } = config;\n    const {\n      responseType,\n      responseEncoding\n    } = config;\n    const method = config.method.toUpperCase();\n    let isDone;\n    let rejected = false;\n    let req;\n    if (lookup) {\n      const _lookup = callbackify(lookup, value => utils.isArray(value) ? value : [value]);\n      // hotfix to support opt.all option which is required for node 20.x\n      lookup = (hostname, opt, cb) => {\n        _lookup(hostname, opt, (err, arg0, arg1) => {\n          if (err) {\n            return cb(err);\n          }\n          const addresses = utils.isArray(arg0) ? arg0.map(addr => buildAddressEntry(addr)) : [buildAddressEntry(arg0, arg1)];\n          opt.all ? cb(err, addresses) : cb(err, addresses[0].address, addresses[0].family);\n        });\n      };\n    }\n\n    // temporary internal emitter until the AxiosRequest class will be implemented\n    const emitter = new EventEmitter();\n    const onFinished = () => {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(abort);\n      }\n      if (config.signal) {\n        config.signal.removeEventListener('abort', abort);\n      }\n      emitter.removeAllListeners();\n    };\n    onDone((value, isRejected) => {\n      isDone = true;\n      if (isRejected) {\n        rejected = true;\n        onFinished();\n      }\n    });\n    function abort(reason) {\n      emitter.emit('abort', !reason || reason.type ? new CanceledError(null, config, req) : reason);\n    }\n    emitter.once('abort', reject);\n    if (config.cancelToken || config.signal) {\n      config.cancelToken && config.cancelToken.subscribe(abort);\n      if (config.signal) {\n        config.signal.aborted ? abort() : config.signal.addEventListener('abort', abort);\n      }\n    }\n\n    // Parse url\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    const parsed = new URL(fullPath, utils.hasBrowserEnv ? platform.origin : undefined);\n    const protocol = parsed.protocol || supportedProtocols[0];\n    if (protocol === 'data:') {\n      let convertedData;\n      if (method !== 'GET') {\n        return settle(resolve, reject, {\n          status: 405,\n          statusText: 'method not allowed',\n          headers: {},\n          config\n        });\n      }\n      try {\n        convertedData = fromDataURI(config.url, responseType === 'blob', {\n          Blob: config.env && config.env.Blob\n        });\n      } catch (err) {\n        throw AxiosError.from(err, AxiosError.ERR_BAD_REQUEST, config);\n      }\n      if (responseType === 'text') {\n        convertedData = convertedData.toString(responseEncoding);\n        if (!responseEncoding || responseEncoding === 'utf8') {\n          convertedData = utils.stripBOM(convertedData);\n        }\n      } else if (responseType === 'stream') {\n        convertedData = stream.Readable.from(convertedData);\n      }\n      return settle(resolve, reject, {\n        data: convertedData,\n        status: 200,\n        statusText: 'OK',\n        headers: new AxiosHeaders(),\n        config\n      });\n    }\n    if (supportedProtocols.indexOf(protocol) === -1) {\n      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n    }\n    const headers = AxiosHeaders.from(config.headers).normalize();\n\n    // Set User-Agent (required by some servers)\n    // See https://github.com/axios/axios/issues/69\n    // User-Agent is specified; handle case where no UA header is desired\n    // Only set header if it hasn't been set in config\n    headers.set('User-Agent', 'axios/' + VERSION, false);\n    const {\n      onUploadProgress,\n      onDownloadProgress\n    } = config;\n    const maxRate = config.maxRate;\n    let maxUploadRate = undefined;\n    let maxDownloadRate = undefined;\n\n    // support for spec compliant FormData objects\n    if (utils.isSpecCompliantForm(data)) {\n      const userBoundary = headers.getContentType(/boundary=([-_\\w\\d]{10,70})/i);\n      data = formDataToStream(data, formHeaders => {\n        headers.set(formHeaders);\n      }, {\n        tag: `axios-${VERSION}-boundary`,\n        boundary: userBoundary && userBoundary[1] || undefined\n      });\n      // support for https://www.npmjs.com/package/form-data api\n    } else if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n      headers.set(data.getHeaders());\n      if (!headers.hasContentLength()) {\n        try {\n          const knownLength = await util.promisify(data.getLength).call(data);\n          Number.isFinite(knownLength) && knownLength >= 0 && headers.setContentLength(knownLength);\n          /*eslint no-empty:0*/\n        } catch (e) {}\n      }\n    } else if (utils.isBlob(data)) {\n      data.size && headers.setContentType(data.type || 'application/octet-stream');\n      headers.setContentLength(data.size || 0);\n      data = stream.Readable.from(readBlob(data));\n    } else if (data && !utils.isStream(data)) {\n      if (Buffer.isBuffer(data)) {\n        // Nothing to do...\n      } else if (utils.isArrayBuffer(data)) {\n        data = Buffer.from(new Uint8Array(data));\n      } else if (utils.isString(data)) {\n        data = Buffer.from(data, 'utf-8');\n      } else {\n        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n      }\n\n      // Add Content-Length header if data exists\n      headers.setContentLength(data.length, false);\n      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n      }\n    }\n    const contentLength = utils.toFiniteNumber(headers.getContentLength());\n    if (utils.isArray(maxRate)) {\n      maxUploadRate = maxRate[0];\n      maxDownloadRate = maxRate[1];\n    } else {\n      maxUploadRate = maxDownloadRate = maxRate;\n    }\n    if (data && (onUploadProgress || maxUploadRate)) {\n      if (!utils.isStream(data)) {\n        data = stream.Readable.from(data, {\n          objectMode: false\n        });\n      }\n      data = stream.pipeline([data, new AxiosTransformStream({\n        maxRate: utils.toFiniteNumber(maxUploadRate)\n      })], utils.noop);\n      onUploadProgress && data.on('progress', flushOnFinish(data, progressEventDecorator(contentLength, progressEventReducer(asyncDecorator(onUploadProgress), false, 3))));\n    }\n\n    // HTTP basic authentication\n    let auth = undefined;\n    if (config.auth) {\n      const username = config.auth.username || '';\n      const password = config.auth.password || '';\n      auth = username + ':' + password;\n    }\n    if (!auth && parsed.username) {\n      const urlUsername = parsed.username;\n      const urlPassword = parsed.password;\n      auth = urlUsername + ':' + urlPassword;\n    }\n    auth && headers.delete('authorization');\n    let path;\n    try {\n      path = buildURL(parsed.pathname + parsed.search, config.params, config.paramsSerializer).replace(/^\\?/, '');\n    } catch (err) {\n      const customErr = new Error(err.message);\n      customErr.config = config;\n      customErr.url = config.url;\n      customErr.exists = true;\n      return reject(customErr);\n    }\n    headers.set('Accept-Encoding', 'gzip, compress, deflate' + (isBrotliSupported ? ', br' : ''), false);\n    const options = {\n      path,\n      method: method,\n      headers: headers.toJSON(),\n      agents: {\n        http: config.httpAgent,\n        https: config.httpsAgent\n      },\n      auth,\n      protocol,\n      family,\n      beforeRedirect: dispatchBeforeRedirect,\n      beforeRedirects: {}\n    };\n\n    // cacheable-lookup integration hotfix\n    !utils.isUndefined(lookup) && (options.lookup = lookup);\n    if (config.socketPath) {\n      options.socketPath = config.socketPath;\n    } else {\n      options.hostname = parsed.hostname;\n      options.port = parsed.port;\n      setProxy(options, config.proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n    }\n    let transport;\n    const isHttpsRequest = isHttps.test(options.protocol);\n    options.agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n    if (config.transport) {\n      transport = config.transport;\n    } else if (config.maxRedirects === 0) {\n      transport = isHttpsRequest ? https : http;\n    } else {\n      if (config.maxRedirects) {\n        options.maxRedirects = config.maxRedirects;\n      }\n      if (config.beforeRedirect) {\n        options.beforeRedirects.config = config.beforeRedirect;\n      }\n      transport = isHttpsRequest ? httpsFollow : httpFollow;\n    }\n    if (config.maxBodyLength > -1) {\n      options.maxBodyLength = config.maxBodyLength;\n    } else {\n      // follow-redirects does not skip comparison, so it should always succeed for axios -1 unlimited\n      options.maxBodyLength = Infinity;\n    }\n    if (config.insecureHTTPParser) {\n      options.insecureHTTPParser = config.insecureHTTPParser;\n    }\n\n    // Create the request\n    req = transport.request(options, function handleResponse(res) {\n      if (req.destroyed) return;\n      const streams = [res];\n      const responseLength = +res.headers['content-length'];\n      if (onDownloadProgress || maxDownloadRate) {\n        const transformStream = new AxiosTransformStream({\n          maxRate: utils.toFiniteNumber(maxDownloadRate)\n        });\n        onDownloadProgress && transformStream.on('progress', flushOnFinish(transformStream, progressEventDecorator(responseLength, progressEventReducer(asyncDecorator(onDownloadProgress), true, 3))));\n        streams.push(transformStream);\n      }\n\n      // decompress the response body transparently if required\n      let responseStream = res;\n\n      // return the last request in case of redirects\n      const lastRequest = res.req || req;\n\n      // if decompress disabled we should not decompress\n      if (config.decompress !== false && res.headers['content-encoding']) {\n        // if no content, but headers still say that it is encoded,\n        // remove the header not confuse downstream operations\n        if (method === 'HEAD' || res.statusCode === 204) {\n          delete res.headers['content-encoding'];\n        }\n        switch ((res.headers['content-encoding'] || '').toLowerCase()) {\n          /*eslint default-case:0*/\n          case 'gzip':\n          case 'x-gzip':\n          case 'compress':\n          case 'x-compress':\n            // add the unzipper to the body stream processing pipeline\n            streams.push(zlib.createUnzip(zlibOptions));\n\n            // remove the content-encoding in order to not confuse downstream operations\n            delete res.headers['content-encoding'];\n            break;\n          case 'deflate':\n            streams.push(new ZlibHeaderTransformStream());\n\n            // add the unzipper to the body stream processing pipeline\n            streams.push(zlib.createUnzip(zlibOptions));\n\n            // remove the content-encoding in order to not confuse downstream operations\n            delete res.headers['content-encoding'];\n            break;\n          case 'br':\n            if (isBrotliSupported) {\n              streams.push(zlib.createBrotliDecompress(brotliOptions));\n              delete res.headers['content-encoding'];\n            }\n        }\n      }\n      responseStream = streams.length > 1 ? stream.pipeline(streams, utils.noop) : streams[0];\n      const offListeners = stream.finished(responseStream, () => {\n        offListeners();\n        onFinished();\n      });\n      const response = {\n        status: res.statusCode,\n        statusText: res.statusMessage,\n        headers: new AxiosHeaders(res.headers),\n        config,\n        request: lastRequest\n      };\n      if (responseType === 'stream') {\n        response.data = responseStream;\n        settle(resolve, reject, response);\n      } else {\n        const responseBuffer = [];\n        let totalResponseBytes = 0;\n        responseStream.on('data', function handleStreamData(chunk) {\n          responseBuffer.push(chunk);\n          totalResponseBytes += chunk.length;\n\n          // make sure the content length is not over the maxContentLength if specified\n          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n            // stream.destroy() emit aborted event before calling reject() on Node.js v16\n            rejected = true;\n            responseStream.destroy();\n            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n          }\n        });\n        responseStream.on('aborted', function handlerStreamAborted() {\n          if (rejected) {\n            return;\n          }\n          const err = new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest);\n          responseStream.destroy(err);\n          reject(err);\n        });\n        responseStream.on('error', function handleStreamError(err) {\n          if (req.destroyed) return;\n          reject(AxiosError.from(err, null, config, lastRequest));\n        });\n        responseStream.on('end', function handleStreamEnd() {\n          try {\n            let responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n            if (responseType !== 'arraybuffer') {\n              responseData = responseData.toString(responseEncoding);\n              if (!responseEncoding || responseEncoding === 'utf8') {\n                responseData = utils.stripBOM(responseData);\n              }\n            }\n            response.data = responseData;\n          } catch (err) {\n            return reject(AxiosError.from(err, null, config, response.request, response));\n          }\n          settle(resolve, reject, response);\n        });\n      }\n      emitter.once('abort', err => {\n        if (!responseStream.destroyed) {\n          responseStream.emit('error', err);\n          responseStream.destroy();\n        }\n      });\n    });\n    emitter.once('abort', err => {\n      reject(err);\n      req.destroy(err);\n    });\n\n    // Handle errors\n    req.on('error', function handleRequestError(err) {\n      // @todo remove\n      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n      reject(AxiosError.from(err, null, config, req));\n    });\n\n    // set tcp keep alive to prevent drop connection by peer\n    req.on('socket', function handleRequestSocket(socket) {\n      // default interval of sending ack packet is 1 minute\n      socket.setKeepAlive(true, 1000 * 60);\n    });\n\n    // Handle request timeout\n    if (config.timeout) {\n      // This is forcing a int timeout to avoid problems if the `req` interface doesn't handle other types.\n      const timeout = parseInt(config.timeout, 10);\n      if (Number.isNaN(timeout)) {\n        reject(new AxiosError('error trying to parse `config.timeout` to int', AxiosError.ERR_BAD_OPTION_VALUE, config, req));\n        return;\n      }\n\n      // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.\n      // And timer callback will be fired, and abort() will be invoked before connection, then get \"socket hang up\" and code ECONNRESET.\n      // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.\n      // And then these socket which be hang up will devouring CPU little by little.\n      // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.\n      req.setTimeout(timeout, function handleRequestTimeout() {\n        if (isDone) return;\n        let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';\n        const transitional = config.transitional || transitionalDefaults;\n        if (config.timeoutErrorMessage) {\n          timeoutErrorMessage = config.timeoutErrorMessage;\n        }\n        reject(new AxiosError(timeoutErrorMessage, transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED, config, req));\n        abort();\n      });\n    }\n\n    // Send the request\n    if (utils.isStream(data)) {\n      let ended = false;\n      let errored = false;\n      data.on('end', () => {\n        ended = true;\n      });\n      data.once('error', err => {\n        errored = true;\n        req.destroy(err);\n      });\n      data.on('close', () => {\n        if (!ended && !errored) {\n          abort(new CanceledError('Request stream has been aborted', config, req));\n        }\n      });\n      data.pipe(req);\n    } else {\n      req.end(data);\n    }\n  });\n};\nexport const __setProxy = setProxy;","map":{"version":3,"names":["utils","settle","buildFullPath","buildURL","getProxyForUrl","http","https","util","followRedirects","zlib","VERSION","transitionalDefaults","AxiosError","CanceledError","platform","fromDataURI","stream","AxiosHeaders","AxiosTransformStream","EventEmitter","formDataToStream","readBlob","ZlibHeaderTransformStream","callbackify","progressEventReducer","progressEventDecorator","asyncDecorator","zlibOptions","flush","constants","Z_SYNC_FLUSH","finishFlush","brotliOptions","BROTLI_OPERATION_FLUSH","isBrotliSupported","isFunction","createBrotliDecompress","httpFollow","httpsFollow","isHttps","supportedProtocols","protocols","map","protocol","flushOnFinish","throttled","on","dispatchBeforeRedirect","options","responseDetails","beforeRedirects","proxy","config","setProxy","configProxy","location","proxyUrl","URL","username","auth","password","base64","Buffer","from","toString","headers","host","hostname","port","proxyHost","path","includes","beforeRedirect","redirectOptions","href","isHttpAdapterSupported","process","kindOf","wrapAsync","asyncExecutor","Promise","resolve","reject","onDone","isDone","done","value","isRejected","_resolve","_reject","reason","onDoneHandler","catch","resolveFamily","address","family","isString","TypeError","indexOf","buildAddressEntry","isObject","httpAdapter","dispatchHttpRequest","data","lookup","responseType","responseEncoding","method","toUpperCase","rejected","req","_lookup","isArray","opt","cb","err","arg0","arg1","addresses","addr","all","emitter","onFinished","cancelToken","unsubscribe","abort","signal","removeEventListener","removeAllListeners","emit","type","once","subscribe","aborted","addEventListener","fullPath","baseURL","url","parsed","hasBrowserEnv","origin","undefined","convertedData","status","statusText","Blob","env","ERR_BAD_REQUEST","stripBOM","Readable","normalize","set","onUploadProgress","onDownloadProgress","maxRate","maxUploadRate","maxDownloadRate","isSpecCompliantForm","userBoundary","getContentType","formHeaders","tag","boundary","isFormData","getHeaders","hasContentLength","knownLength","promisify","getLength","call","Number","isFinite","setContentLength","e","isBlob","size","setContentType","isStream","isBuffer","isArrayBuffer","Uint8Array","length","maxBodyLength","contentLength","toFiniteNumber","getContentLength","objectMode","pipeline","noop","urlUsername","urlPassword","delete","pathname","search","params","paramsSerializer","replace","customErr","Error","message","exists","toJSON","agents","httpAgent","httpsAgent","isUndefined","socketPath","transport","isHttpsRequest","test","agent","maxRedirects","Infinity","insecureHTTPParser","request","handleResponse","res","destroyed","streams","responseLength","transformStream","push","responseStream","lastRequest","decompress","statusCode","toLowerCase","createUnzip","offListeners","finished","response","statusMessage","responseBuffer","totalResponseBytes","handleStreamData","chunk","maxContentLength","destroy","ERR_BAD_RESPONSE","handlerStreamAborted","handleStreamError","handleStreamEnd","responseData","concat","handleRequestError","handleRequestSocket","socket","setKeepAlive","timeout","parseInt","isNaN","ERR_BAD_OPTION_VALUE","setTimeout","handleRequestTimeout","timeoutErrorMessage","transitional","clarifyTimeoutError","ETIMEDOUT","ECONNABORTED","ended","errored","pipe","end","__setProxy"],"sources":["C:/Users/thesh/Desktop/Authentication/frontend/node_modules/axios/lib/adapters/http.js"],"sourcesContent":["'use strict';\n\nimport utils from './../utils.js';\nimport settle from './../core/settle.js';\nimport buildFullPath from '../core/buildFullPath.js';\nimport buildURL from './../helpers/buildURL.js';\nimport {getProxyForUrl} from 'proxy-from-env';\nimport http from 'http';\nimport https from 'https';\nimport util from 'util';\nimport followRedirects from 'follow-redirects';\nimport zlib from 'zlib';\nimport {VERSION} from '../env/data.js';\nimport transitionalDefaults from '../defaults/transitional.js';\nimport AxiosError from '../core/AxiosError.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport platform from '../platform/index.js';\nimport fromDataURI from '../helpers/fromDataURI.js';\nimport stream from 'stream';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport AxiosTransformStream from '../helpers/AxiosTransformStream.js';\nimport {EventEmitter} from 'events';\nimport formDataToStream from \"../helpers/formDataToStream.js\";\nimport readBlob from \"../helpers/readBlob.js\";\nimport ZlibHeaderTransformStream from '../helpers/ZlibHeaderTransformStream.js';\nimport callbackify from \"../helpers/callbackify.js\";\nimport {progressEventReducer, progressEventDecorator, asyncDecorator} from \"../helpers/progressEventReducer.js\";\n\nconst zlibOptions = {\n  flush: zlib.constants.Z_SYNC_FLUSH,\n  finishFlush: zlib.constants.Z_SYNC_FLUSH\n};\n\nconst brotliOptions = {\n  flush: zlib.constants.BROTLI_OPERATION_FLUSH,\n  finishFlush: zlib.constants.BROTLI_OPERATION_FLUSH\n}\n\nconst isBrotliSupported = utils.isFunction(zlib.createBrotliDecompress);\n\nconst {http: httpFollow, https: httpsFollow} = followRedirects;\n\nconst isHttps = /https:?/;\n\nconst supportedProtocols = platform.protocols.map(protocol => {\n  return protocol + ':';\n});\n\nconst flushOnFinish = (stream, [throttled, flush]) => {\n  stream\n    .on('end', flush)\n    .on('error', flush);\n\n  return throttled;\n}\n\n/**\n * If the proxy or config beforeRedirects functions are defined, call them with the options\n * object.\n *\n * @param {Object<string, any>} options - The options object that was passed to the request.\n *\n * @returns {Object<string, any>}\n */\nfunction dispatchBeforeRedirect(options, responseDetails) {\n  if (options.beforeRedirects.proxy) {\n    options.beforeRedirects.proxy(options);\n  }\n  if (options.beforeRedirects.config) {\n    options.beforeRedirects.config(options, responseDetails);\n  }\n}\n\n/**\n * If the proxy or config afterRedirects functions are defined, call them with the options\n *\n * @param {http.ClientRequestArgs} options\n * @param {AxiosProxyConfig} configProxy configuration from Axios options object\n * @param {string} location\n *\n * @returns {http.ClientRequestArgs}\n */\nfunction setProxy(options, configProxy, location) {\n  let proxy = configProxy;\n  if (!proxy && proxy !== false) {\n    const proxyUrl = getProxyForUrl(location);\n    if (proxyUrl) {\n      proxy = new URL(proxyUrl);\n    }\n  }\n  if (proxy) {\n    // Basic proxy authorization\n    if (proxy.username) {\n      proxy.auth = (proxy.username || '') + ':' + (proxy.password || '');\n    }\n\n    if (proxy.auth) {\n      // Support proxy auth object form\n      if (proxy.auth.username || proxy.auth.password) {\n        proxy.auth = (proxy.auth.username || '') + ':' + (proxy.auth.password || '');\n      }\n      const base64 = Buffer\n        .from(proxy.auth, 'utf8')\n        .toString('base64');\n      options.headers['Proxy-Authorization'] = 'Basic ' + base64;\n    }\n\n    options.headers.host = options.hostname + (options.port ? ':' + options.port : '');\n    const proxyHost = proxy.hostname || proxy.host;\n    options.hostname = proxyHost;\n    // Replace 'host' since options is not a URL object\n    options.host = proxyHost;\n    options.port = proxy.port;\n    options.path = location;\n    if (proxy.protocol) {\n      options.protocol = proxy.protocol.includes(':') ? proxy.protocol : `${proxy.protocol}:`;\n    }\n  }\n\n  options.beforeRedirects.proxy = function beforeRedirect(redirectOptions) {\n    // Configure proxy for redirected request, passing the original config proxy to apply\n    // the exact same logic as if the redirected request was performed by axios directly.\n    setProxy(redirectOptions, configProxy, redirectOptions.href);\n  };\n}\n\nconst isHttpAdapterSupported = typeof process !== 'undefined' && utils.kindOf(process) === 'process';\n\n// temporary hotfix\n\nconst wrapAsync = (asyncExecutor) => {\n  return new Promise((resolve, reject) => {\n    let onDone;\n    let isDone;\n\n    const done = (value, isRejected) => {\n      if (isDone) return;\n      isDone = true;\n      onDone && onDone(value, isRejected);\n    }\n\n    const _resolve = (value) => {\n      done(value);\n      resolve(value);\n    };\n\n    const _reject = (reason) => {\n      done(reason, true);\n      reject(reason);\n    }\n\n    asyncExecutor(_resolve, _reject, (onDoneHandler) => (onDone = onDoneHandler)).catch(_reject);\n  })\n};\n\nconst resolveFamily = ({address, family}) => {\n  if (!utils.isString(address)) {\n    throw TypeError('address must be a string');\n  }\n  return ({\n    address,\n    family: family || (address.indexOf('.') < 0 ? 6 : 4)\n  });\n}\n\nconst buildAddressEntry = (address, family) => resolveFamily(utils.isObject(address) ? address : {address, family});\n\n/*eslint consistent-return:0*/\nexport default isHttpAdapterSupported && function httpAdapter(config) {\n  return wrapAsync(async function dispatchHttpRequest(resolve, reject, onDone) {\n    let {data, lookup, family} = config;\n    const {responseType, responseEncoding} = config;\n    const method = config.method.toUpperCase();\n    let isDone;\n    let rejected = false;\n    let req;\n\n    if (lookup) {\n      const _lookup = callbackify(lookup, (value) => utils.isArray(value) ? value : [value]);\n      // hotfix to support opt.all option which is required for node 20.x\n      lookup = (hostname, opt, cb) => {\n        _lookup(hostname, opt, (err, arg0, arg1) => {\n          if (err) {\n            return cb(err);\n          }\n\n          const addresses = utils.isArray(arg0) ? arg0.map(addr => buildAddressEntry(addr)) : [buildAddressEntry(arg0, arg1)];\n\n          opt.all ? cb(err, addresses) : cb(err, addresses[0].address, addresses[0].family);\n        });\n      }\n    }\n\n    // temporary internal emitter until the AxiosRequest class will be implemented\n    const emitter = new EventEmitter();\n\n    const onFinished = () => {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(abort);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', abort);\n      }\n\n      emitter.removeAllListeners();\n    }\n\n    onDone((value, isRejected) => {\n      isDone = true;\n      if (isRejected) {\n        rejected = true;\n        onFinished();\n      }\n    });\n\n    function abort(reason) {\n      emitter.emit('abort', !reason || reason.type ? new CanceledError(null, config, req) : reason);\n    }\n\n    emitter.once('abort', reject);\n\n    if (config.cancelToken || config.signal) {\n      config.cancelToken && config.cancelToken.subscribe(abort);\n      if (config.signal) {\n        config.signal.aborted ? abort() : config.signal.addEventListener('abort', abort);\n      }\n    }\n\n    // Parse url\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    const parsed = new URL(fullPath, utils.hasBrowserEnv ? platform.origin : undefined);\n    const protocol = parsed.protocol || supportedProtocols[0];\n\n    if (protocol === 'data:') {\n      let convertedData;\n\n      if (method !== 'GET') {\n        return settle(resolve, reject, {\n          status: 405,\n          statusText: 'method not allowed',\n          headers: {},\n          config\n        });\n      }\n\n      try {\n        convertedData = fromDataURI(config.url, responseType === 'blob', {\n          Blob: config.env && config.env.Blob\n        });\n      } catch (err) {\n        throw AxiosError.from(err, AxiosError.ERR_BAD_REQUEST, config);\n      }\n\n      if (responseType === 'text') {\n        convertedData = convertedData.toString(responseEncoding);\n\n        if (!responseEncoding || responseEncoding === 'utf8') {\n          convertedData = utils.stripBOM(convertedData);\n        }\n      } else if (responseType === 'stream') {\n        convertedData = stream.Readable.from(convertedData);\n      }\n\n      return settle(resolve, reject, {\n        data: convertedData,\n        status: 200,\n        statusText: 'OK',\n        headers: new AxiosHeaders(),\n        config\n      });\n    }\n\n    if (supportedProtocols.indexOf(protocol) === -1) {\n      return reject(new AxiosError(\n        'Unsupported protocol ' + protocol,\n        AxiosError.ERR_BAD_REQUEST,\n        config\n      ));\n    }\n\n    const headers = AxiosHeaders.from(config.headers).normalize();\n\n    // Set User-Agent (required by some servers)\n    // See https://github.com/axios/axios/issues/69\n    // User-Agent is specified; handle case where no UA header is desired\n    // Only set header if it hasn't been set in config\n    headers.set('User-Agent', 'axios/' + VERSION, false);\n\n    const {onUploadProgress, onDownloadProgress} = config;\n    const maxRate = config.maxRate;\n    let maxUploadRate = undefined;\n    let maxDownloadRate = undefined;\n\n    // support for spec compliant FormData objects\n    if (utils.isSpecCompliantForm(data)) {\n      const userBoundary = headers.getContentType(/boundary=([-_\\w\\d]{10,70})/i);\n\n      data = formDataToStream(data, (formHeaders) => {\n        headers.set(formHeaders);\n      }, {\n        tag: `axios-${VERSION}-boundary`,\n        boundary: userBoundary && userBoundary[1] || undefined\n      });\n      // support for https://www.npmjs.com/package/form-data api\n    } else if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n      headers.set(data.getHeaders());\n\n      if (!headers.hasContentLength()) {\n        try {\n          const knownLength = await util.promisify(data.getLength).call(data);\n          Number.isFinite(knownLength) && knownLength >= 0 && headers.setContentLength(knownLength);\n          /*eslint no-empty:0*/\n        } catch (e) {\n        }\n      }\n    } else if (utils.isBlob(data)) {\n      data.size && headers.setContentType(data.type || 'application/octet-stream');\n      headers.setContentLength(data.size || 0);\n      data = stream.Readable.from(readBlob(data));\n    } else if (data && !utils.isStream(data)) {\n      if (Buffer.isBuffer(data)) {\n        // Nothing to do...\n      } else if (utils.isArrayBuffer(data)) {\n        data = Buffer.from(new Uint8Array(data));\n      } else if (utils.isString(data)) {\n        data = Buffer.from(data, 'utf-8');\n      } else {\n        return reject(new AxiosError(\n          'Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream',\n          AxiosError.ERR_BAD_REQUEST,\n          config\n        ));\n      }\n\n      // Add Content-Length header if data exists\n      headers.setContentLength(data.length, false);\n\n      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n        return reject(new AxiosError(\n          'Request body larger than maxBodyLength limit',\n          AxiosError.ERR_BAD_REQUEST,\n          config\n        ));\n      }\n    }\n\n    const contentLength = utils.toFiniteNumber(headers.getContentLength());\n\n    if (utils.isArray(maxRate)) {\n      maxUploadRate = maxRate[0];\n      maxDownloadRate = maxRate[1];\n    } else {\n      maxUploadRate = maxDownloadRate = maxRate;\n    }\n\n    if (data && (onUploadProgress || maxUploadRate)) {\n      if (!utils.isStream(data)) {\n        data = stream.Readable.from(data, {objectMode: false});\n      }\n\n      data = stream.pipeline([data, new AxiosTransformStream({\n        maxRate: utils.toFiniteNumber(maxUploadRate)\n      })], utils.noop);\n\n      onUploadProgress && data.on('progress', flushOnFinish(\n        data,\n        progressEventDecorator(\n          contentLength,\n          progressEventReducer(asyncDecorator(onUploadProgress), false, 3)\n        )\n      ));\n    }\n\n    // HTTP basic authentication\n    let auth = undefined;\n    if (config.auth) {\n      const username = config.auth.username || '';\n      const password = config.auth.password || '';\n      auth = username + ':' + password;\n    }\n\n    if (!auth && parsed.username) {\n      const urlUsername = parsed.username;\n      const urlPassword = parsed.password;\n      auth = urlUsername + ':' + urlPassword;\n    }\n\n    auth && headers.delete('authorization');\n\n    let path;\n\n    try {\n      path = buildURL(\n        parsed.pathname + parsed.search,\n        config.params,\n        config.paramsSerializer\n      ).replace(/^\\?/, '');\n    } catch (err) {\n      const customErr = new Error(err.message);\n      customErr.config = config;\n      customErr.url = config.url;\n      customErr.exists = true;\n      return reject(customErr);\n    }\n\n    headers.set(\n      'Accept-Encoding',\n      'gzip, compress, deflate' + (isBrotliSupported ? ', br' : ''), false\n      );\n\n    const options = {\n      path,\n      method: method,\n      headers: headers.toJSON(),\n      agents: { http: config.httpAgent, https: config.httpsAgent },\n      auth,\n      protocol,\n      family,\n      beforeRedirect: dispatchBeforeRedirect,\n      beforeRedirects: {}\n    };\n\n    // cacheable-lookup integration hotfix\n    !utils.isUndefined(lookup) && (options.lookup = lookup);\n\n    if (config.socketPath) {\n      options.socketPath = config.socketPath;\n    } else {\n      options.hostname = parsed.hostname;\n      options.port = parsed.port;\n      setProxy(options, config.proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n    }\n\n    let transport;\n    const isHttpsRequest = isHttps.test(options.protocol);\n    options.agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n    if (config.transport) {\n      transport = config.transport;\n    } else if (config.maxRedirects === 0) {\n      transport = isHttpsRequest ? https : http;\n    } else {\n      if (config.maxRedirects) {\n        options.maxRedirects = config.maxRedirects;\n      }\n      if (config.beforeRedirect) {\n        options.beforeRedirects.config = config.beforeRedirect;\n      }\n      transport = isHttpsRequest ? httpsFollow : httpFollow;\n    }\n\n    if (config.maxBodyLength > -1) {\n      options.maxBodyLength = config.maxBodyLength;\n    } else {\n      // follow-redirects does not skip comparison, so it should always succeed for axios -1 unlimited\n      options.maxBodyLength = Infinity;\n    }\n\n    if (config.insecureHTTPParser) {\n      options.insecureHTTPParser = config.insecureHTTPParser;\n    }\n\n    // Create the request\n    req = transport.request(options, function handleResponse(res) {\n      if (req.destroyed) return;\n\n      const streams = [res];\n\n      const responseLength = +res.headers['content-length'];\n\n      if (onDownloadProgress || maxDownloadRate) {\n        const transformStream = new AxiosTransformStream({\n          maxRate: utils.toFiniteNumber(maxDownloadRate)\n        });\n\n        onDownloadProgress && transformStream.on('progress', flushOnFinish(\n          transformStream,\n          progressEventDecorator(\n            responseLength,\n            progressEventReducer(asyncDecorator(onDownloadProgress), true, 3)\n          )\n        ));\n\n        streams.push(transformStream);\n      }\n\n      // decompress the response body transparently if required\n      let responseStream = res;\n\n      // return the last request in case of redirects\n      const lastRequest = res.req || req;\n\n      // if decompress disabled we should not decompress\n      if (config.decompress !== false && res.headers['content-encoding']) {\n        // if no content, but headers still say that it is encoded,\n        // remove the header not confuse downstream operations\n        if (method === 'HEAD' || res.statusCode === 204) {\n          delete res.headers['content-encoding'];\n        }\n\n        switch ((res.headers['content-encoding'] || '').toLowerCase()) {\n        /*eslint default-case:0*/\n        case 'gzip':\n        case 'x-gzip':\n        case 'compress':\n        case 'x-compress':\n          // add the unzipper to the body stream processing pipeline\n          streams.push(zlib.createUnzip(zlibOptions));\n\n          // remove the content-encoding in order to not confuse downstream operations\n          delete res.headers['content-encoding'];\n          break;\n        case 'deflate':\n          streams.push(new ZlibHeaderTransformStream());\n\n          // add the unzipper to the body stream processing pipeline\n          streams.push(zlib.createUnzip(zlibOptions));\n\n          // remove the content-encoding in order to not confuse downstream operations\n          delete res.headers['content-encoding'];\n          break;\n        case 'br':\n          if (isBrotliSupported) {\n            streams.push(zlib.createBrotliDecompress(brotliOptions));\n            delete res.headers['content-encoding'];\n          }\n        }\n      }\n\n      responseStream = streams.length > 1 ? stream.pipeline(streams, utils.noop) : streams[0];\n\n      const offListeners = stream.finished(responseStream, () => {\n        offListeners();\n        onFinished();\n      });\n\n      const response = {\n        status: res.statusCode,\n        statusText: res.statusMessage,\n        headers: new AxiosHeaders(res.headers),\n        config,\n        request: lastRequest\n      };\n\n      if (responseType === 'stream') {\n        response.data = responseStream;\n        settle(resolve, reject, response);\n      } else {\n        const responseBuffer = [];\n        let totalResponseBytes = 0;\n\n        responseStream.on('data', function handleStreamData(chunk) {\n          responseBuffer.push(chunk);\n          totalResponseBytes += chunk.length;\n\n          // make sure the content length is not over the maxContentLength if specified\n          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n            // stream.destroy() emit aborted event before calling reject() on Node.js v16\n            rejected = true;\n            responseStream.destroy();\n            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded',\n              AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n          }\n        });\n\n        responseStream.on('aborted', function handlerStreamAborted() {\n          if (rejected) {\n            return;\n          }\n\n          const err = new AxiosError(\n            'maxContentLength size of ' + config.maxContentLength + ' exceeded',\n            AxiosError.ERR_BAD_RESPONSE,\n            config,\n            lastRequest\n          );\n          responseStream.destroy(err);\n          reject(err);\n        });\n\n        responseStream.on('error', function handleStreamError(err) {\n          if (req.destroyed) return;\n          reject(AxiosError.from(err, null, config, lastRequest));\n        });\n\n        responseStream.on('end', function handleStreamEnd() {\n          try {\n            let responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n            if (responseType !== 'arraybuffer') {\n              responseData = responseData.toString(responseEncoding);\n              if (!responseEncoding || responseEncoding === 'utf8') {\n                responseData = utils.stripBOM(responseData);\n              }\n            }\n            response.data = responseData;\n          } catch (err) {\n            return reject(AxiosError.from(err, null, config, response.request, response));\n          }\n          settle(resolve, reject, response);\n        });\n      }\n\n      emitter.once('abort', err => {\n        if (!responseStream.destroyed) {\n          responseStream.emit('error', err);\n          responseStream.destroy();\n        }\n      });\n    });\n\n    emitter.once('abort', err => {\n      reject(err);\n      req.destroy(err);\n    });\n\n    // Handle errors\n    req.on('error', function handleRequestError(err) {\n      // @todo remove\n      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n      reject(AxiosError.from(err, null, config, req));\n    });\n\n    // set tcp keep alive to prevent drop connection by peer\n    req.on('socket', function handleRequestSocket(socket) {\n      // default interval of sending ack packet is 1 minute\n      socket.setKeepAlive(true, 1000 * 60);\n    });\n\n    // Handle request timeout\n    if (config.timeout) {\n      // This is forcing a int timeout to avoid problems if the `req` interface doesn't handle other types.\n      const timeout = parseInt(config.timeout, 10);\n\n      if (Number.isNaN(timeout)) {\n        reject(new AxiosError(\n          'error trying to parse `config.timeout` to int',\n          AxiosError.ERR_BAD_OPTION_VALUE,\n          config,\n          req\n        ));\n\n        return;\n      }\n\n      // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.\n      // And timer callback will be fired, and abort() will be invoked before connection, then get \"socket hang up\" and code ECONNRESET.\n      // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.\n      // And then these socket which be hang up will devouring CPU little by little.\n      // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.\n      req.setTimeout(timeout, function handleRequestTimeout() {\n        if (isDone) return;\n        let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';\n        const transitional = config.transitional || transitionalDefaults;\n        if (config.timeoutErrorMessage) {\n          timeoutErrorMessage = config.timeoutErrorMessage;\n        }\n        reject(new AxiosError(\n          timeoutErrorMessage,\n          transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,\n          config,\n          req\n        ));\n        abort();\n      });\n    }\n\n\n    // Send the request\n    if (utils.isStream(data)) {\n      let ended = false;\n      let errored = false;\n\n      data.on('end', () => {\n        ended = true;\n      });\n\n      data.once('error', err => {\n        errored = true;\n        req.destroy(err);\n      });\n\n      data.on('close', () => {\n        if (!ended && !errored) {\n          abort(new CanceledError('Request stream has been aborted', config, req));\n        }\n      });\n\n      data.pipe(req);\n    } else {\n      req.end(data);\n    }\n  });\n}\n\nexport const __setProxy = setProxy;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}