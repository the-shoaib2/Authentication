{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thesh\\\\Desktop\\\\Authentication\\\\frontend\\\\src\\\\components\\\\Services\\\\ChatServices\\\\SelectedUserMessages.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport MessageReactions from './MessageReactions';\nimport MessageOptionsMenu from './MessageOptionsMenu';\nimport ConfirmationPopup from './ConfirmationPopup';\nimport '../../../assets/style/ServicesStyle/ChatServicesStyle/SelectedUserMessages.css';\nimport { FaFile } from 'react-icons/fa';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SelectedUserMessages = ({\n  selectedUser,\n  messages,\n  formatTime,\n  reactions,\n  showReactions,\n  handleReaction,\n  toggleReactionMenu,\n  onEditMessage,\n  openReactionMenuId\n}) => {\n  _s();\n  const [isMobile, setIsMobile] = useState(false);\n  const [editingMessageId, setEditingMessageId] = useState(null);\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const [messageToUnsend, setMessageToUnsend] = useState(null);\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const handleOptionClick = (option, message) => {\n    console.log(`${option} clicked for message:`, message);\n    if (option === 'edit') {\n      setEditingMessageId(message.id);\n    } else if (option === 'unsendForMe') {\n      handleUnsendForMe(message);\n    } else {\n      // Implement the logic for other options here\n    }\n  };\n  const handleEditSubmit = (messageId, newText) => {\n    onEditMessage(messageId, newText);\n    setEditingMessageId(null);\n  };\n  const handleUnsendForMe = message => {\n    setMessageToUnsend(message);\n    setShowConfirmation(true);\n  };\n  const handleConfirmUnsend = () => {\n    if (messageToUnsend) {\n      // Perform the actual unsend action here\n      // This could be a call to an API or updating local state\n      console.log(`Unsending message: ${messageToUnsend.id}`);\n    }\n    setShowConfirmation(false);\n    setMessageToUnsend(null);\n  };\n  const handleCancelUnsend = () => {\n    setShowConfirmation(false);\n    setMessageToUnsend(null);\n  };\n  const renderMessageGroups = useCallback(() => {\n    if (!selectedUser || !messages[selectedUser.id]) {\n      return null;\n    }\n    return messages[selectedUser.id].map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-group\",\n      children: /*#__PURE__*/_jsxDEV(MessageReactions, {\n        messageId: message.id,\n        reaction: reactions[message.id],\n        showReactions: openReactionMenuId === message.id,\n        onReaction: handleReaction,\n        onToggleReactionMenu: toggleReactionMenu,\n        isCurrentUser: message.sender === \"user\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, message.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this));\n  }, [messages, selectedUser, formatTime, reactions, openReactionMenuId, handleReaction, toggleReactionMenu]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-messages-container\",\n    children: [renderMessageGroups(), showConfirmation && /*#__PURE__*/_jsxDEV(ConfirmationPopup, {\n      onConfirm: handleConfirmUnsend,\n      onCancel: handleCancelUnsend,\n      message: \"Are you sure you want to unsend this message?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(SelectedUserMessages, \"p6HWknrpTvTx0FPYMs0xWrW7t8E=\");\n_c = SelectedUserMessages;\nconst EditMessageForm = ({\n  message,\n  onSubmit,\n  onCancel\n}) => {\n  _s2();\n  const [editedText, setEditedText] = useState(message.text);\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(editedText);\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"edit-message-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: editedText,\n      onChange: e => setEditedText(e.target.value),\n      autoFocus: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: onCancel,\n      children: \"Cancel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s2(EditMessageForm, \"tnfQha1MymMJu7bWFzGfaViDcys=\");\n_c2 = EditMessageForm;\nexport default SelectedUserMessages;\nvar _c, _c2;\n$RefreshReg$(_c, \"SelectedUserMessages\");\n$RefreshReg$(_c2, \"EditMessageForm\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","MessageReactions","MessageOptionsMenu","ConfirmationPopup","FaFile","jsxDEV","_jsxDEV","SelectedUserMessages","selectedUser","messages","formatTime","reactions","showReactions","handleReaction","toggleReactionMenu","onEditMessage","openReactionMenuId","_s","isMobile","setIsMobile","editingMessageId","setEditingMessageId","showConfirmation","setShowConfirmation","messageToUnsend","setMessageToUnsend","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleOptionClick","option","message","console","log","id","handleUnsendForMe","handleEditSubmit","messageId","newText","handleConfirmUnsend","handleCancelUnsend","renderMessageGroups","map","className","children","reaction","onReaction","onToggleReactionMenu","isCurrentUser","sender","fileName","_jsxFileName","lineNumber","columnNumber","onConfirm","onCancel","_c","EditMessageForm","onSubmit","_s2","editedText","setEditedText","text","handleSubmit","e","preventDefault","type","value","onChange","target","autoFocus","onClick","_c2","$RefreshReg$"],"sources":["C:/Users/thesh/Desktop/Authentication/frontend/src/components/Services/ChatServices/SelectedUserMessages.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport MessageReactions from './MessageReactions';\r\nimport MessageOptionsMenu from './MessageOptionsMenu';\r\nimport ConfirmationPopup from './ConfirmationPopup';\r\nimport '../../../assets/style/ServicesStyle/ChatServicesStyle/SelectedUserMessages.css';\r\nimport { FaFile } from 'react-icons/fa'; \r\n\r\nconst SelectedUserMessages = ({ selectedUser, messages, formatTime, reactions, showReactions, handleReaction, toggleReactionMenu, onEditMessage, openReactionMenuId }) => {\r\n  const [isMobile, setIsMobile] = useState(false);\r\n  const [editingMessageId, setEditingMessageId] = useState(null);\r\n  const [showConfirmation, setShowConfirmation] = useState(false);\r\n  const [messageToUnsend, setMessageToUnsend] = useState(null);\r\n  \r\n  const messagesEndRef = useRef(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  const handleOptionClick = (option, message) => {\r\n    console.log(`${option} clicked for message:`, message);\r\n    \r\n    if (option === 'edit') {\r\n      setEditingMessageId(message.id);\r\n    } else if (option === 'unsendForMe') {\r\n      handleUnsendForMe(message);\r\n    } else {\r\n      // Implement the logic for other options here\r\n    }\r\n  };\r\n\r\n  const handleEditSubmit = (messageId, newText) => {\r\n    onEditMessage(messageId, newText);\r\n    setEditingMessageId(null);\r\n  };\r\n\r\n  const handleUnsendForMe = (message) => {\r\n    setMessageToUnsend(message);\r\n    setShowConfirmation(true);\r\n  };\r\n\r\n  const handleConfirmUnsend = () => {\r\n    if (messageToUnsend) {\r\n      // Perform the actual unsend action here\r\n      // This could be a call to an API or updating local state\r\n      console.log(`Unsending message: ${messageToUnsend.id}`);\r\n    }\r\n    setShowConfirmation(false);\r\n    setMessageToUnsend(null);\r\n  };\r\n\r\n  const handleCancelUnsend = () => {\r\n    setShowConfirmation(false);\r\n    setMessageToUnsend(null);\r\n  };\r\n\r\n  const renderMessageGroups = useCallback(() => {\r\n    if (!selectedUser || !messages[selectedUser.id]) {\r\n      return null;\r\n    }\r\n\r\n    return messages[selectedUser.id].map((message) => (\r\n      <div key={message.id} className=\"message-group\">\r\n        {/* ... other message rendering logic */}\r\n        <MessageReactions\r\n          messageId={message.id}\r\n          reaction={reactions[message.id]}\r\n          showReactions={openReactionMenuId === message.id}\r\n          onReaction={handleReaction}\r\n          onToggleReactionMenu={toggleReactionMenu}\r\n          isCurrentUser={message.sender === \"user\"}\r\n        />\r\n        {/* ... other components */}\r\n      </div>\r\n    ));\r\n  }, [messages, selectedUser, formatTime, reactions, openReactionMenuId, handleReaction, toggleReactionMenu]);\r\n\r\n  return (\r\n    <div className=\"chat-messages-container\">\r\n      {renderMessageGroups()}\r\n      {showConfirmation && (\r\n        <ConfirmationPopup\r\n          onConfirm={handleConfirmUnsend}\r\n          onCancel={handleCancelUnsend}\r\n          message=\"Are you sure you want to unsend this message?\"\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst EditMessageForm = ({ message, onSubmit, onCancel }) => {\r\n  const [editedText, setEditedText] = useState(message.text);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    onSubmit(editedText);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"edit-message-form\">\r\n      <input\r\n        type=\"text\"\r\n        value={editedText}\r\n        onChange={(e) => setEditedText(e.target.value)}\r\n        autoFocus\r\n      />\r\n      <button type=\"submit\">Save</button>\r\n      <button type=\"button\" onClick={onCancel}>Cancel</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SelectedUserMessages;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}