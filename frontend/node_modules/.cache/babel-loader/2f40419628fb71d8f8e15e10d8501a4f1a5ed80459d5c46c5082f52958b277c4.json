{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thesh\\\\Desktop\\\\Authentication\\\\frontend\\\\src\\\\pages\\\\VerifyCodeAccount.jsx\",\n  _s = $RefreshSig$();\n// frontend/src/pages/VerifyCodeAccount.jsx\n\n// import React, { useState, useEffect } from 'react';\n// import { useNavigate, useLocation } from 'react-router-dom';\n// import { handleSuccess, handleError, ToastContainer } from '../utils/ReactToastify';\n// import '../utils/ReactToastifyCustom.css';\n// import '../utils/style/SentOtpForgotPassword.css';\n// import OtpInput from '../Services/OtpInput';\n\n// function VerifyCodeConfirmAccount() {\n//     const [otp, setOtp] = useState('');\n//     const [timer, setTimer] = useState(60);\n//     const [isResendEnabled, setIsResendEnabled] = useState(false);\n//     const [isComplete, setIsComplete] = useState(false);\n//     // const [isVerified, setIsVerified] = useState(false); // Track OTP verification status\n//     const [hasCodeBeenSent, setHasCodeBeenSent] = useState(false); // Track if code has been sent\n//     const { state } = useLocation(); // Get email from location state\n//     const navigate = useNavigate();\n\n//     // Handle countdown timer\n//     useEffect(() => {\n//         const countdown = timer > 0 ? setInterval(() => {\n//             setTimer((prev) => prev - 1);\n//         }, 1000) : null;\n\n//         if (timer === 0) {\n//             setIsResendEnabled(true);\n//         }\n\n//         return () => {\n//             if (countdown) clearInterval(countdown);\n//         };\n//     }, [timer]);\n\n//     // // Auto-login if OTP is verified\n//     // useEffect(() => {\n//     //     if (isVerified) {\n//     //         const refreshToken = localStorage.getItem('refreshToken');\n//     //         if (refreshToken) {\n//     //             (async () => {\n//     //                 try {\n//     //                     const response = await fetch(\"http://localhost:8080/auth/refresh-token\", {\n//     //                         method: 'POST',\n//     //                         headers: {\n//     //                             'Content-Type': 'application/json',\n//     //                         },\n//     //                         body: JSON.stringify({ refreshToken }),\n//     //                     });\n//     //                     const result = await response.json();\n//     //                     if (response.ok) {\n//     //                         localStorage.setItem('token', result.accessToken);\n//     //                         localStorage.setItem('refreshToken', result.refreshToken);\n//     //                         localStorage.setItem('loggedInUser', JSON.stringify(result));\n//     //                         handleSuccess('Auto-login successful!');\n//     //                         navigate('/home');\n//     //                     } else {\n//     //                         handleError(result.message || 'Failed to auto-login.');\n//     //                     }\n//     //                 } catch (err) {\n//     //                     handleError('Network error. Please check your connection and try again.');\n//     //                 }\n//     //             })();\n//     //         }\n//     //     }\n//     // }, [isVerified, navigate]);\n\n//     const handleSubmit = async (event) => {\n//         event.preventDefault();\n//         try {\n//             const token = localStorage.getItem('token'); // Get the token from localStorage\n//             const response = await fetch('http://localhost:8080/auth/verify-email', {\n//                 method: 'POST',\n//                 headers: { \n//                     'Content-Type': 'application/json',\n//                     'Authorization': `Bearer ${token}` // Add the token to the Authorization header\n//                 },\n//                 body: JSON.stringify({ email: state.email, code: otp }),\n//             });\n\n//             const result = await response.json();\n\n//             if (response.ok) {\n//                 handleSuccess(result.message);\n//             } else {\n//                 handleError(result.message);\n//             }\n//         } catch (err) {\n//             handleError('Network error. Please check your connection and try again.');\n//         }\n//     };\n\n//     const handleSendOtp = async () => {\n//         try {\n//             setHasCodeBeenSent(true);\n//             setIsResendEnabled(false);\n//             setTimer(60); // Reset timer\n//             const token = localStorage.getItem('token'); // Get the token from localStorage\n//             const response = await fetch('http://localhost:8080/auth/verify-email', {\n//                 method: 'POST',\n//                 headers: { \n//                     'Content-Type': 'application/json',\n//                     'Authorization': `Bearer ${token}` // Add the token to the Authorization header\n//                 },\n//                 body: JSON.stringify({ email: state.email }),\n//             });\n\n//             const result = await response.json();\n\n//             if (response.ok) {\n//                 handleSuccess(result.message);\n//             } else {\n//                 handleError(result.message);\n//             }\n//         } catch (err) {\n//             handleError('Failed to send OTP. Please try again.');\n//         }\n//     };\n\n//     const handleResendOtp = async () => {\n//         try {\n//             setIsResendEnabled(false);\n//             setTimer(60); // Reset timer\n//             const token = localStorage.getItem('token'); // Get the token from localStorage\n//             const response = await fetch('http://localhost:8080/auth/verify-email', {\n//                 method: 'POST',\n//                 headers: { \n//                     'Content-Type': 'application/json',\n//                     'Authorization': `Bearer ${token}` // Add the token to the Authorization header\n//                 },\n//                 body: JSON.stringify({ email: state.email }),\n//             });\n\n//             const result = await response.json();\n\n//             if (response.ok) {\n//                 handleSuccess(result.message);\n//             } else {\n//                 handleError(result.message);\n//             }\n//         } catch (err) {\n//             handleError('Failed to resend OTP. Please try again.');\n//         }\n//     };\n\n//     return (\n//         <div className=\"otp-wrapper\">\n//             <div>\n//                 <img src='/app-icon.ico' alt='App Icon' className='app-icon' />\n//             </div>\n//             <h1 className=\"otp-title\">Verification Code</h1>\n//             <div className=\"otp-timer\">\n//                 {hasCodeBeenSent ? (\n//                     <p>We've sent a verification code to your registered email address.</p>\n//                 ) : (\n//                     <p>Click the button to send the verification code to your email.</p>\n//                 )}\n//                 <div className=\"timer\">\n//                     <p>Time Remaining: {timer} s</p>\n//                 </div>\n//             </div>\n//             <form onSubmit={handleSubmit}>\n//                 {!hasCodeBeenSent ? (\n//                     <button\n//                         type=\"button\"\n//                         className=\"otp-btn send\"\n//                         onClick={handleSendOtp}\n//                     >\n//                         Send Code\n//                     </button>\n//                 ) : (\n//                     <OtpInput\n//                         length={6}\n//                         onOtpSubmit={(otp) => setOtp(otp)}\n//                         onOtpComplete={(complete) => setIsComplete(complete)}\n//                     />\n//                 )}\n//                 <div className=\"otp-buttons\">\n//                     {timer === 0 && isResendEnabled ? (\n//                         <>\n//                             <div className=\"otp-message\">\n//                                 <p>Didn't receive the code?</p>\n//                             </div>\n//                             <button\n//                                 type=\"button\"\n//                                 className=\"otp-btn resend\"\n//                                 onClick={handleResendOtp}\n//                             >\n//                                 Resend Code\n//                             </button>\n//                         </>\n//                     ) : hasCodeBeenSent ? (\n//                         <>\n//                             <div className=\"otp-message\">\n//                                 <br />\n//                             </div>\n//                             <button\n//                                 type=\"submit\"\n//                                 className={`otp-btn verify ${isComplete ? 'active' : ''}`}\n//                                 disabled={!isComplete}\n//                             >\n//                                 Verify Code\n//                             </button>\n//                         </>\n//                     ) : null}\n//                 </div>\n//             </form>\n//             <ToastContainer />\n//         </div>\n//     );\n// }\n\n// export default VerifyCodeConfirmAccount;\n\n// frontend/src/pages/VerifyEmail.js\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { handleSuccess, handleError, ToastContainer } from '../utils/ReactToastify';\nimport '../utils/ReactToastifyCustom.css';\nimport '../utils/loading.css';\nimport '../utils/style/animations.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction VerifyEmail() {\n  _s();\n  const {\n    token\n  } = useParams();\n  const [loading, setLoading] = useState(true);\n  const [fadeIn, setFadeIn] = useState(true);\n  const [fadeOut, setFadeOut] = useState(false);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      setFadeIn(false);\n    }, 500);\n    return () => clearTimeout(timeoutId);\n  }, []);\n  useEffect(() => {\n    const verifyToken = async () => {\n      try {\n        const response = await fetch(`/api/auth/verify-email/${token}`);\n        const data = await response.json();\n        if (response.ok) {\n          handleSuccess(data.message);\n          setTimeout(() => navigate('/login'), 2000);\n        } else {\n          handleError(data.message);\n        }\n      } catch (error) {\n        handleError('An error occurred. Please try again.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    verifyToken();\n  }, [token, navigate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `verify-email-container ${fadeIn ? 'fade-in' : ''} ${fadeOut ? 'fade-out' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: loading ? 'Verifying...' : 'Verification Complete!'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 265,\n    columnNumber: 9\n  }, this);\n}\n_s(VerifyEmail, \"gRFufsxzgaiyHmuP/teOAWWoN4I=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = VerifyEmail;\nexport default VerifyEmail;\nvar _c;\n$RefreshReg$(_c, \"VerifyEmail\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","handleSuccess","handleError","ToastContainer","jsxDEV","_jsxDEV","VerifyEmail","_s","token","loading","setLoading","fadeIn","setFadeIn","fadeOut","setFadeOut","navigate","timeoutId","setTimeout","clearTimeout","verifyToken","response","fetch","data","json","ok","message","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/thesh/Desktop/Authentication/frontend/src/pages/VerifyCodeAccount.jsx"],"sourcesContent":["// frontend/src/pages/VerifyCodeAccount.jsx\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useNavigate, useLocation } from 'react-router-dom';\r\n// import { handleSuccess, handleError, ToastContainer } from '../utils/ReactToastify';\r\n// import '../utils/ReactToastifyCustom.css';\r\n// import '../utils/style/SentOtpForgotPassword.css';\r\n// import OtpInput from '../Services/OtpInput';\r\n\r\n// function VerifyCodeConfirmAccount() {\r\n//     const [otp, setOtp] = useState('');\r\n//     const [timer, setTimer] = useState(60);\r\n//     const [isResendEnabled, setIsResendEnabled] = useState(false);\r\n//     const [isComplete, setIsComplete] = useState(false);\r\n//     // const [isVerified, setIsVerified] = useState(false); // Track OTP verification status\r\n//     const [hasCodeBeenSent, setHasCodeBeenSent] = useState(false); // Track if code has been sent\r\n//     const { state } = useLocation(); // Get email from location state\r\n//     const navigate = useNavigate();\r\n\r\n//     // Handle countdown timer\r\n//     useEffect(() => {\r\n//         const countdown = timer > 0 ? setInterval(() => {\r\n//             setTimer((prev) => prev - 1);\r\n//         }, 1000) : null;\r\n\r\n//         if (timer === 0) {\r\n//             setIsResendEnabled(true);\r\n//         }\r\n\r\n//         return () => {\r\n//             if (countdown) clearInterval(countdown);\r\n//         };\r\n//     }, [timer]);\r\n\r\n//     // // Auto-login if OTP is verified\r\n//     // useEffect(() => {\r\n//     //     if (isVerified) {\r\n//     //         const refreshToken = localStorage.getItem('refreshToken');\r\n//     //         if (refreshToken) {\r\n//     //             (async () => {\r\n//     //                 try {\r\n//     //                     const response = await fetch(\"http://localhost:8080/auth/refresh-token\", {\r\n//     //                         method: 'POST',\r\n//     //                         headers: {\r\n//     //                             'Content-Type': 'application/json',\r\n//     //                         },\r\n//     //                         body: JSON.stringify({ refreshToken }),\r\n//     //                     });\r\n//     //                     const result = await response.json();\r\n//     //                     if (response.ok) {\r\n//     //                         localStorage.setItem('token', result.accessToken);\r\n//     //                         localStorage.setItem('refreshToken', result.refreshToken);\r\n//     //                         localStorage.setItem('loggedInUser', JSON.stringify(result));\r\n//     //                         handleSuccess('Auto-login successful!');\r\n//     //                         navigate('/home');\r\n//     //                     } else {\r\n//     //                         handleError(result.message || 'Failed to auto-login.');\r\n//     //                     }\r\n//     //                 } catch (err) {\r\n//     //                     handleError('Network error. Please check your connection and try again.');\r\n//     //                 }\r\n//     //             })();\r\n//     //         }\r\n//     //     }\r\n//     // }, [isVerified, navigate]);\r\n\r\n//     const handleSubmit = async (event) => {\r\n//         event.preventDefault();\r\n//         try {\r\n//             const token = localStorage.getItem('token'); // Get the token from localStorage\r\n//             const response = await fetch('http://localhost:8080/auth/verify-email', {\r\n//                 method: 'POST',\r\n//                 headers: { \r\n//                     'Content-Type': 'application/json',\r\n//                     'Authorization': `Bearer ${token}` // Add the token to the Authorization header\r\n//                 },\r\n//                 body: JSON.stringify({ email: state.email, code: otp }),\r\n//             });\r\n    \r\n//             const result = await response.json();\r\n    \r\n//             if (response.ok) {\r\n//                 handleSuccess(result.message);\r\n//             } else {\r\n//                 handleError(result.message);\r\n//             }\r\n//         } catch (err) {\r\n//             handleError('Network error. Please check your connection and try again.');\r\n//         }\r\n//     };\r\n    \r\n//     const handleSendOtp = async () => {\r\n//         try {\r\n//             setHasCodeBeenSent(true);\r\n//             setIsResendEnabled(false);\r\n//             setTimer(60); // Reset timer\r\n//             const token = localStorage.getItem('token'); // Get the token from localStorage\r\n//             const response = await fetch('http://localhost:8080/auth/verify-email', {\r\n//                 method: 'POST',\r\n//                 headers: { \r\n//                     'Content-Type': 'application/json',\r\n//                     'Authorization': `Bearer ${token}` // Add the token to the Authorization header\r\n//                 },\r\n//                 body: JSON.stringify({ email: state.email }),\r\n//             });\r\n    \r\n//             const result = await response.json();\r\n    \r\n//             if (response.ok) {\r\n//                 handleSuccess(result.message);\r\n//             } else {\r\n//                 handleError(result.message);\r\n//             }\r\n//         } catch (err) {\r\n//             handleError('Failed to send OTP. Please try again.');\r\n//         }\r\n//     };\r\n    \r\n//     const handleResendOtp = async () => {\r\n//         try {\r\n//             setIsResendEnabled(false);\r\n//             setTimer(60); // Reset timer\r\n//             const token = localStorage.getItem('token'); // Get the token from localStorage\r\n//             const response = await fetch('http://localhost:8080/auth/verify-email', {\r\n//                 method: 'POST',\r\n//                 headers: { \r\n//                     'Content-Type': 'application/json',\r\n//                     'Authorization': `Bearer ${token}` // Add the token to the Authorization header\r\n//                 },\r\n//                 body: JSON.stringify({ email: state.email }),\r\n//             });\r\n    \r\n//             const result = await response.json();\r\n    \r\n//             if (response.ok) {\r\n//                 handleSuccess(result.message);\r\n//             } else {\r\n//                 handleError(result.message);\r\n//             }\r\n//         } catch (err) {\r\n//             handleError('Failed to resend OTP. Please try again.');\r\n//         }\r\n//     };\r\n    \r\n\r\n//     return (\r\n//         <div className=\"otp-wrapper\">\r\n//             <div>\r\n//                 <img src='/app-icon.ico' alt='App Icon' className='app-icon' />\r\n//             </div>\r\n//             <h1 className=\"otp-title\">Verification Code</h1>\r\n//             <div className=\"otp-timer\">\r\n//                 {hasCodeBeenSent ? (\r\n//                     <p>We've sent a verification code to your registered email address.</p>\r\n//                 ) : (\r\n//                     <p>Click the button to send the verification code to your email.</p>\r\n//                 )}\r\n//                 <div className=\"timer\">\r\n//                     <p>Time Remaining: {timer} s</p>\r\n//                 </div>\r\n//             </div>\r\n//             <form onSubmit={handleSubmit}>\r\n//                 {!hasCodeBeenSent ? (\r\n//                     <button\r\n//                         type=\"button\"\r\n//                         className=\"otp-btn send\"\r\n//                         onClick={handleSendOtp}\r\n//                     >\r\n//                         Send Code\r\n//                     </button>\r\n//                 ) : (\r\n//                     <OtpInput\r\n//                         length={6}\r\n//                         onOtpSubmit={(otp) => setOtp(otp)}\r\n//                         onOtpComplete={(complete) => setIsComplete(complete)}\r\n//                     />\r\n//                 )}\r\n//                 <div className=\"otp-buttons\">\r\n//                     {timer === 0 && isResendEnabled ? (\r\n//                         <>\r\n//                             <div className=\"otp-message\">\r\n//                                 <p>Didn't receive the code?</p>\r\n//                             </div>\r\n//                             <button\r\n//                                 type=\"button\"\r\n//                                 className=\"otp-btn resend\"\r\n//                                 onClick={handleResendOtp}\r\n//                             >\r\n//                                 Resend Code\r\n//                             </button>\r\n//                         </>\r\n//                     ) : hasCodeBeenSent ? (\r\n//                         <>\r\n//                             <div className=\"otp-message\">\r\n//                                 <br />\r\n//                             </div>\r\n//                             <button\r\n//                                 type=\"submit\"\r\n//                                 className={`otp-btn verify ${isComplete ? 'active' : ''}`}\r\n//                                 disabled={!isComplete}\r\n//                             >\r\n//                                 Verify Code\r\n//                             </button>\r\n//                         </>\r\n//                     ) : null}\r\n//                 </div>\r\n//             </form>\r\n//             <ToastContainer />\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default VerifyCodeConfirmAccount;\r\n\r\n\r\n\r\n\r\n\r\n// frontend/src/pages/VerifyEmail.js\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { handleSuccess, handleError, ToastContainer } from '../utils/ReactToastify';\r\nimport '../utils/ReactToastifyCustom.css';\r\nimport '../utils/loading.css';\r\nimport '../utils/style/animations.css';\r\n\r\nfunction VerifyEmail() {\r\n    const { token } = useParams();\r\n    const [loading, setLoading] = useState(true);\r\n    const [fadeIn, setFadeIn] = useState(true);\r\n    const [fadeOut, setFadeOut] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const timeoutId = setTimeout(() => {\r\n            setFadeIn(false);\r\n        }, 500);\r\n        return () => clearTimeout(timeoutId);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const verifyToken = async () => {\r\n            try {\r\n                const response = await fetch(`/api/auth/verify-email/${token}`);\r\n                const data = await response.json();\r\n\r\n                if (response.ok) {\r\n                    handleSuccess(data.message);\r\n                    setTimeout(() => navigate('/login'), 2000);\r\n                } else {\r\n                    handleError(data.message);\r\n                }\r\n            } catch (error) {\r\n                handleError('An error occurred. Please try again.');\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        verifyToken();\r\n    }, [token, navigate]);\r\n\r\n    return (\r\n        <div className={`verify-email-container ${fadeIn ? 'fade-in' : ''} ${fadeOut ? 'fade-out' : ''}`}>\r\n            <ToastContainer />\r\n            <h2>{loading ? 'Verifying...' : 'Verification Complete!'}</h2>\r\n            {loading && <div className=\"loading\">Loading...</div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VerifyEmail;\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD,SAASC,aAAa,EAAEC,WAAW,EAAEC,cAAc,QAAQ,wBAAwB;AACnF,OAAO,kCAAkC;AACzC,OAAO,sBAAsB;AAC7B,OAAO,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM;IAAEC;EAAM,CAAC,GAAGT,SAAS,CAAC,CAAC;EAC7B,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACa,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAMiB,QAAQ,GAAGf,WAAW,CAAC,CAAC;EAE9BH,SAAS,CAAC,MAAM;IACZ,MAAMmB,SAAS,GAAGC,UAAU,CAAC,MAAM;MAC/BL,SAAS,CAAC,KAAK,CAAC;IACpB,CAAC,EAAE,GAAG,CAAC;IACP,OAAO,MAAMM,YAAY,CAACF,SAAS,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAENnB,SAAS,CAAC,MAAM;IACZ,MAAMsB,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,0BAA0Bb,KAAK,EAAE,CAAC;QAC/D,MAAMc,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAElC,IAAIH,QAAQ,CAACI,EAAE,EAAE;UACbvB,aAAa,CAACqB,IAAI,CAACG,OAAO,CAAC;UAC3BR,UAAU,CAAC,MAAMF,QAAQ,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC;QAC9C,CAAC,MAAM;UACHb,WAAW,CAACoB,IAAI,CAACG,OAAO,CAAC;QAC7B;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZxB,WAAW,CAAC,sCAAsC,CAAC;MACvD,CAAC,SAAS;QACNQ,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IAEDS,WAAW,CAAC,CAAC;EACjB,CAAC,EAAE,CAACX,KAAK,EAAEO,QAAQ,CAAC,CAAC;EAErB,oBACIV,OAAA;IAAKsB,SAAS,EAAE,0BAA0BhB,MAAM,GAAG,SAAS,GAAG,EAAE,IAAIE,OAAO,GAAG,UAAU,GAAG,EAAE,EAAG;IAAAe,QAAA,gBAC7FvB,OAAA,CAACF,cAAc;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClB3B,OAAA;MAAAuB,QAAA,EAAKnB,OAAO,GAAG,cAAc,GAAG;IAAwB;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAC7DvB,OAAO,iBAAIJ,OAAA;MAAKsB,SAAS,EAAC,SAAS;MAAAC,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpD,CAAC;AAEd;AAACzB,EAAA,CA3CQD,WAAW;EAAA,QACEP,SAAS,EAIVC,WAAW;AAAA;AAAAiC,EAAA,GALvB3B,WAAW;AA6CpB,eAAeA,WAAW;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}