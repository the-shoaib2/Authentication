{"ast":null,"code":"// import React, { useState, useRef, useEffect } from 'react';\n\n// const OtpInput = ({ length = 6, onOtpSubmit = () => {}, onOtpComplete = () => {} }) => {\n//     const [otp, setOtp] = useState(new Array(length).fill(\"\"));\n//     const [isComplete, setIsComplete] = useState(false);\n//     const inputRefs = useRef([]);\n\n//     useEffect(() => {\n//         if (inputRefs.current[0]) {\n//             inputRefs.current[0].focus();\n//         }\n//     }, []);\n\n//     useEffect(() => {\n//         onOtpComplete(isComplete);\n//     }, [isComplete, onOtpComplete]);\n\n//     const handleChange = (index, value) => {\n//         const newOtp = [...otp];\n\n//         if (value.length > 1) {\n//             // Handle pasted content\n//             const pastedCode = value.slice(0, length).split(\"\");\n//             for (let i = 0; i < length; i++) {\n//                 newOtp[i] = pastedCode[i] || \"\";\n//             }\n//             setOtp(newOtp);\n\n//             // Focus on the last non-empty input or the first empty one\n//             const lastFilledIndex = newOtp.findLastIndex((digit) => digit !== \"\");\n//             const focusIndex = lastFilledIndex < length - 1 ? lastFilledIndex + 1 : length - 1;\n//             inputRefs.current[focusIndex].focus();\n\n//         } else {\n//             // Handle single character input\n//             newOtp[index] = value.slice(-1);\n//             setOtp(newOtp);\n\n//             // Move focus to the next input field if value is entered\n//             if (value && index < length - 1) {\n//                 inputRefs.current[index + 1].focus();\n//             }\n//         }\n\n//         const combinedOtp = newOtp.join(\"\");\n//         const isComplete = combinedOtp.length === length && newOtp.every(digit => digit !== \"\");\n//         setIsComplete(isComplete);\n\n//         if (isComplete) {\n//             onOtpSubmit(combinedOtp);\n//         }\n//     };\n\n//     const handleKeyDown = (index, e) => {\n//         if (e.key === \"Backspace\") {\n//             if (!otp[index] && index > 0) {\n//                 inputRefs.current[index - 1].focus();\n//             }\n//         } else if (e.key === \"Enter\") {\n//             if (index === length - 1 && isComplete) {\n//                 onOtpSubmit(otp.join(\"\"));\n//             }\n//         }\n//     };\n\n//     const handlePaste = (e) => {\n//         e.preventDefault();\n//         const pasteData = e.clipboardData.getData('text').slice(0, length);\n//         const newOtp = pasteData.split(\"\");\n//         setOtp(newOtp);\n//         inputRefs.current[length - 1].focus();\n//         onOtpSubmit(pasteData);\n//         onOtpComplete(true);\n//     };\n\n//     const handleClick = (index) => {\n//         inputRefs.current[index].select();\n//     };\n\n//     return (\n//         <div className=\"otp-input-wrapper\">\n//             {otp.map((value, index) => (\n//                 <input\n//                     key={index}\n//                     type=\"text\"\n//                     ref={(input) => (inputRefs.current[index] = input)}\n//                     value={value}\n//                     onChange={(e) => handleChange(index, e.target.value)}\n//                     onKeyDown={(e) => handleKeyDown(index, e)}\n//                     onPaste={(e) => handlePaste(e)}\n//                     className=\"otpField\"\n//                     maxLength={1}\n//                     onClick={() => handleClick(index)}\n//                 />\n//             ))}\n//         </div>\n//     );\n// };\n\n// export default OtpInput;","map":{"version":3,"names":[],"sources":["C:/Users/thesh/Desktop/Authentication/frontend/src/Services/OtpInput.jsx"],"sourcesContent":["// import React, { useState, useRef, useEffect } from 'react';\r\n\r\n// const OtpInput = ({ length = 6, onOtpSubmit = () => {}, onOtpComplete = () => {} }) => {\r\n//     const [otp, setOtp] = useState(new Array(length).fill(\"\"));\r\n//     const [isComplete, setIsComplete] = useState(false);\r\n//     const inputRefs = useRef([]);\r\n\r\n//     useEffect(() => {\r\n//         if (inputRefs.current[0]) {\r\n//             inputRefs.current[0].focus();\r\n//         }\r\n//     }, []);\r\n\r\n//     useEffect(() => {\r\n//         onOtpComplete(isComplete);\r\n//     }, [isComplete, onOtpComplete]);\r\n\r\n//     const handleChange = (index, value) => {\r\n//         const newOtp = [...otp];\r\n        \r\n//         if (value.length > 1) {\r\n//             // Handle pasted content\r\n//             const pastedCode = value.slice(0, length).split(\"\");\r\n//             for (let i = 0; i < length; i++) {\r\n//                 newOtp[i] = pastedCode[i] || \"\";\r\n//             }\r\n//             setOtp(newOtp);\r\n\r\n//             // Focus on the last non-empty input or the first empty one\r\n//             const lastFilledIndex = newOtp.findLastIndex((digit) => digit !== \"\");\r\n//             const focusIndex = lastFilledIndex < length - 1 ? lastFilledIndex + 1 : length - 1;\r\n//             inputRefs.current[focusIndex].focus();\r\n\r\n//         } else {\r\n//             // Handle single character input\r\n//             newOtp[index] = value.slice(-1);\r\n//             setOtp(newOtp);\r\n\r\n//             // Move focus to the next input field if value is entered\r\n//             if (value && index < length - 1) {\r\n//                 inputRefs.current[index + 1].focus();\r\n//             }\r\n//         }\r\n\r\n//         const combinedOtp = newOtp.join(\"\");\r\n//         const isComplete = combinedOtp.length === length && newOtp.every(digit => digit !== \"\");\r\n//         setIsComplete(isComplete);\r\n\r\n//         if (isComplete) {\r\n//             onOtpSubmit(combinedOtp);\r\n//         }\r\n//     };\r\n\r\n//     const handleKeyDown = (index, e) => {\r\n//         if (e.key === \"Backspace\") {\r\n//             if (!otp[index] && index > 0) {\r\n//                 inputRefs.current[index - 1].focus();\r\n//             }\r\n//         } else if (e.key === \"Enter\") {\r\n//             if (index === length - 1 && isComplete) {\r\n//                 onOtpSubmit(otp.join(\"\"));\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     const handlePaste = (e) => {\r\n//         e.preventDefault();\r\n//         const pasteData = e.clipboardData.getData('text').slice(0, length);\r\n//         const newOtp = pasteData.split(\"\");\r\n//         setOtp(newOtp);\r\n//         inputRefs.current[length - 1].focus();\r\n//         onOtpSubmit(pasteData);\r\n//         onOtpComplete(true);\r\n//     };\r\n\r\n//     const handleClick = (index) => {\r\n//         inputRefs.current[index].select();\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"otp-input-wrapper\">\r\n//             {otp.map((value, index) => (\r\n//                 <input\r\n//                     key={index}\r\n//                     type=\"text\"\r\n//                     ref={(input) => (inputRefs.current[index] = input)}\r\n//                     value={value}\r\n//                     onChange={(e) => handleChange(index, e.target.value)}\r\n//                     onKeyDown={(e) => handleKeyDown(index, e)}\r\n//                     onPaste={(e) => handlePaste(e)}\r\n//                     className=\"otpField\"\r\n//                     maxLength={1}\r\n//                     onClick={() => handleClick(index)}\r\n//                 />\r\n//             ))}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default OtpInput;\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}