{"ast":null,"code":"// // Home.js\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import { handleError, handleSuccess } from '../utils/ReactToastify';\n// import { ToastContainer } from 'react-toastify';\n// import '../utils/ReactToastifyCustom.css';\n// import '../utils/style/home.css';\n// import '../utils/loading.css';\n\n// function Home() {\n//     const [loggedInUser, setLoggedInUser] = useState({});\n//     const [loading, setLoading] = useState(false);\n//     const [fadeOut, setFadeOut] = useState(false);\n//     const [fadeIn, setFadeIn] = useState(true);\n//     const navigate = useNavigate();\n\n//     useEffect(() => {\n//         fetchLoggedInUser();\n\n//         const timeoutId = setTimeout(() => {\n//             setFadeIn(false);\n//         }, 500);\n\n//         return () => clearTimeout(timeoutId);\n//     }, []);\n\n//     const handleLogout = async () => {\n//         setLoading(true);\n//         setFadeOut(false);\n\n//         setTimeout(async () => {\n//             setFadeOut(true);\n//             setTimeout(async () => {\n//                 try {\n//                     const response = await fetch(\"http://localhost:8080/auth/logout\", {\n//                         method: 'POST',\n//                         headers: {\n//                             'Content-Type': 'application/json',\n//                             'Authorization': `Bearer ${localStorage.getItem('token')}`\n//                         },\n//                         body: JSON.stringify({ refreshToken: localStorage.getItem('refreshToken') })\n//                     });\n//                     if (response.ok) {\n//                         localStorage.removeItem('token');\n//                         localStorage.removeItem('refreshToken');\n//                         localStorage.removeItem('loggedInUser');\n//                         handleSuccess('Logged out successfully! Redirecting...');\n//                         setTimeout(() => navigate('/login'), 500);\n//                     } else {\n//                         handleError('Failed to log out. Please try again.');\n//                     }\n//                 } catch (err) {\n//                     handleError('Network error. Please check your connection and try again.');\n//                 }\n//             }, 250);\n//         }, 1000);\n//     };\n\n//     const fetchLoggedInUser = async () => {\n//         setLoading(true);\n//         try {\n//             const url = \"http://localhost:8080/Users/me\";\n//             const headers = {\n//                 headers: {\n//                     'Authorization': `Bearer ${localStorage.getItem('token')}`\n//                 }\n//             };\n//             const response = await fetch(url, headers);\n//             const result = await response.json();\n//             if (response.ok) {\n//                 setLoggedInUser(result);\n//                 setLoading(false);\n//             } else {\n//                 handleError(result.message || 'Failed to fetch user data. Please try again.');\n//                 setLoading(false);\n//             }\n//         } catch (err) {\n//             handleError('Network error. Please check your connection and try again.');\n//             setLoading(false);\n//         } finally {\n//             setLoading(false);\n//         }\n//     };\n\n//     return (\n//         <div className={`home-container container ${fadeIn ? 'fade-in' : ''}`}>\n\n//             <div className=\"user-image-icon-container\" >\n//                 <div className=\"user-icon-image\">\n//                     <img src='/avater.png' className='profilePicture' />\n//                 </div>\n//                 <h1 className=\"user-name\">{loggedInUser.name}</h1>\n//             </div>\n\n//             <div className=\"user-profile-container\">\n//                 {loading ? (\n\n//                     <div className={`loading-overlay ${fadeOut ? 'hidden' : ''}`}>\n//                         <img src='/apple-loading.gif' alt='Loading...' className='loading-spinner' />\n//                     </div>\n\n//                 ) : (\n//                     <div className=\"user-details-container\">\n//                         <ul className=\"user-details\">\n//                             <li data-label=\"Name:\"> {loggedInUser.name}</li>\n//                             <li data-label=\"Email:\"> {loggedInUser.email}</li>\n//                             <li data-label=\"Username:\"> {loggedInUser.username}</li>\n//                             <li data-label=\"Joined:\"> {new Date(loggedInUser.createdAt).toLocaleDateString()}</li>\n//                         </ul>\n//                     </div>\n\n//                 )}\n//             </div>\n\n//             <button onClick={handleLogout}>Logout</button>\n\n//             <ToastContainer />\n//         </div>\n//     );\n// }\n\n// export default Home;","map":{"version":3,"names":[],"sources":["C:/Users/thesh/Desktop/Authentication/frontend/src/pages/Home.js"],"sourcesContent":["// // Home.js\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import { handleError, handleSuccess } from '../utils/ReactToastify';\r\n// import { ToastContainer } from 'react-toastify';\r\n// import '../utils/ReactToastifyCustom.css';\r\n// import '../utils/style/home.css';\r\n// import '../utils/loading.css';\r\n\r\n\r\n// function Home() {\r\n//     const [loggedInUser, setLoggedInUser] = useState({});\r\n//     const [loading, setLoading] = useState(false);\r\n//     const [fadeOut, setFadeOut] = useState(false);\r\n//     const [fadeIn, setFadeIn] = useState(true);\r\n//     const navigate = useNavigate();\r\n\r\n//     useEffect(() => {\r\n//         fetchLoggedInUser();\r\n\r\n//         const timeoutId = setTimeout(() => {\r\n//             setFadeIn(false);\r\n//         }, 500);\r\n\r\n//         return () => clearTimeout(timeoutId);\r\n//     }, []);\r\n\r\n//     const handleLogout = async () => {\r\n//         setLoading(true);\r\n//         setFadeOut(false);\r\n\r\n//         setTimeout(async () => {\r\n//             setFadeOut(true);\r\n//             setTimeout(async () => {\r\n//                 try {\r\n//                     const response = await fetch(\"http://localhost:8080/auth/logout\", {\r\n//                         method: 'POST',\r\n//                         headers: {\r\n//                             'Content-Type': 'application/json',\r\n//                             'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n//                         },\r\n//                         body: JSON.stringify({ refreshToken: localStorage.getItem('refreshToken') })\r\n//                     });\r\n//                     if (response.ok) {\r\n//                         localStorage.removeItem('token');\r\n//                         localStorage.removeItem('refreshToken');\r\n//                         localStorage.removeItem('loggedInUser');\r\n//                         handleSuccess('Logged out successfully! Redirecting...');\r\n//                         setTimeout(() => navigate('/login'), 500);\r\n//                     } else {\r\n//                         handleError('Failed to log out. Please try again.');\r\n//                     }\r\n//                 } catch (err) {\r\n//                     handleError('Network error. Please check your connection and try again.');\r\n//                 }\r\n//             }, 250);\r\n//         }, 1000);\r\n//     };\r\n\r\n//     const fetchLoggedInUser = async () => {\r\n//         setLoading(true);\r\n//         try {\r\n//             const url = \"http://localhost:8080/Users/me\";\r\n//             const headers = {\r\n//                 headers: {\r\n//                     'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n//                 }\r\n//             };\r\n//             const response = await fetch(url, headers);\r\n//             const result = await response.json();\r\n//             if (response.ok) {\r\n//                 setLoggedInUser(result);\r\n//                 setLoading(false);\r\n//             } else {\r\n//                 handleError(result.message || 'Failed to fetch user data. Please try again.');\r\n//                 setLoading(false);\r\n//             }\r\n//         } catch (err) {\r\n//             handleError('Network error. Please check your connection and try again.');\r\n//             setLoading(false);\r\n//         } finally {\r\n//             setLoading(false);\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className={`home-container container ${fadeIn ? 'fade-in' : ''}`}>\r\n\r\n//             <div className=\"user-image-icon-container\" >\r\n//                 <div className=\"user-icon-image\">\r\n//                     <img src='/avater.png' className='profilePicture' />\r\n//                 </div>\r\n//                 <h1 className=\"user-name\">{loggedInUser.name}</h1>\r\n//             </div>\r\n\r\n\r\n//             <div className=\"user-profile-container\">\r\n//                 {loading ? (\r\n\r\n//                     <div className={`loading-overlay ${fadeOut ? 'hidden' : ''}`}>\r\n//                         <img src='/apple-loading.gif' alt='Loading...' className='loading-spinner' />\r\n//                     </div>\r\n\r\n\r\n//                 ) : (\r\n//                     <div className=\"user-details-container\">\r\n//                         <ul className=\"user-details\">\r\n//                             <li data-label=\"Name:\"> {loggedInUser.name}</li>\r\n//                             <li data-label=\"Email:\"> {loggedInUser.email}</li>\r\n//                             <li data-label=\"Username:\"> {loggedInUser.username}</li>\r\n//                             <li data-label=\"Joined:\"> {new Date(loggedInUser.createdAt).toLocaleDateString()}</li>\r\n//                         </ul>\r\n//                     </div>\r\n\r\n//                 )}\r\n//             </div>\r\n\r\n\r\n//             <button onClick={handleLogout}>Logout</button>\r\n\r\n//             <ToastContainer />\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default Home;\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}