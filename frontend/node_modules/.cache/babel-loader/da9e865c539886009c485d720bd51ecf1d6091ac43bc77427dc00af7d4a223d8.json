{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thesh\\\\Desktop\\\\Authentication\\\\frontend\\\\src\\\\Services\\\\OtpInput.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OtpInput = ({\n  length = 6,\n  onOtpSubmit = () => {},\n  onOtpComplete = () => {}\n}) => {\n  _s();\n  const [otp, setOtp] = useState(new Array(length).fill(\"\"));\n  const [isComplete, setIsComplete] = useState(false);\n  const inputRefs = useRef([]);\n  useEffect(() => {\n    if (inputRefs.current[0]) {\n      inputRefs.current[0].focus();\n    }\n  }, []);\n  useEffect(() => {\n    onOtpComplete(isComplete);\n  }, [isComplete, onOtpComplete]);\n  const handleChange = (index, value) => {\n    const newOtp = [...otp];\n    if (value.length > 1) {\n      // Handle pasted content\n      const pastedCode = value.slice(0, length).split(\"\");\n      for (let i = 0; i < length; i++) {\n        newOtp[i] = pastedCode[i] || \"\";\n      }\n      setOtp(newOtp);\n\n      // Focus on the last non-empty input or the first empty one\n      const lastFilledIndex = newOtp.findLastIndex(digit => digit !== \"\");\n      const focusIndex = lastFilledIndex < length - 1 ? lastFilledIndex + 1 : length - 1;\n      inputRefs.current[focusIndex].focus();\n    } else {\n      // Handle single character input\n      newOtp[index] = value.slice(-1);\n      setOtp(newOtp);\n\n      // Move focus to the next input field if value is entered\n      if (value && index < length - 1) {\n        inputRefs.current[index + 1].focus();\n      }\n    }\n    const combinedOtp = newOtp.join(\"\");\n    const isComplete = combinedOtp.length === length && newOtp.every(digit => digit !== \"\");\n    setIsComplete(isComplete);\n    if (isComplete) {\n      onOtpSubmit(combinedOtp);\n    }\n  };\n  const handleKeyDown = (index, e) => {\n    if (e.key === \"Backspace\") {\n      if (!otp[index] && index > 0) {\n        inputRefs.current[index - 1].focus();\n      }\n    } else if (e.key === \"Enter\") {\n      if (index === length - 1 && isComplete) {\n        onOtpSubmit(otp.join(\"\"));\n      }\n    }\n  };\n  const handlePaste = e => {\n    e.preventDefault();\n    const pasteData = e.clipboardData.getData('text').slice(0, length);\n    const newOtp = pasteData.split(\"\");\n    setOtp(newOtp);\n    inputRefs.current[length - 1].focus();\n    onOtpSubmit(pasteData);\n    onOtpComplete(true);\n  };\n  const handleClick = index => {\n    inputRefs.current[index].select();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"otp-input-wrapper\",\n    children: otp.map((value, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      ref: input => inputRefs.current[index] = input,\n      value: value,\n      onChange: e => handleChange(index, e.target.value),\n      onKeyDown: e => handleKeyDown(index, e),\n      onPaste: e => handlePaste(e),\n      className: \"otpField\",\n      maxLength: 1,\n      onClick: () => handleClick(index)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n};\n_s(OtpInput, \"0FKmTaRg9l47KWiTZNc4SSfG/9I=\");\n_c = OtpInput;\nexport default OtpInput;\nvar _c;\n$RefreshReg$(_c, \"OtpInput\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","OtpInput","length","onOtpSubmit","onOtpComplete","_s","otp","setOtp","Array","fill","isComplete","setIsComplete","inputRefs","current","focus","handleChange","index","value","newOtp","pastedCode","slice","split","i","lastFilledIndex","findLastIndex","digit","focusIndex","combinedOtp","join","every","handleKeyDown","e","key","handlePaste","preventDefault","pasteData","clipboardData","getData","handleClick","select","className","children","map","type","ref","input","onChange","target","onKeyDown","onPaste","maxLength","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/thesh/Desktop/Authentication/frontend/src/Services/OtpInput.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\n\r\nconst OtpInput = ({ length = 6, onOtpSubmit = () => {}, onOtpComplete = () => {} }) => {\r\n    const [otp, setOtp] = useState(new Array(length).fill(\"\"));\r\n    const [isComplete, setIsComplete] = useState(false);\r\n    const inputRefs = useRef([]);\r\n\r\n    useEffect(() => {\r\n        if (inputRefs.current[0]) {\r\n            inputRefs.current[0].focus();\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        onOtpComplete(isComplete);\r\n    }, [isComplete, onOtpComplete]);\r\n\r\n    const handleChange = (index, value) => {\r\n        const newOtp = [...otp];\r\n        \r\n        if (value.length > 1) {\r\n            // Handle pasted content\r\n            const pastedCode = value.slice(0, length).split(\"\");\r\n            for (let i = 0; i < length; i++) {\r\n                newOtp[i] = pastedCode[i] || \"\";\r\n            }\r\n            setOtp(newOtp);\r\n\r\n            // Focus on the last non-empty input or the first empty one\r\n            const lastFilledIndex = newOtp.findLastIndex((digit) => digit !== \"\");\r\n            const focusIndex = lastFilledIndex < length - 1 ? lastFilledIndex + 1 : length - 1;\r\n            inputRefs.current[focusIndex].focus();\r\n\r\n        } else {\r\n            // Handle single character input\r\n            newOtp[index] = value.slice(-1);\r\n            setOtp(newOtp);\r\n\r\n            // Move focus to the next input field if value is entered\r\n            if (value && index < length - 1) {\r\n                inputRefs.current[index + 1].focus();\r\n            }\r\n        }\r\n\r\n        const combinedOtp = newOtp.join(\"\");\r\n        const isComplete = combinedOtp.length === length && newOtp.every(digit => digit !== \"\");\r\n        setIsComplete(isComplete);\r\n\r\n        if (isComplete) {\r\n            onOtpSubmit(combinedOtp);\r\n        }\r\n    };\r\n\r\n    const handleKeyDown = (index, e) => {\r\n        if (e.key === \"Backspace\") {\r\n            if (!otp[index] && index > 0) {\r\n                inputRefs.current[index - 1].focus();\r\n            }\r\n        } else if (e.key === \"Enter\") {\r\n            if (index === length - 1 && isComplete) {\r\n                onOtpSubmit(otp.join(\"\"));\r\n            }\r\n        }\r\n    };\r\n\r\n    const handlePaste = (e) => {\r\n        e.preventDefault();\r\n        const pasteData = e.clipboardData.getData('text').slice(0, length);\r\n        const newOtp = pasteData.split(\"\");\r\n        setOtp(newOtp);\r\n        inputRefs.current[length - 1].focus();\r\n        onOtpSubmit(pasteData);\r\n        onOtpComplete(true);\r\n    };\r\n\r\n    const handleClick = (index) => {\r\n        inputRefs.current[index].select();\r\n    };\r\n\r\n    return (\r\n        <div className=\"otp-input-wrapper\">\r\n            {otp.map((value, index) => (\r\n                <input\r\n                    key={index}\r\n                    type=\"text\"\r\n                    ref={(input) => (inputRefs.current[index] = input)}\r\n                    value={value}\r\n                    onChange={(e) => handleChange(index, e.target.value)}\r\n                    onKeyDown={(e) => handleKeyDown(index, e)}\r\n                    onPaste={(e) => handlePaste(e)}\r\n                    className=\"otpField\"\r\n                    maxLength={1}\r\n                    onClick={() => handleClick(index)}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OtpInput;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,MAAM,GAAG,CAAC;EAAEC,WAAW,GAAGA,CAAA,KAAM,CAAC,CAAC;EAAEC,aAAa,GAAGA,CAAA,KAAM,CAAC;AAAE,CAAC,KAAK;EAAAC,EAAA;EACnF,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGX,QAAQ,CAAC,IAAIY,KAAK,CAACN,MAAM,CAAC,CAACO,IAAI,CAAC,EAAE,CAAC,CAAC;EAC1D,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAMgB,SAAS,GAAGf,MAAM,CAAC,EAAE,CAAC;EAE5BC,SAAS,CAAC,MAAM;IACZ,IAAIc,SAAS,CAACC,OAAO,CAAC,CAAC,CAAC,EAAE;MACtBD,SAAS,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC;IAChC;EACJ,CAAC,EAAE,EAAE,CAAC;EAENhB,SAAS,CAAC,MAAM;IACZM,aAAa,CAACM,UAAU,CAAC;EAC7B,CAAC,EAAE,CAACA,UAAU,EAAEN,aAAa,CAAC,CAAC;EAE/B,MAAMW,YAAY,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;IACnC,MAAMC,MAAM,GAAG,CAAC,GAAGZ,GAAG,CAAC;IAEvB,IAAIW,KAAK,CAACf,MAAM,GAAG,CAAC,EAAE;MAClB;MACA,MAAMiB,UAAU,GAAGF,KAAK,CAACG,KAAK,CAAC,CAAC,EAAElB,MAAM,CAAC,CAACmB,KAAK,CAAC,EAAE,CAAC;MACnD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpB,MAAM,EAAEoB,CAAC,EAAE,EAAE;QAC7BJ,MAAM,CAACI,CAAC,CAAC,GAAGH,UAAU,CAACG,CAAC,CAAC,IAAI,EAAE;MACnC;MACAf,MAAM,CAACW,MAAM,CAAC;;MAEd;MACA,MAAMK,eAAe,GAAGL,MAAM,CAACM,aAAa,CAAEC,KAAK,IAAKA,KAAK,KAAK,EAAE,CAAC;MACrE,MAAMC,UAAU,GAAGH,eAAe,GAAGrB,MAAM,GAAG,CAAC,GAAGqB,eAAe,GAAG,CAAC,GAAGrB,MAAM,GAAG,CAAC;MAClFU,SAAS,CAACC,OAAO,CAACa,UAAU,CAAC,CAACZ,KAAK,CAAC,CAAC;IAEzC,CAAC,MAAM;MACH;MACAI,MAAM,CAACF,KAAK,CAAC,GAAGC,KAAK,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC;MAC/Bb,MAAM,CAACW,MAAM,CAAC;;MAEd;MACA,IAAID,KAAK,IAAID,KAAK,GAAGd,MAAM,GAAG,CAAC,EAAE;QAC7BU,SAAS,CAACC,OAAO,CAACG,KAAK,GAAG,CAAC,CAAC,CAACF,KAAK,CAAC,CAAC;MACxC;IACJ;IAEA,MAAMa,WAAW,GAAGT,MAAM,CAACU,IAAI,CAAC,EAAE,CAAC;IACnC,MAAMlB,UAAU,GAAGiB,WAAW,CAACzB,MAAM,KAAKA,MAAM,IAAIgB,MAAM,CAACW,KAAK,CAACJ,KAAK,IAAIA,KAAK,KAAK,EAAE,CAAC;IACvFd,aAAa,CAACD,UAAU,CAAC;IAEzB,IAAIA,UAAU,EAAE;MACZP,WAAW,CAACwB,WAAW,CAAC;IAC5B;EACJ,CAAC;EAED,MAAMG,aAAa,GAAGA,CAACd,KAAK,EAAEe,CAAC,KAAK;IAChC,IAAIA,CAAC,CAACC,GAAG,KAAK,WAAW,EAAE;MACvB,IAAI,CAAC1B,GAAG,CAACU,KAAK,CAAC,IAAIA,KAAK,GAAG,CAAC,EAAE;QAC1BJ,SAAS,CAACC,OAAO,CAACG,KAAK,GAAG,CAAC,CAAC,CAACF,KAAK,CAAC,CAAC;MACxC;IACJ,CAAC,MAAM,IAAIiB,CAAC,CAACC,GAAG,KAAK,OAAO,EAAE;MAC1B,IAAIhB,KAAK,KAAKd,MAAM,GAAG,CAAC,IAAIQ,UAAU,EAAE;QACpCP,WAAW,CAACG,GAAG,CAACsB,IAAI,CAAC,EAAE,CAAC,CAAC;MAC7B;IACJ;EACJ,CAAC;EAED,MAAMK,WAAW,GAAIF,CAAC,IAAK;IACvBA,CAAC,CAACG,cAAc,CAAC,CAAC;IAClB,MAAMC,SAAS,GAAGJ,CAAC,CAACK,aAAa,CAACC,OAAO,CAAC,MAAM,CAAC,CAACjB,KAAK,CAAC,CAAC,EAAElB,MAAM,CAAC;IAClE,MAAMgB,MAAM,GAAGiB,SAAS,CAACd,KAAK,CAAC,EAAE,CAAC;IAClCd,MAAM,CAACW,MAAM,CAAC;IACdN,SAAS,CAACC,OAAO,CAACX,MAAM,GAAG,CAAC,CAAC,CAACY,KAAK,CAAC,CAAC;IACrCX,WAAW,CAACgC,SAAS,CAAC;IACtB/B,aAAa,CAAC,IAAI,CAAC;EACvB,CAAC;EAED,MAAMkC,WAAW,GAAItB,KAAK,IAAK;IAC3BJ,SAAS,CAACC,OAAO,CAACG,KAAK,CAAC,CAACuB,MAAM,CAAC,CAAC;EACrC,CAAC;EAED,oBACIvC,OAAA;IAAKwC,SAAS,EAAC,mBAAmB;IAAAC,QAAA,EAC7BnC,GAAG,CAACoC,GAAG,CAAC,CAACzB,KAAK,EAAED,KAAK,kBAClBhB,OAAA;MAEI2C,IAAI,EAAC,MAAM;MACXC,GAAG,EAAGC,KAAK,IAAMjC,SAAS,CAACC,OAAO,CAACG,KAAK,CAAC,GAAG6B,KAAO;MACnD5B,KAAK,EAAEA,KAAM;MACb6B,QAAQ,EAAGf,CAAC,IAAKhB,YAAY,CAACC,KAAK,EAAEe,CAAC,CAACgB,MAAM,CAAC9B,KAAK,CAAE;MACrD+B,SAAS,EAAGjB,CAAC,IAAKD,aAAa,CAACd,KAAK,EAAEe,CAAC,CAAE;MAC1CkB,OAAO,EAAGlB,CAAC,IAAKE,WAAW,CAACF,CAAC,CAAE;MAC/BS,SAAS,EAAC,UAAU;MACpBU,SAAS,EAAE,CAAE;MACbC,OAAO,EAAEA,CAAA,KAAMb,WAAW,CAACtB,KAAK;IAAE,GAT7BA,KAAK;MAAAoC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAUb,CACJ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAAClD,EAAA,CA/FIJ,QAAQ;AAAAuD,EAAA,GAARvD,QAAQ;AAiGd,eAAeA,QAAQ;AAAC,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}