{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thesh\\\\Desktop\\\\Authentication\\\\frontend\\\\src\\\\Services\\\\OtpInput.jsx\",\n  _s = $RefreshSig$();\n// frontend/src/Services/OtpInput.jsx\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OtpInput = ({\n  length = 6,\n  onOtpSubmit = () => {},\n  onOtpComplete = () => {}\n}) => {\n  _s();\n  const [otp, setOtp] = useState(new Array(length).fill(\"\"));\n  const inputRefs = useRef([]);\n  useEffect(() => {\n    if (inputRefs.current[0]) {\n      inputRefs.current[0].focus();\n    }\n  }, []);\n  useEffect(() => {\n    onOtpComplete(otp.every(value => value !== \"\"));\n  }, [otp, onOtpComplete]);\n  const handleChange = (index, e) => {\n    const value = e.target.value;\n    if (isNaN(value) || value.length > 1) return;\n    const newOtp = [...otp];\n    newOtp[index] = value.slice(-1);\n    setOtp(newOtp);\n\n    // Focus on the next input field if value is entered\n    if (value && index < length - 1) {\n      inputRefs.current[index + 1].focus();\n    }\n\n    // Auto-submit if all fields are filled\n    if (newOtp.every(digit => digit !== \"\")) {\n      onOtpSubmit(newOtp.join(\"\"));\n    }\n  };\n  const moveCursorToEnd = inputElement => {\n    if (inputElement) {\n      const length = inputElement.value.length;\n      inputElement.setSelectionRange(length, length);\n      inputElement.focus();\n    }\n  };\n  const handleKeyDown = (index, e) => {\n    if (e.key === \"Backspace\") {\n      // Move focus to the previous input if the current one is empty\n      if (!otp[index] && index > 0) {\n        inputRefs.current[index - 1].focus();\n        moveCursorToEnd(inputRefs.current[index - 1]);\n      }\n    } else if (e.key === \"ArrowLeft\") {\n      // Move focus to the previous input field\n      if (index > 0) {\n        inputRefs.current[index - 1].focus();\n        re;\n        setTimeout(() => moveCursorToEnd(inputRefs.current[index - 1]), 0);\n      } else {\n        // If already at the first input, move focus to the last input field\n        inputRefs.current[length - 1].focus();\n        setTimeout(() => moveCursorToEnd(inputRefs.current[length - 1]), 0);\n      }\n    } else if (e.key === \"ArrowRight\") {\n      // Move focus to the next input field\n      if (index < length - 1) {\n        inputRefs.current[index + 1].focus();\n        moveCursorToEnd(inputRefs.current[index + 1]);\n      }\n    } else if (e.key === \"Tab\") {\n      // Allow tabbing to navigate between fields\n      e.preventDefault(); // Prevent the default tab behavior\n\n      if (e.shiftKey && index > 0) {\n        // Shift + Tab: Move focus to the previous input field\n        inputRefs.current[index - 1].focus();\n        moveCursorToEnd(inputRefs.current[index - 1]);\n      } else if (!e.shiftKey && index < length - 1) {\n        // Tab: Move focus to the next input field\n        inputRefs.current[index + 1].focus();\n        moveCursorToEnd(inputRefs.current[index + 1]);\n      }\n    } else if (e.key === \"Enter\") {\n      // Move focus to the next input field or trigger submission\n      if (index < length - 1) {\n        inputRefs.current[index + 1].focus();\n        moveCursorToEnd(inputRefs.current[index + 1]);\n      } else if (index === length - 1 && otp.every(value => value !== \"\")) {\n        // Trigger submission if all fields are filled\n        onOtpSubmit(otp.join(\"\"));\n      }\n    }\n  };\n  const handlePaste = e => {\n    e.preventDefault();\n    const pasteData = e.clipboardData.getData('text').slice(0, length).split(\"\");\n    const newOtp = new Array(length).fill(\"\");\n    pasteData.forEach((digit, i) => {\n      if (i < length) {\n        newOtp[i] = digit;\n        inputRefs.current[i].value = digit;\n      }\n    });\n    setOtp(newOtp);\n    inputRefs.current[length - 1].focus();\n    onOtpSubmit(newOtp.join(\"\"));\n  };\n  const handleClick = index => {\n    inputRefs.current[index].focus(); // Focus on the clicked input field\n    inputRefs.current[index].setSelectionRange(1, 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"otp-input-wrapper\",\n    children: otp.map((value, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      ref: input => inputRefs.current[index] = input,\n      value: value,\n      onChange: e => handleChange(index, e),\n      onKeyDown: e => handleKeyDown(index, e),\n      onPaste: e => handlePaste(e),\n      onClick: () => handleClick(index),\n      className: \"otpField\",\n      maxLength: 1\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 9\n  }, this);\n};\n_s(OtpInput, \"KtsFwcsXKrX6tESIX2coBILhJOc=\");\n_c = OtpInput;\nexport default OtpInput;\nvar _c;\n$RefreshReg$(_c, \"OtpInput\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","OtpInput","length","onOtpSubmit","onOtpComplete","_s","otp","setOtp","Array","fill","inputRefs","current","focus","every","value","handleChange","index","e","target","isNaN","newOtp","slice","digit","join","moveCursorToEnd","inputElement","setSelectionRange","handleKeyDown","key","re","setTimeout","preventDefault","shiftKey","handlePaste","pasteData","clipboardData","getData","split","forEach","i","handleClick","className","children","map","type","ref","input","onChange","onKeyDown","onPaste","onClick","maxLength","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/thesh/Desktop/Authentication/frontend/src/Services/OtpInput.jsx"],"sourcesContent":["// frontend/src/Services/OtpInput.jsx\r\n\r\nimport React, { useState, useRef, useEffect } from 'react';\r\n\r\nconst OtpInput = ({ length = 6, onOtpSubmit = () => {}, onOtpComplete = () => {} }) => {\r\n    const [otp, setOtp] = useState(new Array(length).fill(\"\"));\r\n    const inputRefs = useRef([]);\r\n\r\n    useEffect(() => {\r\n        if (inputRefs.current[0]) {\r\n            inputRefs.current[0].focus();\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        onOtpComplete(otp.every(value => value !== \"\"));\r\n    }, [otp, onOtpComplete]);\r\n\r\n    const handleChange = (index, e) => {\r\n        const value = e.target.value;\r\n        if (isNaN(value) || value.length > 1) return;\r\n\r\n        const newOtp = [...otp];\r\n        newOtp[index] = value.slice(-1);\r\n        setOtp(newOtp);\r\n\r\n        // Focus on the next input field if value is entered\r\n        if (value && index < length - 1) {\r\n            inputRefs.current[index + 1].focus();\r\n        }\r\n\r\n        // Auto-submit if all fields are filled\r\n        if (newOtp.every(digit => digit !== \"\")) {\r\n            onOtpSubmit(newOtp.join(\"\"));\r\n        }\r\n    };\r\n    const moveCursorToEnd = (inputElement) => {\r\n        if (inputElement) {\r\n            const length = inputElement.value.length;\r\n            inputElement.setSelectionRange(length, length);\r\n            inputElement.focus();\r\n        }\r\n    };\r\n    \r\n\r\n    const handleKeyDown = (index, e) => {\r\n        if (e.key === \"Backspace\") {\r\n            // Move focus to the previous input if the current one is empty\r\n            if (!otp[index] && index > 0) {\r\n                inputRefs.current[index - 1].focus();\r\n                moveCursorToEnd(inputRefs.current[index - 1]);\r\n            }\r\n        } else if (e.key === \"ArrowLeft\") {\r\n            // Move focus to the previous input field\r\n            if (index > 0) {\r\n                inputRefs.current[index - 1].focus();\r\n                re\r\n                setTimeout(() => moveCursorToEnd(inputRefs.current[index - 1]), 0);\r\n            } else {\r\n                // If already at the first input, move focus to the last input field\r\n                inputRefs.current[length - 1].focus();\r\n                setTimeout(() => moveCursorToEnd(inputRefs.current[length - 1]), 0);\r\n            }\r\n        }else if (e.key === \"ArrowRight\") {\r\n            // Move focus to the next input field\r\n            if (index < length - 1) {\r\n                inputRefs.current[index + 1].focus();\r\n                moveCursorToEnd(inputRefs.current[index + 1]);\r\n            }\r\n        } else if (e.key === \"Tab\") {\r\n            // Allow tabbing to navigate between fields\r\n            e.preventDefault(); // Prevent the default tab behavior\r\n    \r\n            if (e.shiftKey && index > 0) {\r\n                // Shift + Tab: Move focus to the previous input field\r\n                inputRefs.current[index - 1].focus();\r\n                moveCursorToEnd(inputRefs.current[index - 1]);\r\n            } else if (!e.shiftKey && index < length - 1) {\r\n                // Tab: Move focus to the next input field\r\n                inputRefs.current[index + 1].focus();\r\n                moveCursorToEnd(inputRefs.current[index + 1]);\r\n            }\r\n        } else if (e.key === \"Enter\") {\r\n            // Move focus to the next input field or trigger submission\r\n            if (index < length - 1) {\r\n                inputRefs.current[index + 1].focus();\r\n                moveCursorToEnd(inputRefs.current[index + 1]);\r\n            } else if (index === length - 1 && otp.every(value => value !== \"\")) {\r\n                // Trigger submission if all fields are filled\r\n                onOtpSubmit(otp.join(\"\"));\r\n            }\r\n        }\r\n    };\r\n    \r\n    \r\n    \r\n\r\n    const handlePaste = (e) => {\r\n        e.preventDefault();\r\n        const pasteData = e.clipboardData.getData('text').slice(0, length).split(\"\");\r\n        const newOtp = new Array(length).fill(\"\");\r\n\r\n        pasteData.forEach((digit, i) => {\r\n            if (i < length) {\r\n                newOtp[i] = digit;\r\n                inputRefs.current[i].value = digit; \r\n            }\r\n        });\r\n\r\n        setOtp(newOtp);\r\n        inputRefs.current[length - 1].focus(); \r\n        onOtpSubmit(newOtp.join(\"\"));\r\n    };\r\n\r\n    const handleClick = (index) => {\r\n        inputRefs.current[index].focus(); // Focus on the clicked input field\r\n        inputRefs.current[index].setSelectionRange(1, 1); \r\n    };\r\n\r\n    return (\r\n        <div className=\"otp-input-wrapper\">\r\n            {otp.map((value, index) => (\r\n                <input\r\n                    key={index}\r\n                    type=\"text\"\r\n                    ref={(input) => (inputRefs.current[index] = input)}\r\n                    value={value}\r\n                    onChange={(e) => handleChange(index, e)}\r\n                    onKeyDown={(e) => handleKeyDown(index, e)}\r\n                    onPaste={(e) => handlePaste(e)}\r\n                    onClick={() => handleClick(index)}\r\n                    className=\"otpField\"\r\n                    maxLength={1}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OtpInput;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}